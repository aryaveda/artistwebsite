{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "93dafa6e",
   "metadata": {
    "papermill": {
     "duration": 0.013049,
     "end_time": "2025-06-17T04:32:10.939981",
     "exception": false,
     "start_time": "2025-06-17T04:32:10.926932",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Setup and Configuration"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "bc5dfc8c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-17T04:32:10.964268Z",
     "iopub.status.busy": "2025-06-17T04:32:10.964056Z",
     "iopub.status.idle": "2025-06-17T04:32:10.968193Z",
     "shell.execute_reply": "2025-06-17T04:32:10.967399Z"
    },
    "papermill": {
     "duration": 0.017429,
     "end_time": "2025-06-17T04:32:10.969355",
     "exception": false,
     "start_time": "2025-06-17T04:32:10.951926",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import os\n",
    "os.environ[\"PYTORCH_CUDA_ALLOC_CONF\"] = \"expandable_segments:True\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c6fe7f8c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-17T04:32:10.992664Z",
     "iopub.status.busy": "2025-06-17T04:32:10.992434Z",
     "iopub.status.idle": "2025-06-17T04:32:10.996551Z",
     "shell.execute_reply": "2025-06-17T04:32:10.995701Z"
    },
    "papermill": {
     "duration": 0.017197,
     "end_time": "2025-06-17T04:32:10.997814",
     "exception": false,
     "start_time": "2025-06-17T04:32:10.980617",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Notebook execution started at: 2025-06-17 04:32:10\n",
      "Maximum training runtime set to: 11.42 hours (41100 seconds)\n"
     ]
    }
   ],
   "source": [
    "import time\n",
    "\n",
    "NOTEBOOK_START_TIME = time.time()\n",
    "# Set maximum runtime in seconds (11 hours 25 minutes to leave buffer)\n",
    "MAX_RUNTIME_SECONDS = 11 * 3600 + 25 * 60\n",
    "print(f\"Notebook execution started at: {time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(NOTEBOOK_START_TIME))}\")\n",
    "print(f\"Maximum training runtime set to: {MAX_RUNTIME_SECONDS / 3600:.2f} hours ({MAX_RUNTIME_SECONDS} seconds)\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9eb1da09",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-17T04:32:11.021070Z",
     "iopub.status.busy": "2025-06-17T04:32:11.020879Z",
     "iopub.status.idle": "2025-06-17T04:32:11.249541Z",
     "shell.execute_reply": "2025-06-17T04:32:11.248764Z"
    },
    "papermill": {
     "duration": 0.24163,
     "end_time": "2025-06-17T04:32:11.250774",
     "exception": false,
     "start_time": "2025-06-17T04:32:11.009144",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Tue Jun 17 04:32:11 2025       \r\n",
      "+-----------------------------------------------------------------------------------------+\r\n",
      "| NVIDIA-SMI 560.35.03              Driver Version: 560.35.03      CUDA Version: 12.6     |\r\n",
      "|-----------------------------------------+------------------------+----------------------+\r\n",
      "| GPU  Name                 Persistence-M | Bus-Id          Disp.A | Volatile Uncorr. ECC |\r\n",
      "| Fan  Temp   Perf          Pwr:Usage/Cap |           Memory-Usage | GPU-Util  Compute M. |\r\n",
      "|                                         |                        |               MIG M. |\r\n",
      "|=========================================+========================+======================|\r\n",
      "|   0  Tesla T4                       Off |   00000000:00:04.0 Off |                    0 |\r\n",
      "| N/A   47C    P8              9W /   70W |       1MiB /  15360MiB |      0%      Default |\r\n",
      "|                                         |                        |                  N/A |\r\n",
      "+-----------------------------------------+------------------------+----------------------+\r\n",
      "|   1  Tesla T4                       Off |   00000000:00:05.0 Off |                    0 |\r\n",
      "| N/A   44C    P8             10W /   70W |       1MiB /  15360MiB |      0%      Default |\r\n",
      "|                                         |                        |                  N/A |\r\n",
      "+-----------------------------------------+------------------------+----------------------+\r\n",
      "                                                                                         \r\n",
      "+-----------------------------------------------------------------------------------------+\r\n",
      "| Processes:                                                                              |\r\n",
      "|  GPU   GI   CI        PID   Type   Process name                              GPU Memory |\r\n",
      "|        ID   ID                                                               Usage      |\r\n",
      "|=========================================================================================|\r\n",
      "|  No running processes found                                                             |\r\n",
      "+-----------------------------------------------------------------------------------------+\r\n"
     ]
    }
   ],
   "source": [
    "!nvidia-smi"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "e9734e20",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-17T04:32:11.274862Z",
     "iopub.status.busy": "2025-06-17T04:32:11.274633Z",
     "iopub.status.idle": "2025-06-17T04:32:52.511204Z",
     "shell.execute_reply": "2025-06-17T04:32:52.510207Z"
    },
    "papermill": {
     "duration": 41.250298,
     "end_time": "2025-06-17T04:32:52.512756",
     "exception": false,
     "start_time": "2025-06-17T04:32:11.262458",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Successfully installed/upgraded: git+https://github.com/ildoonet/pytorch-gradual-warmup-lr.git\n",
      "Successfully installed/upgraded: geffnet\n",
      "Successfully installed/upgraded: albumentations\n",
      "Successfully installed/upgraded: wandb\n",
      "Successfully installed/upgraded: opencv-python\n",
      "Successfully installed/upgraded: pytz\n",
      "Successfully installed/upgraded: timm\n",
      "Successfully installed/upgraded: grad-cam\n",
      "Successfully installed/upgraded: ttach\n",
      "All packages installed.\n"
     ]
    }
   ],
   "source": [
    "import subprocess\n",
    "import sys\n",
    "\n",
    "def install_package(package, upgrade=False):\n",
    "    \"\"\"Installs a package, suppressing stdout and stderr.\"\"\"\n",
    "    try:\n",
    "        command = [sys.executable, \"-m\", \"pip\", \"install\"]\n",
    "        if upgrade:\n",
    "            command.append(\"--upgrade\")\n",
    "        command.append(package)\n",
    "\n",
    "        # Redirect stdout and stderr to /dev/null (or equivalent)\n",
    "        with open('/dev/null', 'w') as devnull:\n",
    "            subprocess.check_call(command, stdout=devnull, stderr=devnull)\n",
    "        print(f\"Successfully installed/upgraded: {package}\") # Inform user\n",
    "    except subprocess.CalledProcessError as e:\n",
    "        print(f\"Error installing {package}: {e}\", file=sys.stderr)\n",
    "    except Exception as e:  # Catch other potential exceptions\n",
    "        print(f\"An unexpected error occurred: {e}\", file=sys.stderr)\n",
    "\n",
    "# Example usage:  (replace with your package list)\n",
    "install_package(\"git+https://github.com/ildoonet/pytorch-gradual-warmup-lr.git\")\n",
    "install_package(\"geffnet\")\n",
    "install_package(\"albumentations\", upgrade=True) # Example with upgrade\n",
    "install_package(\"wandb\")\n",
    "install_package(\"opencv-python\")\n",
    "install_package(\"pytz\")\n",
    "install_package(\"timm\", upgrade=True)\n",
    "# Add near your other install commands\n",
    "install_package(\"grad-cam\")   \n",
    "install_package(\"ttach\") # pytorch-grad-cam sometimes uses this\n",
    "\n",
    "print(\"All packages installed.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f34cde9e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-17T04:32:52.541422Z",
     "iopub.status.busy": "2025-06-17T04:32:52.541155Z",
     "iopub.status.idle": "2025-06-17T04:33:18.475782Z",
     "shell.execute_reply": "2025-06-17T04:33:18.475103Z"
    },
    "papermill": {
     "duration": 25.951116,
     "end_time": "2025-06-17T04:33:18.477351",
     "exception": false,
     "start_time": "2025-06-17T04:32:52.526235",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Standard Libraries\n",
    "import os\n",
    "import time\n",
    "import warnings\n",
    "import logging\n",
    "import subprocess\n",
    "import traceback\n",
    "from datetime import datetime\n",
    "from tqdm import tqdm\n",
    "from tqdm.notebook import tqdm as tqdm_notebook\n",
    "\n",
    "# Data Handling and Visualization\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import PIL.Image\n",
    "import cv2\n",
    "import re\n",
    "# Machine Learning and Metrics\n",
    "from sklearn.model_selection import train_test_split, StratifiedKFold\n",
    "from sklearn.metrics import (\n",
    "    roc_auc_score, f1_score, accuracy_score, precision_score, recall_score,\n",
    "    classification_report, confusion_matrix, roc_curve, precision_recall_curve\n",
    ")\n",
    "from sklearn.calibration import calibration_curve\n",
    "from scipy.stats import wilcoxon\n",
    "\n",
    "# Deep Learning Frameworks\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.nn.functional as F\n",
    "import torch.optim as optim\n",
    "from torch.optim import lr_scheduler\n",
    "from torch.utils.data import (\n",
    "    TensorDataset, DataLoader, Dataset, RandomSampler, SubsetRandomSampler,\n",
    "    SequentialSampler, WeightedRandomSampler\n",
    ")\n",
    "from torch.amp import autocast as amp_autocast, GradScaler\n",
    "import torchvision\n",
    "import torchvision.transforms as transforms\n",
    "import math\n",
    "# Model Architectures and Utilities\n",
    "import timm\n",
    "from timm import create_model\n",
    "import geffnet\n",
    "from transformers import ViTFeatureExtractor, ViTModel, ViTConfig, SwinConfig, SwinModel\n",
    "\n",
    "# Learning Rate Schedulers\n",
    "from torch.optim.lr_scheduler import CosineAnnealingLR, ReduceLROnPlateau\n",
    "from warmup_scheduler import GradualWarmupScheduler\n",
    "# Add near your other imports\n",
    "from pytorch_grad_cam import GradCAM\n",
    "from pytorch_grad_cam.utils.model_targets import ClassifierOutputTarget\n",
    "from pytorch_grad_cam.utils.image import show_cam_on_image\n",
    "# Distributed Training\n",
    "from accelerate import Accelerator, notebook_launcher\n",
    "from torch.utils.data.distributed import DistributedSampler\n",
    "\n",
    "# Metrics and Evaluation\n",
    "from torchmetrics.classification import (\n",
    "    MulticlassAccuracy, MulticlassF1Score, MulticlassAUROC, MulticlassConfusionMatrix,\n",
    "    BinaryAUROC\n",
    ")\n",
    "from torchmetrics.functional.classification import binary_accuracy, binary_f1_score\n",
    "\n",
    "# Image Augmentation\n",
    "import albumentations as A\n",
    "\n",
    "from skimage.segmentation import slic\n",
    "\n",
    "# Timezone Handling\n",
    "import pytz\n",
    "from typing import Dict, Optional, Union\n",
    "\n",
    "# Experiment Tracking\n",
    "import wandb\n",
    "%matplotlib inline\n",
    "device = torch.device('cuda')\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'\n",
    "os.environ['PYTHONWARNINGS'] = 'ignore'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "3eb976b6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-17T04:33:18.503435Z",
     "iopub.status.busy": "2025-06-17T04:33:18.502919Z",
     "iopub.status.idle": "2025-06-17T04:33:19.245710Z",
     "shell.execute_reply": "2025-06-17T04:33:19.244885Z"
    },
    "papermill": {
     "duration": 0.757219,
     "end_time": "2025-06-17T04:33:19.247185",
     "exception": false,
     "start_time": "2025-06-17T04:33:18.489966",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[34m\u001b[1mwandb\u001b[0m: Using wandb-core as the SDK backend.  Please refer to https://wandb.me/wandb-core for more information.\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33marveda-ava86\u001b[0m (\u001b[33marveda-ava86-universitas-gadjah-mada-library\u001b[0m). Use \u001b[1m`wandb login --relogin`\u001b[0m to force relogin\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: \u001b[33mWARNING\u001b[0m If you're specifying your api key in code, ensure this code is not shared publicly.\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: \u001b[33mWARNING\u001b[0m Consider setting the WANDB_API_KEY environment variable, or running `wandb login` from the command line.\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: Appending key for api.wandb.ai to your netrc file: /root/.netrc\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from kaggle_secrets import UserSecretsClient\n",
    "user_secrets = UserSecretsClient()\n",
    "my_secret = user_secrets.get_secret(\"wandb_api_key\") \n",
    "wandb.login(key=my_secret)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9b98c7d3",
   "metadata": {
    "papermill": {
     "duration": 0.011984,
     "end_time": "2025-06-17T04:33:19.272208",
     "exception": false,
     "start_time": "2025-06-17T04:33:19.260224",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Parameter Configuration"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "2c0c4673",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-17T04:33:19.297475Z",
     "iopub.status.busy": "2025-06-17T04:33:19.297219Z",
     "iopub.status.idle": "2025-06-17T04:33:19.305597Z",
     "shell.execute_reply": "2025-06-17T04:33:19.304930Z"
    },
    "papermill": {
     "duration": 0.022461,
     "end_time": "2025-06-17T04:33:19.306864",
     "exception": false,
     "start_time": "2025-06-17T04:33:19.284403",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Run Config: Model=swin_only, CNN=efficientnet_v2_m, UseMeta=False, UseExt=True\n",
      "NOTE: Forcing image_size to 384 for Swin model compatibility.\n",
      "CNN Size Tag: m, Target Image Size: 384x384\n",
      "Generated kernel_type: v2m_384_ext\n",
      "Selected Data Directory Size: 384x384\n",
      "Comp Data Dir: ../input/jpeg-melanoma-384x384, Ext Data Dir: ../input/jpeg-isic2019-384x384\n",
      "Note: Batch size, accum steps, epoch phases are set dynamically.\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "# --- Core Run Configuration ---\n",
    "# SET THE CONFIGURATION FOR THIS SPECIFIC RUN:\n",
    "model_type = 'swin_only' # Options: 'efficientnetv2', 'hybrid_swin', 'swin_only'\n",
    "# Use the torch.hub names now for V2\n",
    "cnn_backbone_name = 'efficientnet_v2_m' # e.g., 'efficientnet_v2_s', 'efficientnet_v2_m', 'efficientnet_v2_l'\n",
    "# Use the TIMM name for Swin\n",
    "transformer_backbone_name = 'swin_base_patch4_window12_384.ms_in22k_ft_in1k' # Keep this for hybrid\n",
    "use_amp = True\n",
    "use_external = True\n",
    "use_meta = False\n",
    "DEBUG = False\n",
    "target_total_epochs = 30 \n",
    "# --- Standard Settings ---\n",
    "num_workers = 4\n",
    "init_lr = 1e-3 # Base LR\n",
    "\n",
    "# --- REMOVED Pretrained File Settings ---\n",
    "# model_dir = '../input/melanoma-winning-models'\n",
    "# pretrained_type = ...\n",
    "# i_fold = ...\n",
    "# model_file = ...\n",
    "\n",
    "print(f\"Run Config: Model={model_type}, CNN={cnn_backbone_name}, UseMeta={use_meta}, UseExt={use_external}\")\n",
    "\n",
    "# --- Helper Function ---\n",
    "def get_v2_size_map(v2_name_str):\n",
    "    if 'v2_s' in v2_name_str: return 's'\n",
    "    if 'v2_m' in v2_name_str: return 'm'\n",
    "    if 'v2_l' in v2_name_str: return 'l'\n",
    "    print(f\"Warning: Could not map V2 size from '{v2_name_str}'. Defaulting to 'm'.\")\n",
    "    return 'm'\n",
    "\n",
    "# --- Determine V2 Size and TARGET Image Size ---\n",
    "cnn_size_tag = get_v2_size_map(cnn_backbone_name)\n",
    "target_image_sizes_map = {'s': 384, 'm': 448, 'l': 480}\n",
    "image_size = 384\n",
    "# --- CORRECTED LINE ---\n",
    "if model_type in ['hybrid_swin', 'swin_only'] and '384' in transformer_backbone_name:\n",
    "# --- END CORRECTION ---\n",
    "        print(f\"NOTE: Forcing image_size to 384 for Swin model compatibility.\")\n",
    "        image_size = 384\n",
    "print(f\"CNN Size Tag: {cnn_size_tag}, Target Image Size: {image_size}x{image_size}\")\n",
    "\n",
    "# --- Generate kernel_type ---\n",
    "kernel_base = f\"{cnn_backbone_name.replace('_','').replace('efficientnet','')}\" # e.g., effnetv2m\n",
    "if model_type == 'hybrid_swin': kernel_base += f\"_{transformer_backbone_name.split('_')[0]}\"\n",
    "kernel_type = f\"{kernel_base}_{image_size}{'_ext' if use_external else ''}{'_meta' if use_meta else ''}\"\n",
    "print(f\"Generated kernel_type: {kernel_type}\")\n",
    "\n",
    "# --- Determine Data Directory Size ---\n",
    "available_data_sizes = [256, 384, 512]; data_dir_size = 384 if image_size <= 384 else 512\n",
    "print(f\"Selected Data Directory Size: {data_dir_size}x{data_dir_size}\")\n",
    "\n",
    "# --- Set Data Directory Paths ---\n",
    "data_dir = f'../input/jpeg-melanoma-{data_dir_size}x{data_dir_size}'\n",
    "data_dir2 = f'../input/jpeg-isic2019-{data_dir_size}x{data_dir_size}' if use_external else None\n",
    "print(f\"Comp Data Dir: {data_dir}\" + (f\", Ext Data Dir: {data_dir2}\" if data_dir2 else \"\"))\n",
    "\n",
    "# --- Dynamic Variables Note ---\n",
    "print(\"Note: Batch size, accum steps, epoch phases are set dynamically.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "57a168d2",
   "metadata": {
    "papermill": {
     "duration": 0.012237,
     "end_time": "2025-06-17T04:33:19.331117",
     "exception": false,
     "start_time": "2025-06-17T04:33:19.318880",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Scaling Factors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "d69cd9e3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-17T04:33:19.356454Z",
     "iopub.status.busy": "2025-06-17T04:33:19.356215Z",
     "iopub.status.idle": "2025-06-17T04:33:19.361603Z",
     "shell.execute_reply": "2025-06-17T04:33:19.360805Z"
    },
    "papermill": {
     "duration": 0.019642,
     "end_time": "2025-06-17T04:33:19.362798",
     "exception": false,
     "start_time": "2025-06-17T04:33:19.343156",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def configure_dynamic_parameters(model_type, cnn_backbone_name, use_meta, use_external):\n",
    "    \"\"\"\n",
    "    Calculates base scaling factors based ONLY on CNN size ('s', 'm', 'l').\n",
    "    Adaptations based on meta, external data, or hybrid type are REMOVED\n",
    "    to ensure consistent LR/Regularization multipliers across runs for purity.\n",
    "    Returns factors that will be applied later (e.g., in LLRD, WD, Dropout init).\n",
    "    \"\"\"\n",
    "    cnn_size_tag = get_v2_size_map(cnn_backbone_name)\n",
    "    print(f\"Configuring BASE scaling factors based on CNN size ONLY for: type='{model_type}', cnn='{cnn_backbone_name}' ({cnn_size_tag}), meta={use_meta}, external={use_external}\")\n",
    "    print(\"  NOTE: Multipliers for meta, external, hybrid are DISABLED for purity.\")\n",
    "\n",
    "    # --- Base Scales based ONLY on CNN Size ---\n",
    "    # Still apply a slight adjustment based on model scale, as this is common practice.\n",
    "    size_to_b_map = {'s': 3, 'm': 5, 'l': 7}\n",
    "    equiv_b_version = size_to_b_map.get(cnn_size_tag, 5)\n",
    "    # Base LR factor: Slightly lower for S, slightly higher for L relative to M (applied to base_lr later)\n",
    "    lr_base_scale = { 3: 0.9, 5: 1.0, 7: 1.1 } # Adjusted slightly: s: 0.9, m: 1.0, l: 1.1\n",
    "    # Base Regularization factor: Slightly higher for S, slightly lower for L (applied to WD/Dropout later)\n",
    "    reg_base_scale = { 3: 1.05, 5: 1.0, 7: 0.95 } # Adjusted slightly: s: 1.05, m: 1.0, l: 0.95\n",
    "    \n",
    "    current_base_lr_factor = lr_base_scale.get(equiv_b_version, 1.0)\n",
    "    current_base_reg_factor = reg_base_scale.get(equiv_b_version, 1.0)\n",
    "    print(f\"  Base factors based on CNN size '{cnn_size_tag}': LR Factor={current_base_lr_factor:.2f}, Reg Factor={current_base_reg_factor:.2f}\")\n",
    "\n",
    "    # --- Combine (Now only uses base factors) ---\n",
    "    final_lr_factor = current_base_lr_factor # * 1.0 (removed multiplier)\n",
    "    final_reg_factor = current_base_reg_factor # * 1.0 (removed multiplier)\n",
    "\n",
    "    # Clamp to reasonable bounds (still useful for the base factors)\n",
    "    final_lr_factor = max(0.5, min(final_lr_factor, 1.5)) # Clamp LR factor bounds if needed\n",
    "    final_reg_factor = max(0.5, min(final_reg_factor, 1.5)) # Clamp Reg factor bounds if needed\n",
    "\n",
    "    # Rename variables for clarity (these factors modify base LR/WD/Dropout later)\n",
    "    lr_adaptation_factor = round(final_lr_factor, 6)\n",
    "    regularization_factor = round(final_reg_factor, 6)\n",
    "\n",
    "    print(f\"  ==> Final Factors (Based ONLY on CNN Size): LR Adapt Factor={lr_adaptation_factor}, Reg Factor={regularization_factor}\")\n",
    "\n",
    "    # Return only the two factors\n",
    "    return lr_adaptation_factor, regularization_factor"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b8172358",
   "metadata": {
    "papermill": {
     "duration": 0.01191,
     "end_time": "2025-06-17T04:33:19.386838",
     "exception": false,
     "start_time": "2025-06-17T04:33:19.374928",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Data Preparation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "247135ab",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-17T04:33:19.411893Z",
     "iopub.status.busy": "2025-06-17T04:33:19.411688Z",
     "iopub.status.idle": "2025-06-17T04:33:19.471867Z",
     "shell.execute_reply": "2025-06-17T04:33:19.471029Z"
    },
    "papermill": {
     "duration": 0.074247,
     "end_time": "2025-06-17T04:33:19.473139",
     "exception": false,
     "start_time": "2025-06-17T04:33:19.398892",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test Data Loaded - Shape: (10982, 8)\n",
      "Test Data Sample:\n",
      "      image_name  patient_id     sex  age_approx anatom_site_general_challenge  \\\n",
      "0  ISIC_0052060  IP_3579794    male        70.0                           NaN   \n",
      "1  ISIC_0052349  IP_7782715    male        40.0               lower extremity   \n",
      "2  ISIC_0058510  IP_7960270  female        55.0                         torso   \n",
      "3  ISIC_0073313  IP_6375035  female        50.0                         torso   \n",
      "4  ISIC_0073502  IP_0589375  female        45.0               lower extremity   \n",
      "\n",
      "   width  height                                           filepath  \n",
      "0   6000    4000  ../input/jpeg-melanoma-384x384/test/ISIC_00520...  \n",
      "1   6000    4000  ../input/jpeg-melanoma-384x384/test/ISIC_00523...  \n",
      "2   6000    4000  ../input/jpeg-melanoma-384x384/test/ISIC_00585...  \n",
      "3   6000    4000  ../input/jpeg-melanoma-384x384/test/ISIC_00733...  \n",
      "4   1920    1080  ../input/jpeg-melanoma-384x384/test/ISIC_00735...  \n"
     ]
    }
   ],
   "source": [
    "# Load test data\n",
    "df_test = pd.read_csv(os.path.join(data_dir, 'test.csv'))\n",
    "df_test['filepath'] = df_test['image_name'].apply(lambda x: os.path.join(data_dir, 'test', f'{x}.jpg'))\n",
    "print(\"Test Data Loaded - Shape:\", df_test.shape)\n",
    "print(\"Test Data Sample:\\n\", df_test.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "a38dcd0b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-17T04:33:19.498382Z",
     "iopub.status.busy": "2025-06-17T04:33:19.498179Z",
     "iopub.status.idle": "2025-06-17T04:33:19.686600Z",
     "shell.execute_reply": "2025-06-17T04:33:19.685639Z"
    },
    "papermill": {
     "duration": 0.20235,
     "end_time": "2025-06-17T04:33:19.687889",
     "exception": false,
     "start_time": "2025-06-17T04:33:19.485539",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Initial Train Data Shape: (33126, 11)\n",
      "Train Data Shape after tfrecord filter: (32692, 11)\n"
     ]
    }
   ],
   "source": [
    "# Load train data and filter\n",
    "df_train = pd.read_csv(os.path.join(data_dir, 'train.csv'))\n",
    "print(\"Initial Train Data Shape:\", df_train.shape)\n",
    "df_train = df_train[df_train['tfrecord'] != -1].reset_index(drop=True)\n",
    "print(\"Train Data Shape after tfrecord filter:\", df_train.shape)\n",
    "df_train['is_ext'] = 0\n",
    "df_train['filepath'] = df_train['image_name'].apply(lambda x: os.path.join(data_dir, 'train', f'{x}.jpg'))\n",
    "\n",
    "# Clean diagnosis labels\n",
    "df_train['diagnosis'] = df_train['diagnosis'].apply(lambda x: x.replace('seborrheic keratosis', 'BKL'))\n",
    "df_train['diagnosis'] = df_train['diagnosis'].apply(lambda x: x.replace('lichenoid keratosis', 'BKL'))\n",
    "df_train['diagnosis'] = df_train['diagnosis'].apply(lambda x: x.replace('solar lentigo', 'BKL'))\n",
    "df_train['diagnosis'] = df_train['diagnosis'].apply(lambda x: x.replace('lentigo NOS', 'BKL'))\n",
    "df_train['diagnosis'] = df_train['diagnosis'].apply(lambda x: x.replace('cafe-au-lait macule', 'unknown'))\n",
    "df_train['diagnosis'] = df_train['diagnosis'].apply(lambda x: x.replace('atypical melanocytic proliferation', 'unknown'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "53f3cc4c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-17T04:33:19.713338Z",
     "iopub.status.busy": "2025-06-17T04:33:19.713086Z",
     "iopub.status.idle": "2025-06-17T04:33:19.881659Z",
     "shell.execute_reply": "2025-06-17T04:33:19.880602Z"
    },
    "papermill": {
     "duration": 0.182684,
     "end_time": "2025-06-17T04:33:19.883104",
     "exception": false,
     "start_time": "2025-06-17T04:33:19.700420",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "External Train Data Shape: (25331, 11)\n",
      "External Data Diagnosis Unique: ['nevus' 'melanoma' 'BKL' 'DF' 'SCC' 'BCC' 'VASC' 'AK']\n",
      "Combined Train Data Shape: (57964, 13)\n",
      "Diagnosis to Index Mapping: {'AK': 0, 'BCC': 1, 'BKL': 2, 'DF': 3, 'SCC': 4, 'VASC': 5, 'melanoma': 6, 'nevus': 7, 'unknown': 8}\n",
      "Target Value Counts:\n",
      " target\n",
      "8    26699\n",
      "7    18031\n",
      "6     5090\n",
      "1     3320\n",
      "2     2837\n",
      "0      867\n",
      "4      628\n",
      "5      253\n",
      "3      239\n",
      "Name: count, dtype: int64\n",
      "Number of unique classes (out_dim): 9\n",
      "Melanoma index (mel_idx): 6\n"
     ]
    }
   ],
   "source": [
    "# Add external data if enabled\n",
    "if use_external:\n",
    "    df_train2 = pd.read_csv(os.path.join(data_dir2, 'train.csv'))\n",
    "    print(\"External Train Data Shape:\", df_train2.shape)\n",
    "    df_train2 = df_train2[df_train2['tfrecord'] >= 0].reset_index(drop=True)\n",
    "    df_train2['is_ext'] = 1\n",
    "    df_train2['filepath'] = df_train2['image_name'].apply(lambda x: os.path.join(data_dir2, 'train', f'{x}.jpg'))\n",
    "    df_train2['diagnosis'] = df_train2['diagnosis'].apply(lambda x: x.replace('NV', 'nevus'))\n",
    "    df_train2['diagnosis'] = df_train2['diagnosis'].apply(lambda x: x.replace('MEL', 'melanoma'))\n",
    "    print(\"External Data Diagnosis Unique:\", df_train2['diagnosis'].unique())\n",
    "    \n",
    "    # Combine datasets\n",
    "    df_train = pd.concat([df_train, df_train2]).reset_index(drop=True)\n",
    "    print(\"Combined Train Data Shape:\", df_train.shape)\n",
    "    \n",
    "# Add assertion to ensure data isn't empty\n",
    "assert not df_train.empty, \"Error: df_train is empty after preparation!\"\n",
    "assert 'diagnosis' in df_train.columns, \"Error: 'diagnosis' column missing in df_train!\"\n",
    "\n",
    "# Map diagnosis to target indices\n",
    "diagnosis2idx = {d: idx for idx, d in enumerate(sorted(df_train.diagnosis.unique()))}\n",
    "df_train['target'] = df_train['diagnosis'].map(diagnosis2idx)\n",
    "mel_idx = diagnosis2idx['melanoma']\n",
    "print(\"Diagnosis to Index Mapping:\", diagnosis2idx)\n",
    "print(\"Target Value Counts:\\n\", df_train['target'].value_counts())\n",
    "\n",
    "# Dynamically set out_dim\n",
    "out_dim = len(df_train['target'].unique())\n",
    "print(f\"Number of unique classes (out_dim): {out_dim}\")\n",
    "print(f\"Melanoma index (mel_idx): {mel_idx}\")\n",
    "\n",
    "# Final assertions to verify critical variables\n",
    "assert mel_idx in df_train['target'].values, f\"Error: mel_idx ({mel_idx}) not found in target values!\"\n",
    "assert out_dim > 1, \"Error: out_dim is 1 or less, indicating no class variation!\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "86690665",
   "metadata": {
    "papermill": {
     "duration": 0.012236,
     "end_time": "2025-06-17T04:33:19.908337",
     "exception": false,
     "start_time": "2025-06-17T04:33:19.896101",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Class Distribution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "d3ffd893",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-17T04:33:19.934583Z",
     "iopub.status.busy": "2025-06-17T04:33:19.934303Z",
     "iopub.status.idle": "2025-06-17T04:33:20.671568Z",
     "shell.execute_reply": "2025-06-17T04:33:20.670686Z"
    },
    "papermill": {
     "duration": 0.752301,
     "end_time": "2025-06-17T04:33:20.673101",
     "exception": false,
     "start_time": "2025-06-17T04:33:19.920800",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Class distribution\n",
    "class_counts = df_train['diagnosis'].value_counts()\n",
    "total_samples = len(df_train)\n",
    "class_percentages = (class_counts / total_samples) * 100\n",
    "\n",
    "plt.figure(figsize=(12, 6))\n",
    "sns.barplot(x=class_counts.index, y=class_counts.values, palette='viridis')\n",
    "plt.title('Distribution of Diagnosis Classes', fontsize=16)\n",
    "plt.xlabel('Diagnosis', fontsize=14)\n",
    "plt.ylabel('Count', fontsize=14)\n",
    "plt.xticks(rotation=45)\n",
    "for i, count in enumerate(class_counts):\n",
    "    plt.text(i, count + 0.5, f'{class_percentages[i]:.2f}%', ha='center', fontsize=12)\n",
    "plt.tight_layout()\n",
    "plt.savefig('class_distribution.png', dpi=300)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0e102d51",
   "metadata": {
    "papermill": {
     "duration": 0.012952,
     "end_time": "2025-06-17T04:33:20.700660",
     "exception": false,
     "start_time": "2025-06-17T04:33:20.687708",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Preprocess Meta Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "1b950443",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-17T04:33:20.727859Z",
     "iopub.status.busy": "2025-06-17T04:33:20.727603Z",
     "iopub.status.idle": "2025-06-17T04:33:20.738574Z",
     "shell.execute_reply": "2025-06-17T04:33:20.737631Z"
    },
    "papermill": {
     "duration": 0.026151,
     "end_time": "2025-06-17T04:33:20.739936",
     "exception": false,
     "start_time": "2025-06-17T04:33:20.713785",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Meta features disabled.\n"
     ]
    }
   ],
   "source": [
    "from tqdm import tqdm  # Ensure this import is present\n",
    "\n",
    "if use_meta:\n",
    "    # One-hot encoding of anatom_site_general_challenge feature\n",
    "    print(\"One-hot encoding 'anatom_site_general_challenge'...\")\n",
    "    concat = pd.concat([df_train['anatom_site_general_challenge'], df_test['anatom_site_general_challenge']], ignore_index=True)\n",
    "    dummies = pd.get_dummies(concat, dummy_na=True, dtype=np.uint8, prefix='site')\n",
    "    df_train = pd.concat([df_train, dummies.iloc[:df_train.shape[0]]], axis=1)\n",
    "    df_test = pd.concat([df_test, dummies.iloc[df_train.shape[0]:].reset_index(drop=True)], axis=1)\n",
    "    \n",
    "    # Sex features\n",
    "    print(\"Encoding 'sex' feature...\")\n",
    "    df_train['sex'] = df_train['sex'].map({'male': 1, 'female': 0})\n",
    "    df_test['sex'] = df_test['sex'].map({'male': 1, 'female': 0})\n",
    "    df_train['sex'] = df_train['sex'].fillna(-1)\n",
    "    df_test['sex'] = df_test['sex'].fillna(-1)\n",
    "    \n",
    "    # Age features\n",
    "    print(\"Normalizing 'age_approx' feature...\")\n",
    "    df_train['age_approx'] /= 90\n",
    "    df_test['age_approx'] /= 90\n",
    "    df_train['age_approx'] = df_train['age_approx'].fillna(0)\n",
    "    df_test['age_approx'] = df_test['age_approx'].fillna(0)\n",
    "        \n",
    "    # Patient ID features\n",
    "    print(\"Handling 'patient_id' feature...\")\n",
    "    df_train['patient_id'] = df_train['patient_id'].fillna(0)\n",
    "    \n",
    "    # n_images per user\n",
    "    print(\"Calculating 'n_images' per patient...\")\n",
    "    df_train['n_images'] = df_train.patient_id.map(df_train.groupby(['patient_id']).image_name.count())\n",
    "    df_test['n_images'] = df_test.patient_id.map(df_test.groupby(['patient_id']).image_name.count())\n",
    "    df_train.loc[df_train['patient_id'] == -1, 'n_images'] = 1\n",
    "    df_train['n_images'] = np.log1p(df_train['n_images'].values)\n",
    "    df_test['n_images'] = np.log1p(df_test['n_images'].values)\n",
    "    \n",
    "    # Image size\n",
    "    print(\"Calculating image sizes...\")\n",
    "    train_images = df_train['filepath'].values\n",
    "    train_sizes = np.zeros(train_images.shape[0])\n",
    "    for i, img_path in enumerate(tqdm(train_images, desc=\"Processing training images\", unit=\"image\")):\n",
    "        train_sizes[i] = os.path.getsize(img_path)\n",
    "    df_train['image_size'] = np.log(train_sizes)\n",
    "    \n",
    "    test_images = df_test['filepath'].values\n",
    "    test_sizes = np.zeros(test_images.shape[0])\n",
    "    for i, img_path in enumerate(tqdm(test_images, desc=\"Processing test images\", unit=\"image\")):\n",
    "        test_sizes[i] = os.path.getsize(img_path)\n",
    "    df_test['image_size'] = np.log(test_sizes)\n",
    "    # Improved age normalization\n",
    "    mean_age = df_train['age_approx'].mean()\n",
    "    std_age = df_train['age_approx'].std()\n",
    "    df_train['age_approx'] = (df_train['age_approx'].fillna(mean_age) - mean_age) / std_age\n",
    "    df_test['age_approx'] = (df_test['age_approx'].fillna(mean_age) - mean_age) / std_age\n",
    "    \n",
    "    # Log-transformed features standardization\n",
    "    df_train['n_images'] = (df_train['n_images'] - df_train['n_images'].mean()) / df_train['n_images'].std()\n",
    "    df_test['n_images'] = (df_test['n_images'] - df_train['n_images'].mean()) / df_train['n_images'].std()\n",
    "    # Meta features\n",
    "    meta_features = ['sex', 'age_approx', 'n_images', 'image_size'] + [col for col in df_train.columns if col.startswith('site_')]\n",
    "    n_meta_features = len(meta_features)\n",
    "    print(f\"Meta features created: {meta_features}\")\n",
    "else:\n",
    "    n_meta_features = 0\n",
    "    print(\"Meta features disabled.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "83eb9bac",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-17T04:33:20.767899Z",
     "iopub.status.busy": "2025-06-17T04:33:20.767668Z",
     "iopub.status.idle": "2025-06-17T04:33:20.772122Z",
     "shell.execute_reply": "2025-06-17T04:33:20.771294Z"
    },
    "papermill": {
     "duration": 0.019814,
     "end_time": "2025-06-17T04:33:20.773436",
     "exception": false,
     "start_time": "2025-06-17T04:33:20.753622",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "n_meta_features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "253ed361",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-17T04:33:20.800764Z",
     "iopub.status.busy": "2025-06-17T04:33:20.800565Z",
     "iopub.status.idle": "2025-06-17T04:33:20.809486Z",
     "shell.execute_reply": "2025-06-17T04:33:20.808654Z"
    },
    "papermill": {
     "duration": 0.024118,
     "end_time": "2025-06-17T04:33:20.810861",
     "exception": false,
     "start_time": "2025-06-17T04:33:20.786743",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                     image_name  patient_id      sex  age_approx  \\\n",
      "57322              ISIC_0072236          -1   female        20.0   \n",
      "36536              ISIC_0025272          -1   female        55.0   \n",
      "32807  ISIC_0000123_downsampled          -1  unknown         NaN   \n",
      "9580               ISIC_2982630  IP_4409916   female        40.0   \n",
      "22260              ISIC_6805527  IP_1233669   female        55.0   \n",
      "\n",
      "      anatom_site_general_challenge diagnosis benign_malignant  target  \\\n",
      "57322               lower extremity     nevus           benign       7   \n",
      "36536               lower extremity     nevus           benign       7   \n",
      "32807                           NaN     nevus           benign       7   \n",
      "9580                upper extremity   unknown           benign       8   \n",
      "22260               upper extremity     nevus           benign       7   \n",
      "\n",
      "       tfrecord  width  height  is_ext  \\\n",
      "57322        13   1024    1024       1   \n",
      "36536        24    600     450       1   \n",
      "32807        22   1024     768       1   \n",
      "9580          8   6000    4000       0   \n",
      "22260         3   1872    1053       0   \n",
      "\n",
      "                                                filepath  \n",
      "57322  ../input/jpeg-isic2019-384x384/train/ISIC_0072...  \n",
      "36536  ../input/jpeg-isic2019-384x384/train/ISIC_0025...  \n",
      "32807  ../input/jpeg-isic2019-384x384/train/ISIC_0000...  \n",
      "9580   ../input/jpeg-melanoma-384x384/train/ISIC_2982...  \n",
      "22260  ../input/jpeg-melanoma-384x384/train/ISIC_6805...  \n"
     ]
    }
   ],
   "source": [
    "# Display a random sample of 5 rows\n",
    "print(df_train.sample(5))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c2ac7657",
   "metadata": {
    "papermill": {
     "duration": 0.013563,
     "end_time": "2025-06-17T04:33:20.838853",
     "exception": false,
     "start_time": "2025-06-17T04:33:20.825290",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Define Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "b756a074",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-17T04:33:20.866727Z",
     "iopub.status.busy": "2025-06-17T04:33:20.866478Z",
     "iopub.status.idle": "2025-06-17T04:33:20.871912Z",
     "shell.execute_reply": "2025-06-17T04:33:20.871315Z"
    },
    "papermill": {
     "duration": 0.02066,
     "end_time": "2025-06-17T04:33:20.872990",
     "exception": false,
     "start_time": "2025-06-17T04:33:20.852330",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class SIIMISICDataset(Dataset):\n",
    "    def __init__(self, csv, split, mode, transform=None):\n",
    "\n",
    "        self.csv = csv.reset_index(drop=True)\n",
    "        self.split = split\n",
    "        self.mode = mode\n",
    "        self.transform = transform\n",
    "\n",
    "    def __len__(self):\n",
    "        return self.csv.shape[0]\n",
    "\n",
    "    def __getitem__(self, index):\n",
    "        row = self.csv.iloc[index]\n",
    "        \n",
    "        image = cv2.imread(row.filepath)\n",
    "        image = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)\n",
    "\n",
    "        if self.transform is not None:\n",
    "            res = self.transform(image=image)\n",
    "            image = res['image'].astype(np.float32)\n",
    "        else:\n",
    "            image = image.astype(np.float32)\n",
    "\n",
    "        image = image.transpose(2, 0, 1)\n",
    "\n",
    "        if use_meta:\n",
    "            data = (torch.tensor(image).float(), torch.tensor(self.csv.iloc[index][meta_features]).float())\n",
    "        else:\n",
    "            data = torch.tensor(image).float()\n",
    "\n",
    "        if self.mode == 'test':\n",
    "            return data\n",
    "        else:\n",
    "            return data, torch.tensor(self.csv.iloc[index].target).long()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ad6f0283",
   "metadata": {
    "papermill": {
     "duration": 0.013375,
     "end_time": "2025-06-17T04:33:20.899924",
     "exception": false,
     "start_time": "2025-06-17T04:33:20.886549",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Augmentations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "0fc68594",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-17T04:33:20.927565Z",
     "iopub.status.busy": "2025-06-17T04:33:20.927331Z",
     "iopub.status.idle": "2025-06-17T04:33:20.945359Z",
     "shell.execute_reply": "2025-06-17T04:33:20.944591Z"
    },
    "papermill": {
     "duration": 0.03325,
     "end_time": "2025-06-17T04:33:20.946547",
     "exception": false,
     "start_time": "2025-06-17T04:33:20.913297",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Defining standard training and validation transforms using image_size: 384\n",
      "Standard transforms_train and transforms_val defined.\n"
     ]
    }
   ],
   "source": [
    "import albumentations as A # Use A alias if used elsewhere, or albumentations directly\n",
    "\n",
    "print(f\"Defining standard training and validation transforms using image_size: {image_size}\")\n",
    "\n",
    "transforms_train = A.Compose([\n",
    "    A.Transpose(p=0.5),\n",
    "    A.VerticalFlip(p=0.5),\n",
    "    A.HorizontalFlip(p=0.5),\n",
    "    # A.RandomBrightness(limit=0.2, p=0.75), # Older version uses this\n",
    "    # A.RandomContrast(limit=0.2, p=0.75),  # Older version uses this\n",
    "    A.RandomBrightnessContrast(limit=0.2, p=0.75), # Newer version combines these\n",
    "\n",
    "    A.OneOf([\n",
    "        A.MotionBlur(blur_limit=5),\n",
    "        A.MedianBlur(blur_limit=5),\n",
    "        A.GaussianBlur(blur_limit=5),\n",
    "        A.GaussNoise(var_limit=(5.0, 30.0)),\n",
    "    ], p=0.7),\n",
    "\n",
    "    A.OneOf([\n",
    "        A.OpticalDistortion(distort_limit=1.0),\n",
    "        A.GridDistortion(num_steps=5, distort_limit=1.),\n",
    "        A.ElasticTransform(alpha=3),\n",
    "    ], p=0.7),\n",
    "\n",
    "    A.CLAHE(clip_limit=4.0, p=0.7),\n",
    "    A.HueSaturationValue(hue_shift_limit=10, sat_shift_limit=20, val_shift_limit=10, p=0.5),\n",
    "    A.ShiftScaleRotate(shift_limit=0.1, scale_limit=0.1, rotate_limit=15, border_mode=0, p=0.85),\n",
    "    A.Resize(image_size, image_size), # Ensure image_size is defined before this cell\n",
    "    # A.Cutout(max_h_size=int(image_size * 0.375), max_w_size=int(image_size * 0.375), num_holes=1, p=0.7), # Older Cutout\n",
    "    A.CoarseDropout(max_holes=1, max_height=int(image_size * 0.375), max_width=int(image_size * 0.375),\n",
    "                    min_holes=1, min_height=int(image_size * 0.1), min_width=int(image_size * 0.1), # Define min sizes\n",
    "                    fill_value=0, p=0.7), # Newer CoarseDropout is preferred replacement for Cutout\n",
    "    A.Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225)) # Standard normalization\n",
    "])\n",
    "\n",
    "transforms_val = A.Compose([\n",
    "    A.Resize(image_size, image_size),\n",
    "    A.Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))\n",
    "])\n",
    "\n",
    "print(\"Standard transforms_train and transforms_val defined.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "a2da7370",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-17T04:33:20.974417Z",
     "iopub.status.busy": "2025-06-17T04:33:20.974206Z",
     "iopub.status.idle": "2025-06-17T04:33:20.978309Z",
     "shell.execute_reply": "2025-06-17T04:33:20.977662Z"
    },
    "papermill": {
     "duration": 0.019325,
     "end_time": "2025-06-17T04:33:20.979443",
     "exception": false,
     "start_time": "2025-06-17T04:33:20.960118",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Minimal transform for original image (just resize and normalize)\n",
    "transforms_original = A.Compose([\n",
    "    A.Resize(image_size, image_size),  # Match augmented image size\n",
    "    A.Normalize()\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "15bfd1c7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-17T04:33:21.007552Z",
     "iopub.status.busy": "2025-06-17T04:33:21.007321Z",
     "iopub.status.idle": "2025-06-17T04:33:22.003110Z",
     "shell.execute_reply": "2025-06-17T04:33:22.002245Z"
    },
    "papermill": {
     "duration": 1.025732,
     "end_time": "2025-06-17T04:33:22.018721",
     "exception": false,
     "start_time": "2025-06-17T04:33:20.992989",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loading image: ../input/jpeg-isic2019-384x384/train/ISIC_0025819.jpg\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1800x700 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Pastikan df_train sudah ada dan memiliki kolom 'filepath'\n",
    "# Contoh load jika belum ada (SESUAIKAN PATH)\n",
    "if 'df_train' not in locals():\n",
    "     print(\"Warning: 'df_train' not found. Attempting to load example data structure.\")\n",
    "     # Ganti path ini sesuai lokasi data Anda jika menjalankan di luar Kaggle\n",
    "     data_dir_example = '../input/jpeg-melanoma-384x384' # Ganti jika perlu\n",
    "     train_csv_path = os.path.join(data_dir_example, 'train.csv')\n",
    "     if os.path.exists(train_csv_path):\n",
    "         df_train = pd.read_csv(train_csv_path)\n",
    "         # Buat kolom filepath jika belum ada\n",
    "         if 'filepath' not in df_train.columns:\n",
    "              image_folder = os.path.join(data_dir_example, 'train')\n",
    "              df_train['filepath'] = df_train['image_name'].apply(lambda x: os.path.join(image_folder, f'{x}.jpg'))\n",
    "         df_train = df_train.dropna(subset=['filepath']).reset_index(drop=True) # Hapus baris jika path tidak valid\n",
    "         print(f\"Loaded df_train with {len(df_train)} samples.\")\n",
    "     else:\n",
    "         print(f\"Error: Train CSV not found at {train_csv_path}. Cannot proceed with visualization.\")\n",
    "         df_train = pd.DataFrame() # Buat dataframe kosong\n",
    "\n",
    "import cv2\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import albumentations as A\n",
    "import random\n",
    "import os\n",
    "import pandas as pd\n",
    "import sys\n",
    "\n",
    "# --- Konfigurasi & Prasyarat (Sama seperti sebelumnya) ---\n",
    "# ... (pastikan image_size, transforms_train, df_train didefinisikan) ...\n",
    "\n",
    "# --- Fungsi Denormalisasi (Sama seperti sebelumnya) ---\n",
    "def denormalize(img_array, mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225)):\n",
    "    \"\"\"Reverses the normalization applied by A.Normalize for visualization.\"\"\"\n",
    "    std_array = np.array(std).reshape(1, 1, 3)\n",
    "    mean_array = np.array(mean).reshape(1, 1, 3)\n",
    "    std_array[std_array == 0] = 1e-6 \n",
    "    img_denorm = (img_array * std_array) + mean_array\n",
    "    img_denorm = np.clip(img_denorm, 0, 1)\n",
    "    return img_denorm\n",
    "\n",
    "# --- Visualisasi ---\n",
    "NUM_AUG_EXAMPLES = 2 # Anda bisa tetap 4 atau sesuaikan\n",
    "FIG_WIDTH_PER_PLOT = 6 # Lebar per subplot\n",
    "FIG_HEIGHT = 7         # Tinggi figure keseluruhan (lebih tinggi)\n",
    "\n",
    "if 'df_train' in locals() and not df_train.empty:\n",
    "    try:\n",
    "        sample_row = df_train.sample(1).iloc[0]\n",
    "        image_path = sample_row['filepath']\n",
    "        image_name = sample_row.get('image_name', os.path.basename(image_path))\n",
    "\n",
    "        print(f\"Loading image: {image_path}\")\n",
    "        original_img_bgr = cv2.imread(image_path)\n",
    "\n",
    "        if original_img_bgr is None:\n",
    "            print(f\"Error: Could not read image at {image_path}\", file=sys.stderr)\n",
    "        else:\n",
    "            original_img_rgb = cv2.cvtColor(original_img_bgr, cv2.COLOR_BGR2RGB)\n",
    "            original_img_resized = cv2.resize(original_img_rgb, (image_size, image_size))\n",
    "            original_img_display = original_img_resized / 255.0\n",
    "\n",
    "            # Buat figure dengan ukuran yang disesuaikan\n",
    "            fig, axes = plt.subplots(1, NUM_AUG_EXAMPLES + 1,\n",
    "                                     figsize=(FIG_WIDTH_PER_PLOT * (NUM_AUG_EXAMPLES + 1), FIG_HEIGHT))\n",
    "            plt.suptitle(f\"Augmentation Examples for: {image_name}\", fontsize=18, y=0.98) # Sesuaikan posisi Y\n",
    "\n",
    "            # Tampilkan gambar asli\n",
    "            axes[0].imshow(original_img_display)\n",
    "            axes[0].set_title(\"Original (Resized)\", fontsize=12)\n",
    "            axes[0].axis('off')\n",
    "\n",
    "            # Terapkan augmentasi dan tampilkan\n",
    "            for i in range(NUM_AUG_EXAMPLES):\n",
    "                augmented_data = transforms_train(image=original_img_rgb)\n",
    "                augmented_img_normalized = augmented_data['image']\n",
    "                augmented_img_display = denormalize(augmented_img_normalized)\n",
    "\n",
    "                axes[i+1].imshow(augmented_img_display)\n",
    "\n",
    "                # Generate caption (sama seperti sebelumnya)\n",
    "                potential_transforms = []\n",
    "                if random.random() < 0.5: potential_transforms.append(\"Flip H\")\n",
    "                if random.random() < 0.5: potential_transforms.append(\"Flip V\")\n",
    "                if random.random() < 0.5: potential_transforms.append(\"Transpose\")\n",
    "                if random.random() < 0.85: potential_transforms.append(\"Shift/Scale/Rotate\")\n",
    "                if random.random() < 0.75: potential_transforms.append(\"Bright/Contrast\") # Persingkat\n",
    "                if random.random() < 0.5: potential_transforms.append(\"HSV\")\n",
    "                if random.random() < 0.7: potential_transforms.append(\"CLAHE\")\n",
    "                if random.random() < 0.7: potential_transforms.append(\"Blur/Noise\")\n",
    "                if random.random() < 0.7: potential_transforms.append(\"Distortion\")\n",
    "                if random.random() < 0.7: potential_transforms.append(\"Dropout\")\n",
    "\n",
    "                caption = f\"Augmented {i+1}\"\n",
    "                if potential_transforms:\n",
    "                   # Batasi jumlah item di caption jika terlalu panjang\n",
    "                   caption += \"\\n(\" + \", \".join(potential_transforms[:4]) + (\"...\" if len(potential_transforms)>4 else \"\") + \")\"\n",
    "                else:\n",
    "                   caption += \"\\n(No major transforms)\"\n",
    "\n",
    "                axes[i+1].set_title(caption, fontsize=10) # Ukuran font judul subplot\n",
    "                axes[i+1].axis('off')\n",
    "\n",
    "            # Gunakan subplots_adjust untuk spasi\n",
    "            # Sesuaikan nilai wspace (horizontal), hspace (vertical), top, bottom, left, right\n",
    "            plt.subplots_adjust(wspace=0.1, hspace=0.1, top=0.85, bottom=0.05, left=0.05, right=0.95)\n",
    "\n",
    "            plt.show()\n",
    "\n",
    "    except FileNotFoundError:\n",
    "        print(f\"Error: File not found at {image_path}. Ensure dataset path is correct.\", file=sys.stderr)\n",
    "    except Exception as e:\n",
    "        print(f\"An error occurred during visualization: {e}\", file=sys.stderr)\n",
    "        import traceback\n",
    "        traceback.print_exc()\n",
    "else:\n",
    "    print(\"Skipping visualization because df_train is not loaded or is empty.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "11483d16",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-17T04:33:22.085024Z",
     "iopub.status.busy": "2025-06-17T04:33:22.084778Z",
     "iopub.status.idle": "2025-06-17T04:33:22.088003Z",
     "shell.execute_reply": "2025-06-17T04:33:22.087380Z"
    },
    "jupyter": {
     "source_hidden": true
    },
    "papermill": {
     "duration": 0.037242,
     "end_time": "2025-06-17T04:33:22.089170",
     "exception": false,
     "start_time": "2025-06-17T04:33:22.051928",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# # Create datasets\n",
    "# df_show = df_train.sample(min(1000, len(df_train)))  # Sample dataset\n",
    "# dataset_original = SIIMISICDataset(df_show, 'train', 'train', transform=transforms_original)  # Original images\n",
    "# dataset_augmented = SIIMISICDataset(df_show, 'train', 'train', transform=transforms_train)   # Augmented images\n",
    "\n",
    "# # Reverse mapping for labels (assume diagnosis2idx is defined earlier)\n",
    "# idx2diagnosis = {v: k for k, v in diagnosis2idx.items()}\n",
    "\n",
    "# # Display original and augmented images side by side\n",
    "# from pylab import rcParams\n",
    "# rcParams['figure.figsize'] = 20, 10\n",
    "\n",
    "# for i in range(2):  # Show 2 rows\n",
    "#     f, axarr = plt.subplots(2, 5)  # 2 rows: original (top), augmented (bottom); 5 columns\n",
    "#     for p in range(5):\n",
    "#         idx = np.random.randint(0, len(dataset_original))  # Same index for both datasets\n",
    "        \n",
    "#         # Original image\n",
    "#         img_original, label_tensor = dataset_original[idx]\n",
    "#         if use_meta:\n",
    "#             img_original = img_original[0]  # Extract image tensor if metadata is used\n",
    "#         label_idx = label_tensor.item()\n",
    "#         label_name = idx2diagnosis[label_idx]\n",
    "        \n",
    "#         # Augmented image\n",
    "#         img_augmented, _ = dataset_augmented[idx]  # Same index, ignore label since it’s identical\n",
    "#         if use_meta:\n",
    "#             img_augmented = img_augmented[0]\n",
    "\n",
    "#         # Plot original (top row)\n",
    "#         axarr[0, p].imshow(img_original.transpose(0, 1).transpose(1, 2).squeeze())\n",
    "#         axarr[0, p].set_title(f\"Original: {label_name}\")\n",
    "#         axarr[0, p].axis('off')\n",
    "\n",
    "#         # Plot augmented (bottom row)\n",
    "#         axarr[1, p].imshow(img_augmented.transpose(0, 1).transpose(1, 2).squeeze())\n",
    "#         axarr[1, p].set_title(f\"Augmented: {label_name}\")\n",
    "#         axarr[1, p].axis('off')\n",
    "\n",
    "#     plt.tight_layout()\n",
    "#     plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f027ca04",
   "metadata": {
    "papermill": {
     "duration": 0.02987,
     "end_time": "2025-06-17T04:33:22.149788",
     "exception": false,
     "start_time": "2025-06-17T04:33:22.119918",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Pretrained Model Helper"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "3d8fda46",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-17T04:33:22.212060Z",
     "iopub.status.busy": "2025-06-17T04:33:22.211843Z",
     "iopub.status.idle": "2025-06-17T04:33:22.249225Z",
     "shell.execute_reply": "2025-06-17T04:33:22.248581Z"
    },
    "papermill": {
     "duration": 0.069776,
     "end_time": "2025-06-17T04:33:22.250441",
     "exception": false,
     "start_time": "2025-06-17T04:33:22.180665",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Successfully imported required components from torchvision.\n",
      "Torchvision EfficientNet V2 classes and helpers defined (Corrected Syntax).\n"
     ]
    }
   ],
   "source": [
    "# --- Torchvision EfficientNet Implementation (Corrected Syntax) ---\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "from torch import Tensor\n",
    "from dataclasses import dataclass\n",
    "from functools import partial\n",
    "from typing import Any, Callable, Dict, List, Optional, Sequence, Union, Tuple\n",
    "import math\n",
    "import copy\n",
    "\n",
    "# --- Essential Dependencies from Torchvision ---\n",
    "# Make sure torchvision is installed (`pip install torchvision`)\n",
    "try:\n",
    "    from torchvision.ops import StochasticDepth\n",
    "    from torchvision.ops.misc import Conv2dNormActivation, SqueezeExcitation\n",
    "    from torchvision.models._api import WeightsEnum, Weights\n",
    "    from torchvision.models._utils import handle_legacy_interface, _ovewrite_named_param\n",
    "    from torch.hub import load_state_dict_from_url\n",
    "    print(\"Successfully imported required components from torchvision.\")\n",
    "except ImportError as e:\n",
    "    print(f\"ERROR: Failed to import components from torchvision: {e}\")\n",
    "    print(\"Please ensure torchvision is installed and compatible.\")\n",
    "    # Raising an error might be better than continuing with non-functional dummies\n",
    "    raise ImportError(\"Torchvision components required for EfficientNet definition are missing.\") from e\n",
    "\n",
    "# Utility function (ensure this is defined correctly)\n",
    "def _make_divisible(v: float, divisor: int, min_value: Optional[int] = None) -> int:\n",
    "    if min_value is None: min_value = divisor\n",
    "    new_v = max(min_value, int(v + divisor / 2) // divisor * divisor)\n",
    "    if new_v < 0.9 * v: new_v += divisor\n",
    "    return new_v\n",
    "\n",
    "# --- Core Configuration Classes ---\n",
    "@dataclass\n",
    "class _MBConvConfig:\n",
    "    expand_ratio: float\n",
    "    kernel: int\n",
    "    stride: int\n",
    "    input_channels: int\n",
    "    out_channels: int\n",
    "    num_layers: int\n",
    "    block: Callable[..., nn.Module]\n",
    "\n",
    "    @staticmethod\n",
    "    def adjust_channels(channels: int, width_mult: float, min_value: Optional[int]=None) -> int:\n",
    "        return _make_divisible(channels * width_mult, 8, min_value)\n",
    "\n",
    "class MBConvConfig(_MBConvConfig):\n",
    "    def __init__(self, expand_ratio: float, kernel: int, stride: int, input_channels: int,\n",
    "                 out_channels: int, num_layers: int, width_mult: float = 1.0,\n",
    "                 depth_mult: float = 1.0, block: Optional[Callable[..., nn.Module]] = None):\n",
    "        input_channels = self.adjust_channels(input_channels, width_mult)\n",
    "        out_channels = self.adjust_channels(out_channels, width_mult)\n",
    "        num_layers = self.adjust_depth(num_layers, depth_mult)\n",
    "        if block is None:\n",
    "            block = MBConv\n",
    "        super().__init__(expand_ratio, kernel, stride, input_channels, out_channels, num_layers, block)\n",
    "\n",
    "    @staticmethod\n",
    "    def adjust_depth(num_layers: int, depth_mult: float):\n",
    "        return int(math.ceil(num_layers * depth_mult))\n",
    "\n",
    "class FusedMBConvConfig(_MBConvConfig):\n",
    "    def __init__(self, expand_ratio: float, kernel: int, stride: int, input_channels: int,\n",
    "                 out_channels: int, num_layers: int, block: Optional[Callable[..., nn.Module]] = None):\n",
    "        if block is None:\n",
    "            block = FusedMBConv\n",
    "        super().__init__(expand_ratio, kernel, stride, input_channels, out_channels, num_layers, block)\n",
    "\n",
    "# --- Convolutional Block Classes ---\n",
    "class MBConv(nn.Module):\n",
    "    def __init__(self, cnf: MBConvConfig, stochastic_depth_prob: float,\n",
    "                 norm_layer: Callable[..., nn.Module], se_layer: Callable[..., nn.Module] = SqueezeExcitation):\n",
    "        super().__init__()\n",
    "        if not (1 <= cnf.stride <= 2): raise ValueError(\"illegal stride value\")\n",
    "\n",
    "        self.use_res_connect = cnf.stride == 1 and cnf.input_channels == cnf.out_channels\n",
    "        layers: List[nn.Module] = []\n",
    "        activation_layer = nn.SiLU\n",
    "\n",
    "        # Expand phase\n",
    "        expanded_channels = cnf.adjust_channels(cnf.input_channels, cnf.expand_ratio)\n",
    "        if expanded_channels != cnf.input_channels:\n",
    "            layers.append(Conv2dNormActivation(cnf.input_channels, expanded_channels, kernel_size=1,\n",
    "                                                norm_layer=norm_layer, activation_layer=activation_layer))\n",
    "        # Depthwise convolution phase\n",
    "        layers.append(Conv2dNormActivation(expanded_channels, expanded_channels, kernel_size=cnf.kernel,\n",
    "                                            stride=cnf.stride, groups=expanded_channels, norm_layer=norm_layer,\n",
    "                                            activation_layer=activation_layer))\n",
    "        # Squeeze and excitation layer\n",
    "        squeeze_channels = max(1, cnf.input_channels // 4)\n",
    "        layers.append(se_layer(expanded_channels, squeeze_channels, activation=partial(nn.SiLU, inplace=True)))\n",
    "        # Pointwise convolution phase\n",
    "        layers.append(Conv2dNormActivation(expanded_channels, cnf.out_channels, kernel_size=1,\n",
    "                                            norm_layer=norm_layer, activation_layer=None))\n",
    "\n",
    "        self.block = nn.Sequential(*layers)\n",
    "        self.stochastic_depth = StochasticDepth(stochastic_depth_prob, \"row\")\n",
    "        self.out_channels = cnf.out_channels\n",
    "\n",
    "    def forward(self, input: Tensor) -> Tensor:\n",
    "        result = self.block(input)\n",
    "        if self.use_res_connect:\n",
    "            result = self.stochastic_depth(result)\n",
    "            result += input\n",
    "        return result\n",
    "\n",
    "class FusedMBConv(nn.Module):\n",
    "    def __init__(self, cnf: FusedMBConvConfig, stochastic_depth_prob: float,\n",
    "                 norm_layer: Callable[..., nn.Module]):\n",
    "        super().__init__()\n",
    "        if not (1 <= cnf.stride <= 2): raise ValueError(\"illegal stride value\")\n",
    "\n",
    "        self.use_res_connect = cnf.stride == 1 and cnf.input_channels == cnf.out_channels\n",
    "        layers: List[nn.Module] = []\n",
    "        activation_layer = nn.SiLU\n",
    "\n",
    "        expanded_channels = cnf.adjust_channels(cnf.input_channels, cnf.expand_ratio)\n",
    "        if expanded_channels != cnf.input_channels:\n",
    "            # Fused expand\n",
    "            layers.append(Conv2dNormActivation(cnf.input_channels, expanded_channels, kernel_size=cnf.kernel,\n",
    "                                                stride=cnf.stride, norm_layer=norm_layer, activation_layer=activation_layer))\n",
    "            # Project\n",
    "            layers.append(Conv2dNormActivation(expanded_channels, cnf.out_channels, kernel_size=1,\n",
    "                                                norm_layer=norm_layer, activation_layer=None))\n",
    "        else:\n",
    "            # Single convolution\n",
    "            layers.append(Conv2dNormActivation(cnf.input_channels, cnf.out_channels, kernel_size=cnf.kernel,\n",
    "                                                stride=cnf.stride, norm_layer=norm_layer, activation_layer=activation_layer))\n",
    "\n",
    "        self.block = nn.Sequential(*layers)\n",
    "        self.stochastic_depth = StochasticDepth(stochastic_depth_prob, \"row\")\n",
    "        self.out_channels = cnf.out_channels\n",
    "\n",
    "    def forward(self, input: Tensor) -> Tensor:\n",
    "        result = self.block(input)\n",
    "        if self.use_res_connect:\n",
    "            result = self.stochastic_depth(result)\n",
    "            result += input\n",
    "        return result\n",
    "\n",
    "# --- EfficientNet Main Class (Using Torchvision Structure) ---\n",
    "class EfficientNet(nn.Module):\n",
    "    def __init__(\n",
    "        self,\n",
    "        inverted_residual_setting: Sequence[Union[MBConvConfig, FusedMBConvConfig]],\n",
    "        dropout: float,\n",
    "        stochastic_depth_prob: float = 0.2,\n",
    "        num_classes: int = 1000,\n",
    "        norm_layer: Optional[Callable[..., nn.Module]] = None,\n",
    "        last_channel: Optional[int] = None,\n",
    "    ) -> None:\n",
    "        super().__init__()\n",
    "        if not inverted_residual_setting: raise ValueError(\"Setting should not be empty\")\n",
    "        if not (isinstance(inverted_residual_setting, Sequence) and all([isinstance(s, _MBConvConfig) for s in inverted_residual_setting])):\n",
    "            raise TypeError(\"Setting should be List[_MBConvConfig]\")\n",
    "\n",
    "        norm_layer = norm_layer or nn.BatchNorm2d\n",
    "        layers: List[nn.Module] = []\n",
    "\n",
    "        # Building first layer\n",
    "        firstconv_output_channels = inverted_residual_setting[0].input_channels\n",
    "        layers.append(Conv2dNormActivation(3, firstconv_output_channels, kernel_size=3, stride=2,\n",
    "                                            norm_layer=norm_layer, activation_layer=nn.SiLU))\n",
    "\n",
    "        # Building inverted residual blocks\n",
    "        total_stage_blocks = sum(cnf.num_layers for cnf in inverted_residual_setting)\n",
    "        stage_block_id = 0\n",
    "        for cnf in inverted_residual_setting:\n",
    "            stage: List[nn.Module] = []\n",
    "            for _ in range(cnf.num_layers):\n",
    "                block_cnf = copy.copy(cnf)\n",
    "                if stage: # if not the first block in stage\n",
    "                    block_cnf.input_channels = block_cnf.out_channels\n",
    "                    block_cnf.stride = 1\n",
    "                sd_prob = stochastic_depth_prob * float(stage_block_id) / total_stage_blocks\n",
    "                stage.append(block_cnf.block(block_cnf, sd_prob, norm_layer))\n",
    "                stage_block_id += 1\n",
    "            layers.append(nn.Sequential(*stage))\n",
    "\n",
    "        # Building last several layers\n",
    "        lastconv_input_channels = inverted_residual_setting[-1].out_channels\n",
    "        lastconv_output_channels = last_channel if last_channel is not None else 4 * lastconv_input_channels\n",
    "        layers.append(Conv2dNormActivation(lastconv_input_channels, lastconv_output_channels, kernel_size=1,\n",
    "                                            norm_layer=norm_layer, activation_layer=nn.SiLU))\n",
    "\n",
    "        self.features = nn.Sequential(*layers)\n",
    "        self.avgpool = nn.AdaptiveAvgPool2d(1)\n",
    "        self.classifier = nn.Sequential(\n",
    "            nn.Dropout(p=dropout, inplace=True),\n",
    "            nn.Linear(lastconv_output_channels, num_classes),\n",
    "        )\n",
    "\n",
    "        # Weight initialization (standard torchvision practice)\n",
    "        for m in self.modules():\n",
    "            if isinstance(m, nn.Conv2d):\n",
    "                nn.init.kaiming_normal_(m.weight, mode=\"fan_out\", nonlinearity=\"relu\")\n",
    "                if m.bias is not None: nn.init.zeros_(m.bias)\n",
    "            elif isinstance(m, (nn.BatchNorm2d, nn.GroupNorm)):\n",
    "                nn.init.ones_(m.weight); nn.init.zeros_(m.bias)\n",
    "            elif isinstance(m, nn.Linear):\n",
    "                init_range = 1.0 / math.sqrt(m.out_features)\n",
    "                nn.init.uniform_(m.weight, -init_range, init_range)\n",
    "                nn.init.zeros_(m.bias)\n",
    "\n",
    "    def forward(self, x: Tensor) -> Tensor:\n",
    "        x = self.features(x)\n",
    "        x = self.avgpool(x)\n",
    "        x = torch.flatten(x, 1)\n",
    "        x = self.classifier(x)\n",
    "        return x\n",
    "\n",
    "# --- Configuration Function ---\n",
    "def _efficientnet_conf(arch: str, **kwargs: Any) -> Tuple[Sequence[Union[MBConvConfig, FusedMBConvConfig]], Optional[int]]:\n",
    "    # Defines layer configurations for each variant\n",
    "    if arch.startswith(\"efficientnet_b\"):\n",
    "        b_conf=partial(MBConvConfig,width_mult=kwargs.pop(\"width_mult\"),depth_mult=kwargs.pop(\"depth_mult\")); setting=[b_conf(1,3,1,32,16,1), b_conf(6,3,2,16,24,2), b_conf(6,5,2,24,40,2), b_conf(6,3,2,40,80,3), b_conf(6,5,1,80,112,3), b_conf(6,5,2,112,192,4), b_conf(6,3,1,192,320,1)]; last_ch=None\n",
    "    elif arch == \"efficientnet_v2_s\": setting=[FusedMBConvConfig(1,3,1,24,24,2), FusedMBConvConfig(4,3,2,24,48,4), FusedMBConvConfig(4,3,2,48,64,4), MBConvConfig(4,3,2,64,128,6), MBConvConfig(6,3,1,128,160,9), MBConvConfig(6,3,2,160,256,15)]; last_ch=1280\n",
    "    elif arch == \"efficientnet_v2_m\": setting=[FusedMBConvConfig(1,3,1,24,24,3), FusedMBConvConfig(4,3,2,24,48,5), FusedMBConvConfig(4,3,2,48,80,5), MBConvConfig(4,3,2,80,160,7), MBConvConfig(6,3,1,160,176,14), MBConvConfig(6,3,2,176,304,18), MBConvConfig(6,3,1,304,512,5)]; last_ch=1280\n",
    "    elif arch == \"efficientnet_v2_l\": setting=[FusedMBConvConfig(1,3,1,32,32,4), FusedMBConvConfig(4,3,2,32,64,7), FusedMBConvConfig(4,3,2,64,96,7), MBConvConfig(4,3,2,96,192,10), MBConvConfig(6,3,1,192,224,19), MBConvConfig(6,3,2,224,384,25), MBConvConfig(6,3,1,384,640,7)]; last_ch=1280\n",
    "    else: raise ValueError(f\"Unsupported model arch: {arch}\")\n",
    "    return setting, last_ch\n",
    "\n",
    "# --- Define Weights Classes (Simplified - URLs assume availability) ---\n",
    "_COMMON_META_V2 = {\"categories\": [\"placeholder\"], \"min_size\": (33, 33)} # Need actual categories\n",
    "class EfficientNet_V2_S_Weights(WeightsEnum):\n",
    "    IMAGENET1K_V1=Weights(url=\"https://download.pytorch.org/models/efficientnet_v2_s-dd5fe13b.pth\", transforms=None, meta={**_COMMON_META_V2, \"num_params\": 21458488}) # Transforms defined elsewhere\n",
    "    DEFAULT = IMAGENET1K_V1\n",
    "class EfficientNet_V2_M_Weights(WeightsEnum):\n",
    "    IMAGENET1K_V1=Weights(url=\"https://download.pytorch.org/models/efficientnet_v2_m-dc08266a.pth\", transforms=None, meta={**_COMMON_META_V2, \"num_params\": 54139356})\n",
    "    DEFAULT = IMAGENET1K_V1\n",
    "class EfficientNet_V2_L_Weights(WeightsEnum):\n",
    "    IMAGENET1K_V1=Weights(url=\"https://download.pytorch.org/models/efficientnet_v2_l-59c71312.pth\", transforms=None, meta={**_COMMON_META_V2, \"num_params\": 118515272})\n",
    "    DEFAULT = IMAGENET1K_V1\n",
    "# Model builder function (CORRECTED for num_classes handling)\n",
    "def _efficientnet_model_builder(\n",
    "    arch: str,\n",
    "    inverted_residual_setting: Sequence[Union[MBConvConfig, FusedMBConvConfig]],\n",
    "    dropout: float,\n",
    "    last_channel: Optional[int],\n",
    "    weights: Optional[WeightsEnum], # Pass weights object directly\n",
    "    progress: bool,\n",
    "    **kwargs: Any,\n",
    ") -> EfficientNet:\n",
    "\n",
    "    # --- CORRECTED num_classes Logic ---\n",
    "    # If loading weights, ALWAYS build the initial structure with the original\n",
    "    # number of classes the weights were trained on (1000 for ImageNet1k).\n",
    "    # Ignore kwargs['num_classes'] at this stage if weights are provided.\n",
    "    if weights is not None:\n",
    "        num_classes_for_build = 1000 # Hardcode for standard ImageNet1k weights\n",
    "        print(f\"Building initial structure for {arch} with {num_classes_for_build} classes to load weights.\")\n",
    "    # If not loading weights, use kwargs['num_classes'] if provided, else default.\n",
    "    elif \"num_classes\" in kwargs:\n",
    "         num_classes_for_build = kwargs[\"num_classes\"]\n",
    "         print(f\"Building structure for {arch} with {num_classes_for_build} classes (random init).\")\n",
    "    else:\n",
    "         num_classes_for_build = 1000 # Default if no weights and no override\n",
    "         print(f\"Building structure for {arch} with default {num_classes_for_build} classes (random init).\")\n",
    "    # --- END CORRECTION ---\n",
    "\n",
    "    # Clean kwargs before passing to EfficientNet constructor to avoid conflicts\n",
    "    build_kwargs = kwargs.copy()\n",
    "    if \"num_classes\" in build_kwargs: # Remove num_classes if it exists in kwargs\n",
    "        del build_kwargs[\"num_classes\"]\n",
    "\n",
    "    # Build model structure\n",
    "    model = EfficientNet(\n",
    "        inverted_residual_setting,\n",
    "        dropout,\n",
    "        last_channel=last_channel,\n",
    "        num_classes=num_classes_for_build, # Use the correctly determined num_classes\n",
    "        **build_kwargs # Pass other kwargs like norm_layer\n",
    "        )\n",
    "\n",
    "    if weights is not None:\n",
    "        # Load state dict using the weights object\n",
    "        print(f\"Loading state_dict from weights for {arch}...\")\n",
    "        try:\n",
    "             model.load_state_dict(weights.get_state_dict(progress=progress, check_hash=True))\n",
    "             print(\"State dict loaded successfully.\")\n",
    "        except Exception as e:\n",
    "             print(f\"ERROR loading state_dict: {e}\")\n",
    "             print(\"Continuing without pretrained weights for this backbone.\")\n",
    "             # Optionally: re-initialize model randomly? Or just proceed?\n",
    "\n",
    "    return model\n",
    "\n",
    "# --- Keep the helper functions efficientnet_v2_s/m/l as they were in the previous block ---\n",
    "# They correctly pass the weights object to the corrected builder.\n",
    "\n",
    "@handle_legacy_interface(weights=(\"pretrained\", EfficientNet_V2_S_Weights.IMAGENET1K_V1))\n",
    "def efficientnet_v2_s(*, weights: Optional[EfficientNet_V2_S_Weights] = None, progress: bool = True, **kwargs: Any) -> EfficientNet:\n",
    "    weights = EfficientNet_V2_S_Weights.verify(weights)\n",
    "    inv_res_setting, last_ch = _efficientnet_conf(\"efficientnet_v2_s\")\n",
    "    model = _efficientnet_model_builder(\"efficientnet_v2_s\", inv_res_setting, kwargs.pop(\"dropout\", 0.2), last_ch, weights, progress, norm_layer=partial(nn.BatchNorm2d, eps=1e-03), **kwargs)\n",
    "    return model\n",
    "\n",
    "@handle_legacy_interface(weights=(\"pretrained\", EfficientNet_V2_M_Weights.IMAGENET1K_V1))\n",
    "def efficientnet_v2_m(*, weights: Optional[EfficientNet_V2_M_Weights] = None, progress: bool = True, **kwargs: Any) -> EfficientNet:\n",
    "    weights = EfficientNet_V2_M_Weights.verify(weights)\n",
    "    inv_res_setting, last_ch = _efficientnet_conf(\"efficientnet_v2_m\")\n",
    "    model = _efficientnet_model_builder(\"efficientnet_v2_m\", inv_res_setting, kwargs.pop(\"dropout\", 0.3), last_ch, weights, progress, norm_layer=partial(nn.BatchNorm2d, eps=1e-03), **kwargs)\n",
    "    return model\n",
    "\n",
    "@handle_legacy_interface(weights=(\"pretrained\", EfficientNet_V2_L_Weights.IMAGENET1K_V1))\n",
    "def efficientnet_v2_l(*, weights: Optional[EfficientNet_V2_L_Weights] = None, progress: bool = True, **kwargs: Any) -> EfficientNet:\n",
    "    weights = EfficientNet_V2_L_Weights.verify(weights)\n",
    "    inv_res_setting, last_ch = _efficientnet_conf(\"efficientnet_v2_l\")\n",
    "    model = _efficientnet_model_builder(\"efficientnet_v2_l\", inv_res_setting, kwargs.pop(\"dropout\", 0.4), last_ch, weights, progress, norm_layer=partial(nn.BatchNorm2d, eps=1e-03), **kwargs)\n",
    "    return model\n",
    "\n",
    "\n",
    "print(\"Torchvision EfficientNet V2 classes and helpers defined (Corrected Syntax).\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9474eeb4",
   "metadata": {
    "papermill": {
     "duration": 0.040478,
     "end_time": "2025-06-17T04:33:22.321947",
     "exception": false,
     "start_time": "2025-06-17T04:33:22.281469",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Model Architecture"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "18c8c4e9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-17T04:33:22.402130Z",
     "iopub.status.busy": "2025-06-17T04:33:22.401820Z",
     "iopub.status.idle": "2025-06-17T04:33:22.406936Z",
     "shell.execute_reply": "2025-06-17T04:33:22.406085Z"
    },
    "papermill": {
     "duration": 0.043463,
     "end_time": "2025-06-17T04:33:22.408234",
     "exception": false,
     "start_time": "2025-06-17T04:33:22.364771",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class MetadataProcessor(nn.Module): \n",
    "    def __init__(self, n_meta_features, output_dim=128, hidden_factor=2, dropout_p=0.3): \n",
    "        super().__init__()\n",
    "        hidden_dim = max(output_dim * hidden_factor, n_meta_features // 2)\n",
    "        self.mlp = nn.Sequential(\n",
    "            nn.Linear(n_meta_features, hidden_dim),\n",
    "            nn.BatchNorm1d(hidden_dim),\n",
    "            nn.SiLU(),\n",
    "            nn.Dropout(p=dropout_p),\n",
    "            nn.Linear(hidden_dim, output_dim), \n",
    "            nn.BatchNorm1d(output_dim),\n",
    "            nn.SiLU()\n",
    "        )\n",
    "        print(f\"Initialized MetadataProcessor (MLP): Input={n_meta_features} -> Hidden={hidden_dim} -> Output={output_dim}\")\n",
    "\n",
    "    def forward(self, meta):\n",
    "        return self.mlp(meta)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "71ce39ca",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-17T04:33:22.475385Z",
     "iopub.status.busy": "2025-06-17T04:33:22.475079Z",
     "iopub.status.idle": "2025-06-17T04:33:22.485161Z",
     "shell.execute_reply": "2025-06-17T04:33:22.484255Z"
    },
    "papermill": {
     "duration": 0.047348,
     "end_time": "2025-06-17T04:33:22.486416",
     "exception": false,
     "start_time": "2025-06-17T04:33:22.439068",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class EffNetV2Model(nn.Module):\n",
    "    def __init__(self, backbone_name, out_dim, n_meta_features=0, pretrained=True, regularization_factor=1.0):\n",
    "        super().__init__()\n",
    "        self.n_meta_features = n_meta_features\n",
    "        self.backbone_name = backbone_name\n",
    "        self.out_dim = out_dim\n",
    "        self.regularization_factor = regularization_factor\n",
    "        # --- Load CNN Backbone ---\n",
    "        print(f\"Instantiating EffNetV2Model ({backbone_name})...\")\n",
    "        model_fn_map={'efficientnet_v2_s':efficientnet_v2_s, 'efficientnet_v2_m':efficientnet_v2_m, 'efficientnet_v2_l':efficientnet_v2_l}\n",
    "        if backbone_name not in model_fn_map: raise ValueError(f\"Unsupported CNN: {backbone_name}\")\n",
    "        self.cnn_backbone = model_fn_map[backbone_name](weights='DEFAULT' if pretrained else None)\n",
    "        print(f\" Loaded {backbone_name}. Pretrained={pretrained}\")\n",
    "        if isinstance(self.cnn_backbone.classifier, nn.Sequential) and isinstance(self.cnn_backbone.classifier[1], nn.Linear):\n",
    "             self.cnn_features_dim = self.cnn_backbone.classifier[1].in_features\n",
    "             self.cnn_backbone.classifier = nn.Identity()\n",
    "             print(f\" CNN features: {self.cnn_features_dim}. Classifier removed.\")\n",
    "        else: raise AttributeError(f\"Unexpected classifier structure {backbone_name}\")\n",
    "        # Define BASE initial rates\n",
    "        BASE_INITIAL_CLASSIFIER_DROPOUT = 0.40\n",
    "        self.initial_classifier_dropout = min(0.9, max(0.05, BASE_INITIAL_CLASSIFIER_DROPOUT * self.regularization_factor))\n",
    "        print(f\"  Regularization Factor: {self.regularization_factor:.4f}\")\n",
    "        print(f\"  Base Classifier Dropout: {BASE_INITIAL_CLASSIFIER_DROPOUT:.2f} -> Effective Initial: {self.initial_classifier_dropout:.4f}\")\n",
    "        self.image_dropout = nn.Dropout(0.0) \n",
    "        self.classifier_dropout = nn.Dropout(self.initial_classifier_dropout)\n",
    "        meta_pathway_dim = 0\n",
    "        self.meta_processor = None \n",
    "        if n_meta_features > 0:\n",
    "             meta_output_dim = 128\n",
    "             self.meta_processor = MetadataProcessor(n_meta_features, output_dim=meta_output_dim, dropout_p=0.3)\n",
    "             meta_pathway_dim = meta_output_dim\n",
    "             print(f\"  - Meta Pathway Enabled ({n_meta_features} -> {meta_pathway_dim}) using MetadataProcessor (MLP Internals)\")\n",
    "        else:\n",
    "             print(\"  - Meta Pathway: Disabled\")\n",
    "        # --- Final Classifier ---\n",
    "        self.myfc = nn.Linear(self.cnn_features_dim + meta_pathway_dim, out_dim)\n",
    "        self.current_epoch = 0\n",
    "\n",
    "    def set_epoch(self, epoch): \n",
    "        self.current_epoch = epoch\n",
    "        max_epoch_anneal = 25.0 \n",
    "        min_dropout_mult = 0.3 \n",
    "        decay_power = 1.5\n",
    "        progress = min(epoch / max_epoch_anneal, 1.0)\n",
    "        current_mult = 1.0 - (1.0 - min_dropout_mult) * (progress**decay_power)\n",
    "        self.classifier_dropout.p = max(0.01, self.initial_classifier_dropout * current_mult)\n",
    "    def forward(self, x, x_meta=None):\n",
    "        x_features = self.cnn_backbone(x)\n",
    "        if self.n_meta_features > 0 and self.meta_processor is not None:\n",
    "            if x_meta is None: raise ValueError(\"x_meta required\");\n",
    "            proc_meta = self.meta_processor(x_meta.to(x_features.device)) \n",
    "            combined = torch.cat((x_features, proc_meta), dim=1)\n",
    "        else:\n",
    "            combined = x_features\n",
    "\n",
    "        logits = self.classifier_dropout(combined)\n",
    "        logits = self.myfc(logits)\n",
    "        logits = torch.clamp(logits, min=-20, max=20);\n",
    "        if torch.isnan(logits).any(): logits = torch.nan_to_num(logits, 0.0)\n",
    "        return logits"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5ca46611",
   "metadata": {
    "papermill": {
     "duration": 0.033448,
     "end_time": "2025-06-17T04:33:22.550837",
     "exception": false,
     "start_time": "2025-06-17T04:33:22.517389",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Model EfficientNetV2 + Swin Transformer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "fbf12e2d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-17T04:33:22.624111Z",
     "iopub.status.busy": "2025-06-17T04:33:22.623764Z",
     "iopub.status.idle": "2025-06-17T04:33:22.646262Z",
     "shell.execute_reply": "2025-06-17T04:33:22.645497Z"
    },
    "papermill": {
     "duration": 0.065012,
     "end_time": "2025-06-17T04:33:22.647466",
     "exception": false,
     "start_time": "2025-06-17T04:33:22.582454",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class HybridSwinModel(nn.Module):\n",
    "    # REMOVED regularization_factors\n",
    "    def __init__(self, cnn_backbone_name, transformer_backbone_name, out_dim,\n",
    "                 n_meta_features=0, pretrained=True, image_size=448, regularization_factor=1.0):\n",
    "        super().__init__()\n",
    "        self.n_meta_features = n_meta_features\n",
    "        self.cnn_backbone_name = cnn_backbone_name # Can be None now\n",
    "        self.transformer_backbone_name = transformer_backbone_name\n",
    "        self.out_dim = out_dim\n",
    "        self.regularization_factor = regularization_factor\n",
    "\n",
    "        # --- Initialize feature dimensions ---\n",
    "        self.cnn_features_dim = 0\n",
    "        self.cnn_backbone = None\n",
    "\n",
    "        print(f\"Instantiating Model (CNN: {cnn_backbone_name or 'None'}, Transformer: {transformer_backbone_name})...\")\n",
    "        \n",
    "        # --- CNN Backbone (OPTIONAL) ---\n",
    "        if self.cnn_backbone_name:\n",
    "            model_fn_map={'efficientnet_v2_s':efficientnet_v2_s,'efficientnet_v2_m':efficientnet_v2_m,'efficientnet_v2_l':efficientnet_v2_l}\n",
    "            if cnn_backbone_name not in model_fn_map: raise ValueError(f\"Unsupported CNN: {cnn_backbone_name}\")\n",
    "            self.cnn_backbone = model_fn_map[cnn_backbone_name](weights='DEFAULT' if pretrained else None)\n",
    "            print(f\" Loaded {cnn_backbone_name}. Pretrained={pretrained}\")\n",
    "            if isinstance(self.cnn_backbone.classifier, nn.Sequential) and isinstance(self.cnn_backbone.classifier[1], nn.Linear):\n",
    "                self.cnn_features_dim = self.cnn_backbone.classifier[1].in_features\n",
    "                self.cnn_backbone.classifier=nn.Identity()\n",
    "                print(f\" CNN features: {self.cnn_features_dim}. Classifier removed.\")\n",
    "            else: raise AttributeError(f\"Unexpected CNN classifier structure {cnn_backbone_name}\")\n",
    "\n",
    "        # --- Transformer Backbone (MANDATORY) ---\n",
    "        try:\n",
    "            self.transformer_backbone = timm.create_model(transformer_backbone_name, pretrained=pretrained)\n",
    "            print(f\" Loaded Transformer: {transformer_backbone_name}. Pretrained={pretrained}\")\n",
    "            if hasattr(self.transformer_backbone, 'head') and hasattr(self.transformer_backbone.head, 'fc'): self.transformer_features_dim=self.transformer_backbone.head.fc.in_features; self.transformer_backbone.head.fc=nn.Identity()\n",
    "            elif hasattr(self.transformer_backbone, 'head') and isinstance(self.transformer_backbone.head, nn.Linear): self.transformer_features_dim=self.transformer_backbone.head.in_features; self.transformer_backbone.head=nn.Identity()\n",
    "            elif hasattr(self.transformer_backbone, 'fc_norm'): self.transformer_features_dim=self.transformer_backbone.fc_norm.normalized_shape[0]; self.transformer_backbone.head=nn.Identity()\n",
    "            else: self.transformer_features_dim=list(self.transformer_backbone.children())[-1].out_features; self.transformer_backbone=nn.Sequential(*list(self.transformer_backbone.children())[:-1]); print(f\"Warn: Fallback Swin features ({self.transformer_features_dim}).\")\n",
    "            print(f\" Swin features: {self.transformer_features_dim}. Classifier removed.\")\n",
    "            self.transformer_pool = nn.AdaptiveAvgPool1d(1)\n",
    "        except Exception as e: print(f\"ERROR loading Transformer {transformer_backbone_name}: {e}\"); raise\n",
    "\n",
    "        # --- Fusion and Classifier Layers ---\n",
    "        BASE_INITIAL_FUSION_DROPOUT = 0.40\n",
    "        BASE_INITIAL_CLASSIFIER_DROPOUT_HYBRID = 0.30\n",
    "        self.initial_fusion_dropout = min(0.9, max(0.05, BASE_INITIAL_FUSION_DROPOUT * self.regularization_factor))\n",
    "        self.initial_classifier_dropout = min(0.9, max(0.05, BASE_INITIAL_CLASSIFIER_DROPOUT_HYBRID * self.regularization_factor))\n",
    "        self.fusion_dropout = nn.Dropout(self.initial_fusion_dropout)\n",
    "\n",
    "        # The 'fusion_dim' is now the sum of available backbone features\n",
    "        fusion_dim = self.cnn_features_dim + self.transformer_features_dim\n",
    "        # The 'fusion_layer' now acts as a projection layer for the available features\n",
    "        self.fusion_layer = nn.Sequential(nn.Linear(fusion_dim, 512), nn.BatchNorm1d(512), nn.SiLU())\n",
    "        fusion_output_dim = 512\n",
    "        \n",
    "        # Meta features pathway (remains the same)\n",
    "        meta_pathway_dim = 0\n",
    "        self.meta_processor = None\n",
    "        if n_meta_features > 0:\n",
    "             meta_output_dim = 128\n",
    "             self.meta_processor = MetadataProcessor(n_meta_features, output_dim=meta_output_dim, dropout_p=0.3)\n",
    "             meta_pathway_dim = meta_output_dim\n",
    "             print(f\"  - Meta Pathway Enabled ({n_meta_features} -> {meta_pathway_dim})\")\n",
    "        else:\n",
    "             print(\"  - Meta Pathway: Disabled\")\n",
    "             \n",
    "        # Final classifier\n",
    "        classifier_input_dim = fusion_output_dim + meta_pathway_dim\n",
    "        self.classifier_dropout = nn.Dropout(self.initial_classifier_dropout)\n",
    "        self.classifier = nn.Linear(classifier_input_dim, out_dim)\n",
    "        self.current_epoch = 0\n",
    "\n",
    "    def set_epoch(self, epoch):\n",
    "        self.current_epoch = epoch\n",
    "        max_epoch_anneal = 25.0; min_dropout_mult = 0.3; decay_power = 1.5\n",
    "        progress = min(epoch / max_epoch_anneal, 1.0)\n",
    "        current_mult = 1.0 - (1.0 - min_dropout_mult) * (progress**decay_power)\n",
    "        self.fusion_dropout.p = max(0.01, self.initial_fusion_dropout * current_mult)\n",
    "        self.classifier_dropout.p = max(0.01, self.initial_classifier_dropout * current_mult)\n",
    "\n",
    "    def forward(self, x, x_meta=None):\n",
    "        # --- Get Transformer Features ---\n",
    "        xfmr_f = self.transformer_backbone(x)\n",
    "        if xfmr_f.dim()==3: xfmr_f_pooled=self.transformer_pool(xfmr_f.permute(0,2,1)).squeeze(-1)\n",
    "        elif xfmr_f.dim()==2: xfmr_f_pooled=xfmr_f\n",
    "        else: raise RuntimeError(f\"Unexpected Swin output shape: {xfmr_f.shape}\")\n",
    "\n",
    "        # --- Combine Image Features (if CNN exists) ---\n",
    "        if self.cnn_backbone is not None:\n",
    "            cnn_f = self.cnn_backbone(x)\n",
    "            combined_img = torch.cat((cnn_f, xfmr_f_pooled), dim=1)\n",
    "        else:\n",
    "            # If no CNN, the 'combined' features are just the transformer's\n",
    "            combined_img = xfmr_f_pooled\n",
    "\n",
    "        # --- Fusion/Projection, Meta, and Classifier ---\n",
    "        fused_img = self.fusion_layer(combined_img)\n",
    "        fused_img = self.fusion_dropout(fused_img) \n",
    "\n",
    "        if self.n_meta_features > 0 and self.meta_processor is not None:\n",
    "            if x_meta is None: raise ValueError(\"x_meta required\");\n",
    "            proc_meta = self.meta_processor(x_meta.to(fused_img.device)) \n",
    "            final_features = torch.cat((fused_img, proc_meta), dim=1)\n",
    "        else:\n",
    "            final_features = fused_img\n",
    "\n",
    "        logits = self.classifier_dropout(final_features)\n",
    "        logits = self.classifier(logits)\n",
    "        logits = torch.clamp(logits, min=-20, max=20);\n",
    "        if torch.isnan(logits).any():\n",
    "             logits = torch.nan_to_num(logits, 0.0)\n",
    "        return logits"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "22a56b7e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-17T04:33:22.767276Z",
     "iopub.status.busy": "2025-06-17T04:33:22.766796Z",
     "iopub.status.idle": "2025-06-17T04:33:22.771935Z",
     "shell.execute_reply": "2025-06-17T04:33:22.770918Z"
    },
    "papermill": {
     "duration": 0.044077,
     "end_time": "2025-06-17T04:33:22.773585",
     "exception": false,
     "start_time": "2025-06-17T04:33:22.729508",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def count_parameters(model):\n",
    "    return sum(p.numel() for p in model.parameters() if p.requires_grad)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8c6ea7a8",
   "metadata": {
    "papermill": {
     "duration": 0.031032,
     "end_time": "2025-06-17T04:33:22.838157",
     "exception": false,
     "start_time": "2025-06-17T04:33:22.807125",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Freeze Function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "d1b23070",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-17T04:33:22.901122Z",
     "iopub.status.busy": "2025-06-17T04:33:22.900858Z",
     "iopub.status.idle": "2025-06-17T04:33:22.926088Z",
     "shell.execute_reply": "2025-06-17T04:33:22.925273Z"
    },
    "papermill": {
     "duration": 0.058615,
     "end_time": "2025-06-17T04:33:22.927517",
     "exception": false,
     "start_time": "2025-06-17T04:33:22.868902",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Modified adaptive_layer_unlocking to accept single factors\n",
    "\n",
    "def get_max_enet_block_index(model): # Check if this needs update for V2 structure\n",
    "    \"\"\" Finds max block index in EffNet V1/V2 (might need adjustment based on timm naming).\"\"\"\n",
    "    model_base = model.module if isinstance(model, nn.DataParallel) else model\n",
    "    cnn_backbone = getattr(model_base, 'cnn_backbone', getattr(model_base, 'enet', None)) # Handle different names\n",
    "    if cnn_backbone is None: print(\"Warning: CNN backbone not found for block index.\"); return -1\n",
    "\n",
    "    max_block_idx = -1\n",
    "    for name, _ in cnn_backbone.named_parameters():\n",
    "        # V2 often uses structure like 'blocks.0.0...', V1 'blocks.0...'\n",
    "        parts = name.split('.')\n",
    "        if parts[0] == 'blocks' and len(parts) > 1 and parts[1].isdigit():\n",
    "            try: idx = int(parts[1]); max_block_idx = max(max_block_idx, idx)\n",
    "            except ValueError: pass\n",
    "    # print(f\"Determined max block index: {max_block_idx}\")\n",
    "    return max_block_idx\n",
    "\n",
    "\n",
    "# Modified progressive_layer_unfreezing with LLRD support\n",
    "def progressive_layer_unfreezing(\n",
    "    model, optimizer, epoch,\n",
    "    freeze_initially_until_block, # Initial freeze state (e.g., 2) - Affects intermediate unfreeze\n",
    "    # --- Use FIXED schedule points ---\n",
    "    unfreeze_start_epoch,         # Epoch when gradual unfreezing begins (e.g., 7)\n",
    "    full_unfreeze_epoch,          # Epoch when everything is unfrozen & optimizer resets (e.g., 15)\n",
    "    # ---\n",
    "    total_epochs,                 # Still needed for cosine scheduler re-init\n",
    "    base_lr=1e-3,\n",
    "    cnn_backbone_name=None,       # For info only\n",
    "    lr_adaptation_factor=1.0,     # Pass the near-baseline factor\n",
    "    # --- NEW LLRD Parameter ---\n",
    "    llrd_decay_rate=0.90 ,        # Layer-wise decay rate (e.g., 0.9, 0.85). Set >= 1.0 to disable LLRD.\n",
    "    regularization_factor=1.0\n",
    "):\n",
    "    \"\"\"\n",
    "    Progressively unfreezes CNN layers based on a FIXED schedule and reconfigures\n",
    "    the optimizer with differential learning rates (including specific LLRD for\n",
    "    torchvision EfficientNetV2 CNN backbone structure) at the full_unfreeze_epoch.\n",
    "    \"\"\"\n",
    "    model_base = model.module if isinstance(model, nn.DataParallel) else model\n",
    "    cnn_backbone = getattr(model_base, 'cnn_backbone', getattr(model_base, 'enet', None))\n",
    "\n",
    "    # --- Phase 1: Before unfreezing starts ---\n",
    "    if epoch < unfreeze_start_epoch:\n",
    "        return optimizer, False # No change needed yet\n",
    "\n",
    "    # --- Get Max Block Index (only if needed for intermediate unfreeze) ---\n",
    "    # Note: This 'get_max_enet_block_index' relies on block numbers within stages (e.g., blocks.1...)\n",
    "    # which might differ from the LLRD depth based on 'features' index. Keep them separate concepts.\n",
    "    max_block_idx_for_intermediate_unfreeze = -1\n",
    "    if cnn_backbone and epoch >= unfreeze_start_epoch and epoch < full_unfreeze_epoch:\n",
    "         max_block_idx_for_intermediate_unfreeze = get_max_enet_block_index(model) # Use original function name here\n",
    "         if max_block_idx_for_intermediate_unfreeze == -1:\n",
    "              print(f\"Warning (Epoch {epoch}): Could not determine CNN block index for intermediate gradual unfreezing.\")\n",
    "\n",
    "    # --- Phase 3: Full unfreeze and optimizer reset ---\n",
    "    if epoch == full_unfreeze_epoch:\n",
    "        print(f\"===== Epoch {epoch}: Full Model Unlock & Optimizer Reconfiguration (LLRD Rate: {llrd_decay_rate if llrd_decay_rate < 1.0 else 'Disabled'}) =====\")\n",
    "        # ... (Unlock parameters - code remains the same) ...\n",
    "        unfrozen_count = 0\n",
    "        for name, param in model_base.named_parameters():\n",
    "            if not param.requires_grad:\n",
    "                param.requires_grad = True\n",
    "                unfrozen_count += 1\n",
    "        if unfrozen_count > 0: print(f\" Unlocked {unfrozen_count} previously frozen parameters.\")\n",
    "        else: print(\" No parameters needed unlocking.\")\n",
    "\n",
    "\n",
    "        # --- Calculate Target LRs (incorporating adaptation factor) ---\n",
    "        # ... (Calculation code remains the same) ...\n",
    "        print(f\"  Applying Base LR: {base_lr:.1e}, LR Adaptation Factor: {lr_adaptation_factor:.4f}\")\n",
    "        cnn_lr_mult, xfmr_lr_mult, head_lr_mult, meta_lr_mult = 0.3, 0.5, 1.0, 1.0\n",
    "        final_base_cnn_lr = base_lr * cnn_lr_mult * lr_adaptation_factor\n",
    "        final_xfmr_lr = base_lr * xfmr_lr_mult * lr_adaptation_factor\n",
    "        final_head_lr = base_lr * head_lr_mult * lr_adaptation_factor\n",
    "        final_meta_lr = base_lr * meta_lr_mult * lr_adaptation_factor\n",
    "        # --- >>> APPLY REGULARIZATION FACTOR TO WEIGHT DECAY <<< ---\n",
    "        # Define BASE weight decays\n",
    "        BASE_WD_CNN = 0.01\n",
    "        BASE_WD_XFMR = 0.02\n",
    "        BASE_WD_HEAD = 0.05 # Includes Fusion, Meta, Classifier\n",
    "        BASE_WD_REMAINING = 0.01\n",
    "\n",
    "        # Calculate effective weight decays, ensure non-negative\n",
    "        wd_cnn_eff = max(0.0, BASE_WD_CNN * regularization_factor)\n",
    "        wd_xfmr_eff = max(0.0, BASE_WD_XFMR * regularization_factor)\n",
    "        wd_head_eff = max(0.0, BASE_WD_HEAD * regularization_factor)\n",
    "        wd_remaining_eff = max(0.0, BASE_WD_REMAINING * regularization_factor)\n",
    "\n",
    "        print(f\"  Regularization Factor applied to Weight Decay:\")\n",
    "        print(f\"   - CNN WD:       {BASE_WD_CNN:.3f} -> {wd_cnn_eff:.4f}\")\n",
    "        print(f\"   - Transformer WD: {BASE_WD_XFMR:.3f} -> {wd_xfmr_eff:.4f}\")\n",
    "        print(f\"   - Head/Meta WD:   {BASE_WD_HEAD:.3f} -> {wd_head_eff:.4f}\")\n",
    "        # --- >>> END WD MODIFICATION <<< ---\n",
    "        print(f\"  Target Max Learning Rates:\")\n",
    "        print(f\"   - CNN Backbone (Max): {final_base_cnn_lr:.3e}\")\n",
    "        if hasattr(model_base, 'transformer_backbone'): print(f\"   - Transformer Backbone: {final_xfmr_lr:.3e}\")\n",
    "        if hasattr(model_base, 'fusion_layer'): print(f\"   - Fusion Layer:       {final_head_lr:.3e}\")\n",
    "        if hasattr(model_base, 'meta_attention') or hasattr(model_base, 'meta_fc'): print(f\"   - Meta Pathway:       {final_meta_lr:.3e}\")\n",
    "        if hasattr(model_base, 'myfc') or hasattr(model_base, 'classifier'): print(f\"   - Classifier Head(s): {final_head_lr:.3e}\")\n",
    "\n",
    "\n",
    "        # --- Define Parameter Groups Robustly (WITH LLRD for EffNetV2 structure) ---\n",
    "        param_groups = []\n",
    "        all_parameter_ids = set()\n",
    "\n",
    "        # Function to safely add parameters (remains the same)\n",
    "        def add_param_group(params_to_add, lr, weight_decay, name_hint):\n",
    "            nonlocal param_groups, all_parameter_ids\n",
    "            valid_params = [p for p in params_to_add if p.requires_grad and id(p) not in all_parameter_ids]\n",
    "            if valid_params:\n",
    "                 group = {'params': valid_params, 'lr': lr, 'weight_decay': weight_decay}\n",
    "                 param_groups.append(group)\n",
    "                 all_parameter_ids.update(id(p) for p in valid_params)\n",
    "                 print(f\"    Group '{name_hint}': {len(valid_params)} params, LR={lr:.2e}, WD={weight_decay}\")\n",
    "\n",
    "        # --- LLRD Implementation Specific to Torchvision EfficientNetV2 Structure ---\n",
    "        if cnn_backbone and llrd_decay_rate < 1.0:\n",
    "            print(f\"  Applying LLRD to CNN Backbone ({cnn_backbone_name}) with decay rate: {llrd_decay_rate}\")\n",
    "            # Specifically target 'self.features' which is nn.Sequential\n",
    "            if hasattr(cnn_backbone, 'features') and isinstance(cnn_backbone.features, nn.Sequential):\n",
    "                layers = list(cnn_backbone.features.children())\n",
    "                num_layers = len(layers) # Number of direct children in features (stem, stages, final conv)\n",
    "                print(f\"  Found {num_layers} sequential items in cnn_backbone.features for LLRD.\")\n",
    "\n",
    "                # Assign decreasing LR based on index in 'features'\n",
    "                # features[0] = stem (lowest LR)\n",
    "                # features[-1] = final conv before pool (highest LR = final_base_cnn_lr)\n",
    "                for i, layer_module in enumerate(layers):\n",
    "                    # Depth increases for earlier layers in the sequence\n",
    "                    depth_from_end = num_layers - 1 - i\n",
    "                    layer_lr = final_base_cnn_lr * (llrd_decay_rate ** depth_from_end)\n",
    "                    # Name hint reflects the index within 'features'\n",
    "                    add_param_group(layer_module.parameters(), layer_lr, 0.01, f'CNN features[{i}]')\n",
    "\n",
    "                # Verify all cnn params were assigned (optional check)\n",
    "                cnn_param_ids = set(id(p) for p in cnn_backbone.parameters() if p.requires_grad)\n",
    "                assigned_cnn_ids = cnn_param_ids.intersection(all_parameter_ids)\n",
    "                if len(assigned_cnn_ids) != len(cnn_param_ids):\n",
    "                    print(f\"  Warning: Only {len(assigned_cnn_ids)} out of {len(cnn_param_ids)} trainable CNN params were assigned during LLRD.\")\n",
    "\n",
    "            else:\n",
    "                # Fallback if structure doesn't match expectation (shouldn't happen with your models)\n",
    "                print(f\"  Warning: cnn_backbone.features not found or not Sequential. Applying single LR {final_base_cnn_lr:.3e} to entire CNN.\")\n",
    "                add_param_group(cnn_backbone.parameters(), final_base_cnn_lr, 0.01, 'CNN (Single LR)')\n",
    "\n",
    "        elif cnn_backbone: # No LLRD or backbone found\n",
    "             print(f\"  Applying single LR to CNN Backbone: {final_base_cnn_lr:.3e}\")\n",
    "             add_param_group(cnn_backbone.parameters(), final_base_cnn_lr, 0.01, 'CNN (Single LR)')\n",
    "\n",
    "        # --- Add other parameter groups (Transformer, Head, Meta - remains the same) ---\n",
    "        add_param_group(list(getattr(model_base, 'transformer_backbone', nn.Module()).parameters()), final_xfmr_lr, 0.02, 'Transformer')\n",
    "        add_param_group(list(getattr(model_base, 'fusion_layer', nn.Module()).parameters()), final_head_lr, 0.05, 'Fusion')\n",
    "        # Meta pathway\n",
    "        meta_params = list(getattr(model_base, 'meta_attention', nn.Module()).parameters()) + \\\n",
    "                      list(getattr(model_base, 'meta_fc', nn.Module()).parameters())\n",
    "        if meta_params: add_param_group(meta_params, final_meta_lr, 0.05, 'Meta')\n",
    "        # Classifier heads\n",
    "        classifier_params = []\n",
    "        myfc = getattr(model_base, 'myfc', None); classifier_head = getattr(model_base, 'classifier', None)\n",
    "        if myfc and not isinstance(myfc, nn.Identity): classifier_params.extend(list(myfc.parameters()))\n",
    "        if classifier_head and not isinstance(classifier_head, nn.Identity): classifier_params.extend(list(classifier_head.parameters()))\n",
    "        if classifier_params: add_param_group(classifier_params, final_head_lr, 0.05, 'Classifier')\n",
    "\n",
    "        # --- Catch Remaining ---\n",
    "        remaining_params = [p for n, p in model_base.named_parameters() if p.requires_grad and id(p) not in all_parameter_ids]\n",
    "        if remaining_params:\n",
    "            print(f\"  Warn: Adding {len(remaining_params)} remaining trainable parameters to a default group.\")\n",
    "            add_param_group(remaining_params, final_head_lr, 0.05, 'Remaining')\n",
    "\n",
    "        # --- Create Optimizer ---\n",
    "        # ... (remains the same) ...\n",
    "        if not param_groups: raise RuntimeError(\"Optimizer reconfiguration failed: No parameter groups were created.\")\n",
    "        print(f\"  Optimizer reconfiguring with {len(param_groups)} parameter groups.\")\n",
    "        new_optimizer = optim.AdamW(param_groups, eps=1e-7)\n",
    "        print(\"===== Optimizer Reconfigured Successfully =====\")\n",
    "        return new_optimizer, True\n",
    "\n",
    "    # --- Phase 2: Intermediate Unfreezing (Only affects CNN backbone) ---\n",
    "    # This part MUST use the block index logic from `get_max_enet_block_index`,\n",
    "    # as it targets specific blocks *within* the stages, not the stages themselves.\n",
    "    elif epoch >= unfreeze_start_epoch and epoch < full_unfreeze_epoch and cnn_backbone and max_block_idx_for_intermediate_unfreeze != -1:\n",
    "         # Use the max_block_idx_for_intermediate_unfreeze calculated earlier\n",
    "        blocks_to_unfreeze_sequence = list(range(max_block_idx_for_intermediate_unfreeze, freeze_initially_until_block, -1))\n",
    "        num_stages_to_unfreeze = len(blocks_to_unfreeze_sequence)\n",
    "        if num_stages_to_unfreeze > 0:\n",
    "            unfreeze_epoch_span = full_unfreeze_epoch - unfreeze_start_epoch\n",
    "            epochs_per_stage = max(1, math.ceil(unfreeze_epoch_span / num_stages_to_unfreeze))\n",
    "            current_stage_index = (epoch - unfreeze_start_epoch) // epochs_per_stage\n",
    "\n",
    "            if current_stage_index < num_stages_to_unfreeze:\n",
    "                block_idx_to_unfreeze = blocks_to_unfreeze_sequence[current_stage_index]\n",
    "                unfrozen_in_this_epoch = False\n",
    "                # --- This loop MUST check the block number within the stage ---\n",
    "                for name, param in cnn_backbone.named_parameters():\n",
    "                    is_target_block = False\n",
    "                    parts = name.split('.')\n",
    "                    # Example check: 'features.STAGE_IDX.BLOCK_IDX...' or 'blocks.BLOCK_IDX...'\n",
    "                    # Need to adapt based on precise naming in the cnn_backbone parameters\n",
    "                    # Let's assume the naming follows the 'blocks.X.Y...' or 'features.X.Y...' pattern\n",
    "                    # where X is stage, Y is block (this might need adjustment)\n",
    "                    # *** Simplified check based on get_max_enet_block_index's assumption ***\n",
    "                    if (parts[0] == 'blocks' or parts[0] == 'features') and len(parts) > 1 and parts[1].isdigit():\n",
    "                          # This assumes the index used by get_max_enet_block_index is directly in parts[1]\n",
    "                          # This might be incorrect for the torchvision structure where parts[1] is stage index.\n",
    "                          # A more robust check would parse deeper, e.g. parts[2] for block index within a stage.\n",
    "                          # --- Using the potentially incorrect but consistent check for now ---\n",
    "                         try:\n",
    "                             current_block_idx = int(parts[1]) # <<< ASSUMPTION HERE based on get_max_enet_block_index\n",
    "                             if current_block_idx == block_idx_to_unfreeze:\n",
    "                                 is_target_block = True\n",
    "                         except ValueError: pass\n",
    "\n",
    "                    if is_target_block and not param.requires_grad:\n",
    "                        param.requires_grad = True; unfrozen_in_this_epoch = True\n",
    "\n",
    "                if unfrozen_in_this_epoch:\n",
    "                    # Use the block index determined by get_max_enet_block_index\n",
    "                    print(f\"Epoch {epoch}: Unlocking CNN block {block_idx_to_unfreeze} (based on intermediate schedule)...\")\n",
    "                    return optimizer, False\n",
    "\n",
    "    # Default: No change\n",
    "    return optimizer, False\n",
    "\n",
    "\n",
    "def partial_freeze_enet(model, freeze_until_block=2): # freeze_until_block now refers to STAGE index\n",
    "    \"\"\"\n",
    "    Partially freezes CNN backbone (Torchvision EffNetV2 structure).\n",
    "    Freezes the stem (features.0) and stages up to and including freeze_until_block.\n",
    "    Ensures other model parts (head, transformer, meta) are trainable.\n",
    "    \"\"\"\n",
    "    model_base = model.module if isinstance(model, nn.DataParallel) else model\n",
    "    cnn_backbone = getattr(model_base, 'cnn_backbone', getattr(model_base, 'enet', None))\n",
    "    if not cnn_backbone:\n",
    "        print(\"Warning (partial_freeze_enet): CNN backbone not found. Skipping freeze.\")\n",
    "        return\n",
    "\n",
    "    # Verify expected structure\n",
    "    if not (hasattr(cnn_backbone, 'features') and isinstance(cnn_backbone.features, nn.Sequential)):\n",
    "         print(f\"Warning (partial_freeze_enet): Expected cnn_backbone.features (nn.Sequential) not found in {type(cnn_backbone)}. Freeze might be incorrect.\")\n",
    "         # Attempt to proceed, but it might not work as expected\n",
    "\n",
    "    print(f\"--- Applying Partial Freeze (CNN stem & stages <= {freeze_until_block}) ---\")\n",
    "    frozen_count, trainable_count = 0, 0\n",
    "    # Freeze stem, initial blocks/stages\n",
    "    for name, param in cnn_backbone.named_parameters():\n",
    "        should_freeze = False\n",
    "        parts = name.split('.')\n",
    "\n",
    "        # --- >>> MODIFIED LOGIC <<< ---\n",
    "        # Check for typical stem names first (more specific)\n",
    "        if name.startswith('features.0.') or name.startswith('stem.') or name.startswith('conv_stem.') or name.startswith('bn1.'):\n",
    "             # print(f\"  Freezing stem layer: {name}\") # Optional Debug\n",
    "             should_freeze = True\n",
    "        # Check for early stages based on features.STAGE_INDEX.\n",
    "        elif name.startswith('features.') and len(parts) > 1 and parts[1].isdigit():\n",
    "             try:\n",
    "                 stage_idx = int(parts[1])\n",
    "                 # Freeze stages up to and including freeze_until_block\n",
    "                 # Note: Stage index parts[1] starts from 1 for actual stages after stem (features.0)\n",
    "                 if stage_idx > 0 and stage_idx <= freeze_until_block + 1: # +1 because features[1] is stage 0 effectively\n",
    "                      # print(f\"  Freezing stage {stage_idx} layer: {name}\") # Optional Debug\n",
    "                      should_freeze = True\n",
    "             except ValueError:\n",
    "                 pass # Ignore if parts[1] is not a digit\n",
    "        # --- >>> END MODIFIED LOGIC <<< ---\n",
    "\n",
    "        param.requires_grad = not should_freeze\n",
    "        if should_freeze:\n",
    "            frozen_count += param.numel()\n",
    "        else:\n",
    "            trainable_count += param.numel()\n",
    "\n",
    "    print(f\"CNN backbone partially frozen up to stage index {freeze_until_block}.\") # Clarify meaning\n",
    "    print(f\"  - CNN Frozen params: {frozen_count:,}\")\n",
    "    print(f\"  - CNN Trainable params: {trainable_count:,}\")\n",
    "\n",
    "    # Ensure other backbones (Swin) or heads are trainable initially\n",
    "    # --- This part remains correct ---\n",
    "    if hasattr(model_base, 'transformer_backbone'):\n",
    "        xfmr_trainable = 0\n",
    "        for param in model_base.transformer_backbone.parameters():\n",
    "             param.requires_grad = True; xfmr_trainable += param.numel()\n",
    "        print(f\"Transformer backbone set to trainable ({xfmr_trainable:,} params).\")\n",
    "    print(\"Ensuring head/meta/fusion parts are trainable...\")\n",
    "    ensured_trainable_count = 0\n",
    "    for part_name in ['fusion_layer', 'meta_attention', 'meta_fc', 'classifier', 'myfc']:\n",
    "         part = getattr(model_base, part_name, None)\n",
    "         if part and not isinstance(part, nn.Identity): # Check it's a real layer/module\n",
    "             part_params = 0\n",
    "             for param in part.parameters():\n",
    "                  param.requires_grad = True; part_params += param.numel()\n",
    "             if part_params > 0:\n",
    "                  print(f\"  - {part_name} set to trainable ({part_params:,} params).\")\n",
    "                  ensured_trainable_count += part_params\n",
    "\n",
    "    print(f\"Total parameters set trainable outside CNN: {ensured_trainable_count + (xfmr_trainable if hasattr(model_base, 'transformer_backbone') else 0):,}\")\n",
    "    print(\"--- Partial Freeze Setup Complete ---\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4b87e392",
   "metadata": {
    "papermill": {
     "duration": 0.031955,
     "end_time": "2025-06-17T04:33:22.998587",
     "exception": false,
     "start_time": "2025-06-17T04:33:22.966632",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Training Component"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cb2d20e9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-17T04:33:23.062966Z",
     "iopub.status.busy": "2025-06-17T04:33:23.062639Z",
     "iopub.status.idle": "2025-06-17T04:33:23.069952Z",
     "shell.execute_reply": "2025-06-17T04:33:23.069171Z"
    },
    "papermill": {
     "duration": 0.040974,
     "end_time": "2025-06-17T04:33:23.071255",
     "exception": false,
     "start_time": "2025-06-17T04:33:23.030281",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Fix Warmup Bug\n",
    "class GradualWarmupSchedulerV2(GradualWarmupScheduler):\n",
    "    def __init__(self, optimizer, multiplier, total_epoch, after_scheduler=None):\n",
    "        super(GradualWarmupSchedulerV2, self).__init__(optimizer, multiplier, total_epoch, after_scheduler)\n",
    "    def get_lr(self):\n",
    "        if self.last_epoch > self.total_epoch:\n",
    "            if self.after_scheduler:\n",
    "                if not self.finished:\n",
    "                    self.after_scheduler.base_lrs = [base_lr * self.multiplier for base_lr in self.base_lrs]\n",
    "                    self.finished = True\n",
    "                return self.after_scheduler.get_lr()\n",
    "            return [base_lr * self.multiplier for base_lr in self.base_lrs]\n",
    "        if self.multiplier == 1.0:\n",
    "            return [base_lr * (float(self.last_epoch) / self.total_epoch) for base_lr in self.base_lrs]\n",
    "        else:\n",
    "            return [base_lr * ((self.multiplier - 1.) * self.last_epoch / self.total_epoch + 1.) for base_lr in self.base_lrs]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7969765e",
   "metadata": {
    "papermill": {
     "duration": 0.031037,
     "end_time": "2025-06-17T04:33:23.133131",
     "exception": false,
     "start_time": "2025-06-17T04:33:23.102094",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Train and Valid"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "e38e143c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-17T04:33:23.197024Z",
     "iopub.status.busy": "2025-06-17T04:33:23.196774Z",
     "iopub.status.idle": "2025-06-17T04:33:23.211009Z",
     "shell.execute_reply": "2025-06-17T04:33:23.210193Z"
    },
    "papermill": {
     "duration": 0.048098,
     "end_time": "2025-06-17T04:33:23.212494",
     "exception": false,
     "start_time": "2025-06-17T04:33:23.164396",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Utility function to get resource usage\n",
    "def get_resource_usage():\n",
    "    if torch.cuda.is_available():\n",
    "        mem_alloc = torch.cuda.memory_allocated() / 1024**2  # MB\n",
    "        mem_max = torch.cuda.max_memory_allocated() / 1024**2  # MB\n",
    "        return {\"gpu_memory_allocated\": mem_alloc, \"gpu_max_memory\": mem_max}\n",
    "    else:\n",
    "        import psutil\n",
    "        cpu_usage = psutil.cpu_percent(interval=1)\n",
    "        ram_usage = psutil.virtual_memory().percent\n",
    "        return {\"cpu_usage\": cpu_usage, \"ram_usage\": ram_usage}\n",
    "        \n",
    "class TemperatureScaling:\n",
    "    def __init__(self, model, device):\n",
    "        # Store the original model passed (could be base or wrapped)\n",
    "        self.model = model\n",
    "        self.device = device\n",
    "        # Initialize log_temperature as a learnable parameter starting at 0 (exp(0) = 1)\n",
    "        self.log_temperature = nn.Parameter(torch.zeros(1).to(device))\n",
    "\n",
    "    def calibrate(self, loader, max_iter=50):\n",
    "        \"\"\" Optimizes temperature using validation data with NLL. \"\"\"\n",
    "        self.model.eval() # Set the potentially wrapped model to eval mode\n",
    "\n",
    "        # --- *** Get base model reference *** ---\n",
    "        # Use this reference for checking attributes like n_meta_features\n",
    "        base_model = self.model.module if isinstance(self.model, nn.DataParallel) else self.model\n",
    "        # ---\n",
    "\n",
    "        nll_criterion = nn.CrossEntropyLoss().to(self.device)\n",
    "        # Ensure parameter is registered correctly for optimizer\n",
    "        if not list(self.model.parameters()): # Check if model has parameters (might happen if called standalone)\n",
    "            print(\"Warning (Calibrate): Model has no parameters? Adding log_temperature manually.\")\n",
    "            params_to_optimize = [self.log_temperature]\n",
    "        else:\n",
    "            # Optimize only the temperature parameter\n",
    "            params_to_optimize = [self.log_temperature]\n",
    "            # Ensure log_temperature requires grad if model doesn't\n",
    "            if not self.log_temperature.requires_grad: self.log_temperature.requires_grad = True\n",
    "\n",
    "\n",
    "        # Check if parameters require grad before passing to optimizer\n",
    "        if not any(p.requires_grad for p in params_to_optimize):\n",
    "            print(\"Warning (Calibrate): No parameters require gradients for optimizer. Setting log_temperature.requires_grad=True.\")\n",
    "            self.log_temperature.requires_grad = True\n",
    "\n",
    "\n",
    "        optimizer = optim.LBFGS(params_to_optimize, lr=0.01, max_iter=max_iter)\n",
    "\n",
    "        all_logits = []\n",
    "        all_targets = []\n",
    "        print(\"Calibrating: Iterating through validation loader...\") # Add print\n",
    "        with torch.no_grad():\n",
    "            cal_pbar = tqdm(loader, desc=\"Calibrating T\", leave=False, total=len(loader))\n",
    "            for batch_idx, batch in enumerate(cal_pbar):\n",
    "                images, meta, target = None, None, None # Initialize batch variables\n",
    "\n",
    "                # --- *** CORRECTED Data Unpacking & Forward Call *** ---\n",
    "                # Check meta features existence using the base_model reference\n",
    "                has_meta_features_in_model = hasattr(base_model, 'n_meta_features') and base_model.n_meta_features > 0\n",
    "\n",
    "                try:\n",
    "                    # Determine expected batch structure based on model's capability\n",
    "                    if has_meta_features_in_model:\n",
    "                         # Assumes loader provides ((img, meta), tgt) if model has meta\n",
    "                         (images, meta), target = batch\n",
    "                         images, meta, target = images.to(self.device), meta.to(self.device), target.to(self.device)\n",
    "                    else:\n",
    "                         # Assumes loader provides (img, tgt) if model does NOT have meta\n",
    "                         images, target = batch\n",
    "                         images, target = images.to(self.device), target.to(self.device)\n",
    "                         meta = None # Ensure meta is None\n",
    "\n",
    "                    # Perform forward pass using the ORIGINAL model ('self.model')\n",
    "                    # Pass meta only if the global use_meta flag is True AND meta was successfully unpacked\n",
    "                    # Note: We rely on the global 'use_meta' flag here, which should align with has_meta_features_in_model\n",
    "                    if use_meta and meta is not None:\n",
    "                         logits = self.model(images, x_meta=meta)\n",
    "                    else:\n",
    "                         logits = self.model(images)\n",
    "\n",
    "                    all_logits.append(logits)\n",
    "                    all_targets.append(target)\n",
    "\n",
    "                except ValueError as ve:\n",
    "                    # Handle potential unpacking errors if batch structure is unexpected\n",
    "                    print(f\"Warning (Calibrate Batch {batch_idx}): ValueError unpacking batch - {ve}. Trying to recover.\")\n",
    "                    if isinstance(batch, (list, tuple)) and len(batch) == 2:\n",
    "                        try: # Assume (img, tgt) structure\n",
    "                            images, target = batch\n",
    "                            images, target = images.to(self.device), target.to(self.device)\n",
    "                            meta = None\n",
    "                            logits = self.model(images) # Call without meta\n",
    "                            all_logits.append(logits)\n",
    "                            all_targets.append(target)\n",
    "                            print(\" Recovered assuming (img, tgt) format.\")\n",
    "                        except Exception as e_rec:\n",
    "                            print(f\" Recovery failed: {e_rec}. Skipping batch.\")\n",
    "                            continue # Skip this batch\n",
    "                    else:\n",
    "                        print(\" Cannot determine batch structure. Skipping batch.\")\n",
    "                        continue # Skip this batch\n",
    "                except Exception as e:\n",
    "                    print(f\"Error processing batch {batch_idx} during calibration: {e}\")\n",
    "                    traceback.print_exc()\n",
    "                    # Decide whether to skip or raise\n",
    "                    continue # Skip batch on other errors for now\n",
    "                # --- *** END CORRECTION *** ---\n",
    "\n",
    "        if not all_logits:\n",
    "            print(\"Warning: No logits collected during calibration. Returning default temperature.\")\n",
    "            return 1.0\n",
    "\n",
    "        logits = torch.cat(all_logits)\n",
    "        targets = torch.cat(all_targets)\n",
    "        targets = targets.to(self.device) # Ensure targets are on device for loss\n",
    "\n",
    "        def nll_closure():\n",
    "            optimizer.zero_grad()\n",
    "            temperature = torch.exp(self.log_temperature).clamp(min=0.1, max=10.0)\n",
    "            scaled_logits = logits / temperature\n",
    "            loss = nll_criterion(scaled_logits, targets)\n",
    "            if torch.isnan(loss) or torch.isinf(loss):\n",
    "                print(\"Warning: NaN/Inf loss in NLL closure. Returning high value.\")\n",
    "                return torch.tensor(1e6, device=self.device, requires_grad=True) # Return high loss\n",
    "            loss.backward()\n",
    "            return loss\n",
    "\n",
    "        optimal_temperature = 1.0 # Default\n",
    "        try:\n",
    "            print(\"Running LBFGS optimizer for temperature...\")\n",
    "            optimizer.step(nll_closure)\n",
    "            optimal_temperature = torch.exp(self.log_temperature).item()\n",
    "            print(f\"Optimal temperature found: {optimal_temperature:.4f}\")\n",
    "        except Exception as opt_e:\n",
    "            print(f\"Warning: Temperature optimization failed: {opt_e}\")\n",
    "            optimal_temperature = 1.0\n",
    "\n",
    "        # Add final clamp/check for safety\n",
    "        optimal_temperature = max(0.1, min(optimal_temperature, 10.0))\n",
    "        if np.isnan(optimal_temperature): optimal_temperature = 1.0\n",
    "\n",
    "        return optimal_temperature\n",
    "\n",
    "    # --- forward method remains the same ---\n",
    "    def forward(self, logits):\n",
    "        temperature = torch.exp(self.log_temperature).item()\n",
    "        temperature = max(0.1, min(temperature, 10.0)) # Clamp temperature\n",
    "        return torch.softmax(logits / temperature, dim=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b0ee5518",
   "metadata": {
    "papermill": {
     "duration": 0.030387,
     "end_time": "2025-06-17T04:33:23.281558",
     "exception": false,
     "start_time": "2025-06-17T04:33:23.251171",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Early Stopping Mechanism"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "2cfd664b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-17T04:33:23.345310Z",
     "iopub.status.busy": "2025-06-17T04:33:23.345034Z",
     "iopub.status.idle": "2025-06-17T04:33:23.358507Z",
     "shell.execute_reply": "2025-06-17T04:33:23.357743Z"
    },
    "papermill": {
     "duration": 0.047515,
     "end_time": "2025-06-17T04:33:23.359783",
     "exception": false,
     "start_time": "2025-06-17T04:33:23.312268",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# --- REVISED EarlyStopping Class ---\n",
    "class EarlyStopping:\n",
    "    def __init__(\n",
    "        self,\n",
    "        patience: int = 10,\n",
    "        mode: str = 'max',\n",
    "        delta: float = 0.005,\n",
    "        relative_delta: bool = True,\n",
    "        warm_up: int = 9,\n",
    "        verbose: bool = True,\n",
    "        checkpoint_path: str = 'best_model.pth',\n",
    "        score_weights: Optional[Dict[str, float]] = None\n",
    "    ):\n",
    "        if mode not in ['min', 'max']:\n",
    "            raise ValueError(\"mode must be 'min' or 'max'\")\n",
    "        self.patience = patience\n",
    "        self.mode = mode\n",
    "        self.delta = delta\n",
    "        self.relative_delta = relative_delta\n",
    "        self.warm_up = warm_up\n",
    "        self.verbose = verbose\n",
    "        self.checkpoint_path = checkpoint_path\n",
    "        self.counters: Dict[str, int] = {}\n",
    "        self.best_scores: Dict[str, float] = {}\n",
    "        self.best_epoch: Dict[str, int] = {}\n",
    "        self.early_stop = False\n",
    "        self._is_first = True\n",
    "        self.score_weights = score_weights or {\n",
    "            'binary_auc': 0.5, 'binary_recall': 0.2,\n",
    "            'multiclass_auc': 0.2, 'val_loss': 0.1 # Example weights\n",
    "        }\n",
    "        # Validate and normalize score_weights\n",
    "        if self.score_weights:\n",
    "            total_weight = sum(v for v in self.score_weights.values() if isinstance(v, (int, float)))\n",
    "            if total_weight <= 0:\n",
    "                raise ValueError(\"Total weight must be positive.\")\n",
    "            # Normalize\n",
    "            self.score_weights = {k: v / total_weight for k, v in self.score_weights.items()}\n",
    "\n",
    "    def reset(self):\n",
    "        self.counters = {}; self.best_scores = {}; self.best_epoch = {}\n",
    "        self.early_stop = False; self._is_first = True\n",
    "\n",
    "    def __call__(\n",
    "        self,\n",
    "        metrics: Union[Dict[str, float], float],\n",
    "        model: Optional[torch.nn.Module] = None, # Receives the potentially wrapped model\n",
    "        epoch: Optional[int] = None\n",
    "    ):\n",
    "        if epoch is None: raise ValueError(\"epoch must be provided.\")\n",
    "        if epoch <= self.warm_up:\n",
    "            if self.verbose: print(f\"Epoch {epoch}: Warm-up period, skipping ES.\")\n",
    "            return\n",
    "\n",
    "        if isinstance(metrics, (int, float)): metrics = {'val_metric': metrics}\n",
    "\n",
    "        # Compute composite score\n",
    "        score = 0.0\n",
    "        for name, val in metrics.items():\n",
    "            if not isinstance(val, (int, float)): continue # Skip non-numeric\n",
    "            weight = self.score_weights.get(name, 0)\n",
    "            if weight > 0:\n",
    "                adj_score = -val if name == 'val_loss' else val # Invert loss for maximization\n",
    "                score += adj_score * weight\n",
    "\n",
    "        current_delta = self.delta if not self.relative_delta else self.delta * abs(self.best_scores.get('composite', 0))\n",
    "\n",
    "        # --- CORRECTED model state saving ---\n",
    "        # Get base model for saving state_dict ONLY if saving is needed\n",
    "        model_state_to_save = None\n",
    "        if model is not None:\n",
    "            # Get the underlying model state if wrapped in DataParallel\n",
    "            model_to_save = model.module if isinstance(model, nn.DataParallel) else model\n",
    "            try:\n",
    "                 # Attempt to get state_dict - might fail if model has issues\n",
    "                 model_state_to_save = model_to_save.state_dict()\n",
    "            except Exception as e:\n",
    "                 print(f\"Warning: Could not get model state_dict for saving. Error: {e}\")\n",
    "                 model_state_to_save = None # Ensure it's None if state_dict fails\n",
    "        # --- END CORRECTION ---\n",
    "\n",
    "        save_model = False\n",
    "        if self._is_first or self.best_scores.get('composite') is None:\n",
    "            self.best_scores['composite'] = score\n",
    "            self.best_epoch['composite'] = epoch\n",
    "            self.counters['composite'] = 0\n",
    "            self._is_first = False\n",
    "            save_model = True # Save on first valid epoch\n",
    "            if self.verbose: print(f\"Initial best score: {score:.6f} @ E{epoch}\", end=\"\")\n",
    "        elif score > self.best_scores['composite'] + current_delta:\n",
    "            self.best_scores['composite'] = score\n",
    "            self.best_epoch['composite'] = epoch\n",
    "            self.counters['composite'] = 0\n",
    "            save_model = True # Save if improved\n",
    "            if self.verbose: print(f\"New best score: {score:.6f} @ E{epoch}\", end=\"\")\n",
    "        else:\n",
    "            self.counters['composite'] = self.counters.get('composite', 0) + 1\n",
    "            if self.verbose: print(f\"No improvement. Counter: {self.counters['composite']}/{self.patience}\")\n",
    "            if self.counters['composite'] >= self.patience:\n",
    "                self.early_stop = True\n",
    "                if self.verbose: print(f\"Early stopping triggered @ E{epoch}.\")\n",
    "\n",
    "        # Save checkpoint only if required and state is available\n",
    "        if save_model and model_state_to_save is not None and self.checkpoint_path:\n",
    "            try:\n",
    "                torch.save({\n",
    "                    'epoch': epoch,\n",
    "                    'model_state_dict': model_state_to_save, # Save the potentially unwrapped state\n",
    "                    'best_scores': self.best_scores, # Log best scores so far\n",
    "                    'best_epoch': self.best_epoch # Log best epoch so far\n",
    "                }, self.checkpoint_path)\n",
    "                if self.verbose: print(f\", model saved to {self.checkpoint_path}\")\n",
    "            except Exception as e:\n",
    "                 print(f\"\\nERROR saving checkpoint: {e}\")\n",
    "        elif save_model and self.verbose:\n",
    "             print(\" (checkpoint not saved - model state unavailable or no path)\")\n",
    "        elif save_model: # If verbose is false but save failed\n",
    "             print(f\"Warning: Failed to save best model at epoch {epoch}.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1efade9e",
   "metadata": {
    "papermill": {
     "duration": 0.030344,
     "end_time": "2025-06-17T04:33:23.420801",
     "exception": false,
     "start_time": "2025-06-17T04:33:23.390457",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Training Epoch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "ebe58358",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-17T04:33:23.483129Z",
     "iopub.status.busy": "2025-06-17T04:33:23.482877Z",
     "iopub.status.idle": "2025-06-17T04:33:23.496681Z",
     "shell.execute_reply": "2025-06-17T04:33:23.495858Z"
    },
    "papermill": {
     "duration": 0.046401,
     "end_time": "2025-06-17T04:33:23.498047",
     "exception": false,
     "start_time": "2025-06-17T04:33:23.451646",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import time\n",
    "import torch\n",
    "import torch.nn.functional as F\n",
    "import numpy as np\n",
    "from tqdm import tqdm\n",
    "# Make sure get_resource_usage is defined elsewhere or remove the call\n",
    "\n",
    "def train_epoch(model, loader, optimizer, experiment, epoch, scaler=None, accum_steps=1, criterion_multi=None, mel_idx=None, lambda_binary=0.75, device=None):\n",
    "    \"\"\"\n",
    "    Training epoch function.\n",
    "    \"\"\"\n",
    "    # --- Initial Checks & Setup ---\n",
    "    if criterion_multi is None or mel_idx is None:\n",
    "        raise ValueError(\"criterion_multi and mel_idx must be provided to train_epoch\")\n",
    "    if device is None:\n",
    "        # print(\"Warning: No device provided; defaulting to 'cuda' if available\") # Less verbose\n",
    "        device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
    "\n",
    "    model.train() # Set model to training mode\n",
    "\n",
    "    # --- GET BASE MODEL REFERENCE ---\n",
    "    # Determine if the model is wrapped and get the underlying module if necessary\n",
    "    base_model = model.module if isinstance(model, nn.DataParallel) else model\n",
    "    # ------------------------------\n",
    "\n",
    "    # --- Initialize metrics and timers ---\n",
    "    train_loss_list = []\n",
    "    train_correct = 0\n",
    "    train_total = 0\n",
    "    start_time = time.time()\n",
    "    optimizer.zero_grad() # Zero gradients at the start\n",
    "\n",
    "    # --- Initialize Progress Bar ---\n",
    "    pbar = tqdm(loader, desc=f\"Epoch {epoch} - Loss: N/A, Acc: N/A\", total=len(loader), leave=False)\n",
    "    for batch_idx, batch in enumerate(pbar):\n",
    "        try: # <--- ADD TRY BLOCK HERE ---\n",
    "            # --- Data Handling ---\n",
    "            if hasattr(base_model, 'n_meta_features') and base_model.n_meta_features > 0:\n",
    "                (images, meta), target = batch\n",
    "                images, meta, target = images.to(device), meta.to(device), target.to(device)\n",
    "            else:\n",
    "                images, target = batch\n",
    "                images, target = images.to(device), target.to(device)\n",
    "                meta = None # Ensure meta is None if not used\n",
    "\n",
    "            # --- Forward Pass ---\n",
    "            if scaler:\n",
    "                with torch.cuda.amp.autocast():\n",
    "                    # Use model() call directly, forward method handles meta internally\n",
    "                    logits = model(images, meta) if meta is not None else model(images)\n",
    "\n",
    "                    # --- Loss Calculation ---\n",
    "                    multiclass_loss = criterion_multi(logits, target)\n",
    "                    binary_target = (target == mel_idx).float()\n",
    "                    binary_logits = logits[:, mel_idx] # Use mel_idx defined globally or passed\n",
    "                    binary_loss = F.binary_cross_entropy_with_logits(binary_logits, binary_target)\n",
    "                    total_loss_unscaled = multiclass_loss + lambda_binary * binary_loss\n",
    "                    total_loss = total_loss_unscaled / accum_steps\n",
    "                # --- Backward Pass (AMP) ---\n",
    "                scaler.scale(total_loss).backward()\n",
    "            else: # Not using AMP\n",
    "                # Use model() call directly\n",
    "                logits = model(images, meta) if meta is not None else model(images)\n",
    "\n",
    "                # --- Loss Calculation ---\n",
    "                multiclass_loss = criterion_multi(logits, target)\n",
    "                binary_target = (target == mel_idx).float()\n",
    "                binary_logits = logits[:, mel_idx]\n",
    "                binary_loss = F.binary_cross_entropy_with_logits(binary_logits, binary_target)\n",
    "                total_loss_unscaled = multiclass_loss + lambda_binary * binary_loss\n",
    "                total_loss = total_loss_unscaled / accum_steps\n",
    "                # --- Backward Pass ---\n",
    "                total_loss.backward()\n",
    "\n",
    "            train_loss_list.append(total_loss_unscaled.item())\n",
    "\n",
    "            # --- Accuracy Tracking ---\n",
    "            with torch.no_grad():\n",
    "                 preds = logits.argmax(dim=1)\n",
    "                 batch_correct = (preds == target).sum().item()\n",
    "                 batch_total = target.size(0)\n",
    "                 train_correct += batch_correct\n",
    "                 train_total += batch_total\n",
    "\n",
    "            # --- Optimization Step ---\n",
    "            if (batch_idx + 1) % accum_steps == 0 or (batch_idx + 1) == len(loader):\n",
    "                if scaler:\n",
    "                    scaler.step(optimizer)\n",
    "                    scaler.update()\n",
    "                else:\n",
    "                    optimizer.step()\n",
    "                optimizer.zero_grad()\n",
    "\n",
    "            # --- Update Progress Bar ---\n",
    "            avg_loss_so_far = np.mean(train_loss_list) if train_loss_list else 0.0\n",
    "            acc_so_far = (train_correct / train_total) * 100.0 if train_total > 0 else 0.0\n",
    "            pbar.set_description(f\"Epoch {epoch} - Loss: {avg_loss_so_far:.4f}, Acc: {acc_so_far:.2f}%\")\n",
    "\n",
    "        # --- ADD EXCEPT BLOCK HERE ---\n",
    "        except AttributeError as ae:\n",
    "            print(f\"\\n\\n!!! AttributeError caught in train_epoch loop (batch {batch_idx}) !!!\")\n",
    "            print(f\"Error message: {ae}\")\n",
    "            print(\"Model type:\", type(model))\n",
    "            print(\"Is model DataParallel?\", isinstance(model, nn.DataParallel))\n",
    "            print(\"--- Traceback ---\")\n",
    "            traceback.print_exc() # Print the exact line causing the error\n",
    "            print(\"-----------------\")\n",
    "            raise ae # Re-raise the error to stop execution\n",
    "        except Exception as e:\n",
    "             print(f\"\\n\\n!!! Non-AttributeError caught in train_epoch loop (batch {batch_idx}) !!!\")\n",
    "             print(f\"Error type: {type(e)}\")\n",
    "             print(f\"Error message: {e}\")\n",
    "             traceback.print_exc()\n",
    "             raise e\n",
    "        # --- END TRY/EXCEPT ---\n",
    "\n",
    "    # --- End of Epoch ---\n",
    "    pbar.close()\n",
    "    avg_train_loss = np.mean(train_loss_list) if train_loss_list else 0.0 # Final average loss for the epoch\n",
    "    train_acc = (train_correct / train_total) * 100.0 if train_total > 0 else 0.0\n",
    "    epoch_time = time.time() - start_time\n",
    "\n",
    "    # --- Resource Usage ---\n",
    "    try:\n",
    "        resources = get_resource_usage()\n",
    "    except NameError:\n",
    "        resources = {} # Handle if function not defined\n",
    "        print(\"Warning: get_resource_usage() not defined.\")\n",
    "\n",
    "    # --- Print Epoch Summary ---\n",
    "    print(\n",
    "        f\"Epoch {epoch} - Training Time: {epoch_time:.2f}s, Avg Loss: {avg_train_loss:.5f}, \"\n",
    "        f\"Acc: {train_acc:.2f}%, Resources: {resources}\"\n",
    "    )\n",
    "\n",
    "    # --- Logging to W&B ---\n",
    "    if experiment:\n",
    "        log_data = {\n",
    "            \"train_loss\": avg_train_loss,\n",
    "            \"train_acc\": train_acc,\n",
    "            \"train_epoch_time_seconds\": epoch_time,\n",
    "        }\n",
    "        # Add resource usage if available and it's a dictionary\n",
    "        if isinstance(resources, dict):\n",
    "             log_data.update({f\"train_{k}\": v for k, v in resources.items()})\n",
    "        experiment.log(log_data, step=epoch)\n",
    "\n",
    "    # --- Return average loss for the epoch ---\n",
    "    return avg_train_loss"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "abce101f",
   "metadata": {
    "papermill": {
     "duration": 0.034034,
     "end_time": "2025-06-17T04:33:23.562972",
     "exception": false,
     "start_time": "2025-06-17T04:33:23.528938",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Validation Epoch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "57d968c7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-17T04:33:23.630381Z",
     "iopub.status.busy": "2025-06-17T04:33:23.630028Z",
     "iopub.status.idle": "2025-06-17T04:33:23.661294Z",
     "shell.execute_reply": "2025-06-17T04:33:23.660674Z"
    },
    "papermill": {
     "duration": 0.068009,
     "end_time": "2025-06-17T04:33:23.662524",
     "exception": false,
     "start_time": "2025-06-17T04:33:23.594515",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def val_epoch(model, loader, experiment, epoch, n_test=1, recalib_interval=5, criterion_multi=None, mel_idx=None, lambda_binary=0.5, device=None, use_amp=True):\n",
    "    if criterion_multi is None or mel_idx is None: raise ValueError(\"criterion/mel_idx needed\")\n",
    "    if device is None: device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
    "\n",
    "    model.eval()\n",
    "    base_model = model.module if isinstance(model, nn.DataParallel) else model\n",
    "    out_dim = base_model.out_dim\n",
    "\n",
    "    val_loss_batch_list = [] ; PROBS_ALL = []; TARGETS = []\n",
    "    start_time = time.time()\n",
    "\n",
    "    # --- Temperature Scaling ---\n",
    "    # print(\"DEBUG val_epoch: Initializing TemperatureScaling...\") # DEBUG\n",
    "    temp_scaler = TemperatureScaling(model, device) # Pass original model\n",
    "    optimal_temp = None\n",
    "    if epoch > 1 and epoch % recalib_interval == 1:\n",
    "        # print(f\"DEBUG val_epoch: Calling temp_scaler.calibrate for Epoch {epoch}...\") # DEBUG\n",
    "        try: optimal_temp = temp_scaler.calibrate(loader)\n",
    "        except Exception as cal_e: print(f\" T-Scaling calibration failed: {cal_e}\")\n",
    "        if experiment and optimal_temp is not None: experiment.log({\"optimal_temperature\": optimal_temp}, step=epoch)\n",
    "    current_temp = optimal_temp if optimal_temp is not None else (torch.exp(temp_scaler.log_temperature).item() if hasattr(temp_scaler, 'log_temperature') else 1.0)\n",
    "    print(f\"Using temperature: {current_temp:.4f} for validation epoch {epoch}\")\n",
    "\n",
    "    # --- Init Metrics ---\n",
    "    mc_acc = MulticlassAccuracy(num_classes=out_dim, average='macro').to(device)\n",
    "    mc_f1 = MulticlassF1Score(num_classes=out_dim, average='macro').to(device)\n",
    "    mc_auc = MulticlassAUROC(num_classes=out_dim, average='macro', thresholds=None).to(device)\n",
    "    mc_cm = MulticlassConfusionMatrix(num_classes=out_dim).to(device)\n",
    "    bin_auc = BinaryAUROC(thresholds=None).to(device)\n",
    "    # print(\"DEBUG val_epoch: Metrics initialized.\") # DEBUG\n",
    "\n",
    "    with torch.no_grad():\n",
    "        pbar = tqdm(loader, desc=f\"Validating Epoch {epoch}\", total=len(loader), leave=False)\n",
    "        for batch_idx, batch in enumerate(pbar):\n",
    "            # --- DEBUG PRINT ---\n",
    "            # print(f\"\\nDEBUG val_epoch: Starting batch {batch_idx}. Model type: {type(model)}, DP: {isinstance(model, nn.DataParallel)}\")\n",
    "            # ---\n",
    "            try:\n",
    "                # --- Unpack Batch ---\n",
    "                images, meta, target = None, None, None # Initialize\n",
    "                if hasattr(base_model, 'n_meta_features') and base_model.n_meta_features > 0:\n",
    "                    try: (images, meta), target = batch; images, meta, target = images.to(device), meta.to(device), target.to(device)\n",
    "                    except ValueError: images, target = batch; images, target = images.to(device), target.to(device); meta = None; print(f\"Warn val B{batch_idx}: Unpack assuming (img,tgt)\")\n",
    "                else:\n",
    "                    images, target = batch; images, target = images.to(device), target.to(device); meta = None\n",
    "\n",
    "                # --- Inference ---\n",
    "                # --- DEBUG PRINT ---\n",
    "                # print(f\"DEBUG val_epoch B{batch_idx}: Before forward pass. Use meta: {use_meta}, Meta is None: {meta is None}\")\n",
    "                # ---\n",
    "                with torch.cuda.amp.autocast(enabled=use_amp):\n",
    "                    logits = model(images, x_meta=meta) if use_meta and meta is not None else model(images)\n",
    "                    # --- DEBUG PRINT ---\n",
    "                    # print(f\"DEBUG val_epoch B{batch_idx}: After forward pass. Logits shape: {logits.shape}\")\n",
    "                    # ---\n",
    "                    logits = torch.clamp(logits, min=-20, max=20); # Clamp logits\n",
    "                    if torch.isnan(logits).any(): logits = torch.nan_to_num(logits, 0.0)\n",
    "\n",
    "                    # --- Loss ---\n",
    "                    # --- DEBUG PRINT ---\n",
    "                    # print(f\"DEBUG val_epoch B{batch_idx}: Before loss calculation.\")\n",
    "                    # ---\n",
    "                    multiclass_loss = criterion_multi(logits, target)\n",
    "                    binary_target = (target == mel_idx).float(); binary_logits = logits[:, mel_idx]\n",
    "                    binary_loss = F.binary_cross_entropy_with_logits(torch.clamp(binary_logits, -10, 10), binary_target)\n",
    "                    total_loss = multiclass_loss + lambda_binary * binary_loss\n",
    "\n",
    "                    # --- Probabilities ---\n",
    "                    current_probs = torch.softmax(logits / current_temp, dim=1)\n",
    "                    current_probs = torch.clamp(current_probs, 1e-6, 1.0 - 1e-6); # Clamp probs\n",
    "                    if torch.isnan(current_probs).any(): current_probs = torch.nan_to_num(current_probs, 0.5)\n",
    "\n",
    "                # Store results\n",
    "                if not (torch.isnan(total_loss) or torch.isinf(total_loss)): val_loss_batch_list.append(total_loss.item())\n",
    "                PROBS_ALL.append(current_probs); TARGETS.append(target)\n",
    "\n",
    "                # --- Update Metrics ---\n",
    "                # --- DEBUG PRINT ---\n",
    "                # print(f\"DEBUG val_epoch B{batch_idx}: Before metric update.\")\n",
    "                # ---\n",
    "                mc_acc.update(current_probs, target); mc_f1.update(current_probs, target)\n",
    "                mc_auc.update(current_probs, target); mc_cm.update(current_probs.argmax(dim=1), target)\n",
    "                bin_auc.update(current_probs[:, mel_idx], (target == mel_idx).int())\n",
    "                # --- DEBUG PRINT ---\n",
    "                # print(f\"DEBUG val_epoch B{batch_idx}: After metric update.\")\n",
    "                # ---\n",
    "\n",
    "                pbar.set_postfix(loss=total_loss.item())\n",
    "\n",
    "            except AttributeError as ae: # Catch specific error if needed again\n",
    "                 print(f\"\\n\\n!!! AttributeError caught in val_epoch loop (batch {batch_idx}) !!!\"); print(f\"Error: {ae}\")\n",
    "                 print(f\"Model type: {type(model)}, DP: {isinstance(model, nn.DataParallel)}\")\n",
    "                 traceback.print_exc(); raise ae\n",
    "            except Exception as e:\n",
    "                 print(f\"\\n\\n!!! Error in val_epoch loop (batch {batch_idx}) !!!\"); print(f\"Type: {type(e)}, Error: {e}\")\n",
    "                 traceback.print_exc(); raise e # Re-raise to stop run\n",
    "\n",
    "        pbar.close()\n",
    "\n",
    "    # --- Aggregate & Calculate Final Metrics ---\n",
    "    # print(\"DEBUG val_epoch: Finished validation loop, starting aggregation.\")\n",
    "    if not val_loss_batch_list: return (0.0,0.5,0.5,np.array([]),np.array([]),0,0,0,0,0,0,0,[],[],1.0,None)\n",
    "\n",
    "    val_loss_avg = np.mean(val_loss_batch_list)\n",
    "    epoch_time = time.time() - start_time\n",
    "    try: resources = get_resource_usage()\n",
    "    except NameError: resources = {}\n",
    "\n",
    "    PROBS = torch.cat(PROBS_ALL, dim=0).cpu().numpy()\n",
    "    TARGETS = torch.cat(TARGETS, dim=0).cpu().numpy()\n",
    "    print(f\"Epoch {epoch} Valid Aggregated: PROBS={PROBS.shape}, TARGETS={TARGETS.shape}\")\n",
    "    if PROBS.shape[0] == 0: return (val_loss_avg,0.5,0.5,PROBS,TARGETS,0,0,0,0,0,0,0,[],[],current_temp,None)\n",
    "\n",
    "    # --- *** FINAL CORRECTION for .compute() calls *** ---\n",
    "    # Use the variables defined earlier: mc_acc, mc_f1, mc_auc, mc_cm, bin_auc\n",
    "    mc_acc_val = mc_acc.compute().item() * 100.0\n",
    "    mc_f1_val = mc_f1.compute().item()\n",
    "    mc_auc_val = mc_auc.compute().item()\n",
    "    mc_cm_val = mc_cm.compute().cpu().numpy().tolist()\n",
    "    bin_auc_val = bin_auc.compute().item()\n",
    "    # --- *** END CORRECTION *** ---\n",
    "\n",
    "    # --- Calculate binary threshold & metrics (remains the same) ---\n",
    "    binary_targets_np=(TARGETS == mel_idx).astype(np.float32); binary_probs_np=PROBS[:, mel_idx]\n",
    "    best_threshold=0.5; best_f1=0.0; f1_hist=[]\n",
    "    try:\n",
    "        prec, rec, pr_thresh = precision_recall_curve(binary_targets_np, np.minimum(binary_probs_np*1.1, 1.0))\n",
    "        if len(prec) > 1 and len(rec) > 1:\n",
    "            f1s=2*(prec[:-1]*rec[:-1])/(prec[:-1]+rec[:-1]+1e-6); opt_idx=np.argmax(f1s); best_f1=f1s[opt_idx]; best_threshold=pr_thresh[opt_idx]\n",
    "            f1_hist = list(zip(pr_thresh, f1s)) # Store history only if calculated\n",
    "        print(f\" Best F1 Threshold (PR): {best_threshold:.4f}, F1={best_f1:.4f}\")\n",
    "    except Exception as thresh_e: print(f\"Warn: Threshold opt failed: {thresh_e}\")\n",
    "    # --- CORRECTED Binary Metric Calculation Block ---\n",
    "    binary_preds_best=(binary_probs_np > best_threshold).astype(np.float32)\n",
    "    bin_cm_best=[[0,0],[0,0]]; # Default CM\n",
    "    # Initialize all metrics to default values\n",
    "    bin_spec_best,bin_prec_best,bin_rec_best,bin_f1_best,bin_acc_best = 0.0, 0.0, 0.0, 0.0, 0.0\n",
    "\n",
    "    if len(binary_targets_np) > 0:\n",
    "        try: # Start try block for ALL binary metric calculations\n",
    "            bin_cm_best=confusion_matrix(binary_targets_np, binary_preds_best).tolist()\n",
    "\n",
    "            # Calculate specificity only if CM is 2x2\n",
    "            if len(np.array(bin_cm_best).ravel())==4:\n",
    "                tn,fp,fn,tp=np.array(bin_cm_best).ravel()\n",
    "                bin_spec_best=tn/(tn+fp) if (tn+fp)>0 else 0.0\n",
    "            # else: specificity remains 0.0\n",
    "\n",
    "            # Calculate other metrics INSIDE the try block\n",
    "            bin_prec_best=precision_score(binary_targets_np,binary_preds_best,zero_division=0)\n",
    "            bin_rec_best=recall_score(binary_targets_np,binary_preds_best,zero_division=0)\n",
    "            bin_f1_best=f1_score(binary_targets_np,binary_preds_best,zero_division=0) # This should match best_f1 found earlier\n",
    "            bin_acc_best=accuracy_score(binary_targets_np,binary_preds_best)*100\n",
    "\n",
    "        except Exception as bin_metric_e:\n",
    "            # If any calculation fails, metrics keep their default values (0.0)\n",
    "            print(f\"Warn: Binary metric calculation failed: {bin_metric_e}\")\n",
    "            # bin_cm_best remains default [[0,0],[0,0]]\n",
    "    # --- END CORRECTION ---\n",
    "\n",
    "    # --- Print & Log (uses potentially updated variables) ---\n",
    "    print(\n",
    "         f\"Epoch {epoch} - Val Loss: {val_loss_avg:.5f}, \"\n",
    "         f\"Bin AUC: {bin_auc_val:.4f}, F1(T={best_threshold:.2f}): {bin_f1_best:.4f}, \"\n",
    "         f\"MC AUC: {mc_auc_val:.4f}, MC Acc: {mc_acc_val:.2f}%, MC F1: {mc_f1_val:.4f}, \"\n",
    "         f\"Val Time: {epoch_time:.2f}s\"\n",
    "    )\n",
    "    metrics_log = {\n",
    "         \"val_loss\": val_loss_avg, \"binary_auc\": bin_auc_val, \"multiclass_auc\": mc_auc_val if not np.isnan(mc_auc_val) else 0.5,\n",
    "         \"binary_acc\": bin_acc_best, \"binary_precision\": bin_prec_best, \"binary_recall\": bin_rec_best,\n",
    "         \"binary_specificity\": bin_spec_best, \"binary_f1\": bin_f1_best,\n",
    "         \"multiclass_acc\": mc_acc_val, \"multiclass_f1\": mc_f1_val, # Use mc_..._val\n",
    "         \"val_epoch_time_seconds\": epoch_time, **{f\"val_{k}\": v for k, v in resources.items()}\n",
    "    }\n",
    "    if experiment: # Check if wandb run object exists\n",
    "         try:\n",
    "             experiment.log(metrics_log, step=epoch)\n",
    "             cls_nms = [k for k,v in sorted(globals().get('diagnosis2idx',{}).items(),key=lambda i:i[1])] or [str(i) for i in range(globals().get('out_dim',0))]\n",
    "             if len(binary_targets_np)>0:\n",
    "                 experiment.log({\"bin_cm_best_f1\": wandb.plot.confusion_matrix(y_true=binary_targets_np.astype(int), preds=binary_preds_best, class_names=['non-mel','mel'])}, step=epoch)\n",
    "                 experiment.log({\"mc_cm\": wandb.plot.confusion_matrix(y_true=TARGETS.astype(int), preds=PROBS.argmax(axis=1), class_names=cls_nms)}, step=epoch)\n",
    "                 if bin_cm_best: experiment.log({\"bin_cm_table\": wandb.Table(columns=['Pred Non-Mel','Pred Mel'], data=bin_cm_best)}, step=epoch)\n",
    "                 if mc_cm_val: experiment.log({\"mc_cm_table\": wandb.Table(columns=[f\"Pred {n}\" for n in cls_nms], data=mc_cm_val)}, step=epoch) # Use mc_cm_val\n",
    "             if f1_hist: experiment.log({\"f1_thresh_hist\": wandb.Table(columns=[\"thresh\",\"f1\"], data=f1_hist)}, step=epoch)\n",
    "         except Exception as log_e: print(f\"Wandb val log failed: {log_e}\")\n",
    "\n",
    "    # --- ROC Data ---\n",
    "    roc_data = None # Initialize roc_data to None\n",
    "    # --- CORRECTED SYNTAX ---\n",
    "    if len(binary_targets_np) > 0 :\n",
    "        try:\n",
    "            fpr, tpr, roc_thresholds = roc_curve(binary_targets_np, binary_probs_np) # Use adjusted probs? Maybe not needed for roc_curve\n",
    "            # Check if roc_curve returned valid data (at least two points needed)\n",
    "            if len(fpr) > 1 and len(tpr) > 1:\n",
    "                roc_data = (fpr, tpr, roc_thresholds)\n",
    "            else:\n",
    "                 print(\"Warning: ROC curve calculation returned insufficient points.\")\n",
    "        except ValueError as roc_e:\n",
    "             print(f\"Warning: Could not compute ROC curve: {roc_e}\")\n",
    "        except Exception as e: # Catch other potential errors\n",
    "             print(f\"Warning: Unexpected error during ROC curve calculation: {e}\")\n",
    "    # --- END CORRECTION ---\n",
    "\n",
    "    # --- Return ---\n",
    "    # The return statement should be correct from the previous fix\n",
    "    return (val_loss_avg, bin_auc_val, mc_auc_val, PROBS, TARGETS,\n",
    "            bin_acc_best, bin_prec_best, bin_rec_best, bin_f1_best, bin_spec_best,\n",
    "            mc_acc_val, mc_f1_val, mc_cm_val, bin_cm_best,\n",
    "            current_temp, roc_data)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3ff36cbf",
   "metadata": {
    "papermill": {
     "duration": 0.032359,
     "end_time": "2025-06-17T04:33:23.725721",
     "exception": false,
     "start_time": "2025-06-17T04:33:23.693362",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Grad-Cam type shit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "1d95ac63",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-17T04:33:23.790283Z",
     "iopub.status.busy": "2025-06-17T04:33:23.790053Z",
     "iopub.status.idle": "2025-06-17T04:33:23.795415Z",
     "shell.execute_reply": "2025-06-17T04:33:23.794565Z"
    },
    "papermill": {
     "duration": 0.038492,
     "end_time": "2025-06-17T04:33:23.796556",
     "exception": false,
     "start_time": "2025-06-17T04:33:23.758064",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Defined load_and_preprocess_for_gradcam function.\n"
     ]
    }
   ],
   "source": [
    "def load_and_preprocess_for_gradcam(image_path, target_size):\n",
    "    \"\"\"Loads an image, resizes it, and returns both normalized tensor and unnormalized numpy array.\"\"\"\n",
    "    img = cv2.imread(image_path)\n",
    "    if img is None:\n",
    "        raise FileNotFoundError(f\"Could not read image: {image_path}\")\n",
    "    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB) # Convert to RGB\n",
    "\n",
    "    # Resize\n",
    "    img_resized = cv2.resize(img, (target_size, target_size))\n",
    "\n",
    "    # --- Prepare image for visualization (unnormalized) ---\n",
    "    # Needs to be float32 between 0 and 1\n",
    "    img_for_display = np.float32(img_resized) / 255.0\n",
    "\n",
    "    # --- Prepare image for model (normalized) ---\n",
    "    # Apply normalization matching your transforms_val/transforms_train\n",
    "    normalize_transform = A.Compose([\n",
    "        A.Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))\n",
    "    ])\n",
    "    normalized_img_data = normalize_transform(image=img_resized)\n",
    "    normalized_img_np = normalized_img_data['image']\n",
    "\n",
    "    # Convert to tensor, add batch dimension, move channel first\n",
    "    # (B, C, H, W) expected by model\n",
    "    input_tensor = torch.tensor(normalized_img_np).permute(2, 0, 1).unsqueeze(0).float()\n",
    "\n",
    "    return input_tensor, img_for_display\n",
    "\n",
    "print(\"Defined load_and_preprocess_for_gradcam function.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "c6bff8cf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-17T04:33:23.859913Z",
     "iopub.status.busy": "2025-06-17T04:33:23.859700Z",
     "iopub.status.idle": "2025-06-17T04:33:23.869298Z",
     "shell.execute_reply": "2025-06-17T04:33:23.868486Z"
    },
    "papermill": {
     "duration": 0.042897,
     "end_time": "2025-06-17T04:33:23.870452",
     "exception": false,
     "start_time": "2025-06-17T04:33:23.827555",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# --- Robust generate_gradcam function ---\n",
    "def generate_gradcam(model, target_layer, input_tensor, original_image,\n",
    "                     target_class_idx, device, meta_tensor=None):\n",
    "    \"\"\"Generates Grad-CAM heatmap, handling metadata and potential issues.\"\"\"\n",
    "    print(\"--- Executing generate_gradcam ---\")\n",
    "\n",
    "    model.to(device); model.eval()\n",
    "    # Ensure target_class_idx is an int\n",
    "    if not isinstance(target_class_idx, int):\n",
    "         print(f\"  Warning: target_class_idx is not int ({type(target_class_idx)}), attempting cast.\")\n",
    "         try: target_class_idx = int(target_class_idx)\n",
    "         except ValueError: print(\"  ERROR: Cannot cast target_class_idx to int.\"); return None, None\n",
    "\n",
    "    targets = [ClassifierOutputTarget(target_class_idx)]\n",
    "    model_wrapper = model\n",
    "\n",
    "    if meta_tensor is not None:\n",
    "        meta_tensor = meta_tensor.to(device)\n",
    "        class ModelWrapper(torch.nn.Module):\n",
    "            def __init__(self, model, meta_data): super().__init__(); self.model=model; self.meta_data=meta_data\n",
    "            def forward(self, x): return self.model(x, x_meta=self.meta_data) # Assumes forward(img, meta)\n",
    "        model_wrapper = ModelWrapper(model, meta_tensor)\n",
    "        print(\"  Using ModelWrapper.\")\n",
    "\n",
    "    grayscale_cam = None; visualization = None\n",
    "\n",
    "    try:\n",
    "        print(f\"  Initializing GradCAM with target layer: {type(target_layer)}\")\n",
    "        # Ensure target_layers is a list\n",
    "        if not isinstance(target_layer, list): target_layers = [target_layer]\n",
    "        else: target_layers = target_layer # Assume it's already a list if passed as one\n",
    "        grad_cam_instance = GradCAM(model=model_wrapper, target_layers=target_layers)\n",
    "\n",
    "        print(f\"  Generating raw CAM for target class: {target_class_idx}\")\n",
    "        _raw_cam = grad_cam_instance(input_tensor=input_tensor, targets=targets)\n",
    "\n",
    "        if _raw_cam is None: print(\"  ERROR: grad_cam_instance returned None.\"); return None, None\n",
    "        if not isinstance(_raw_cam, np.ndarray): print(f\"  ERROR: grad_cam_instance returned type: {type(_raw_cam)}\"); return None, None\n",
    "        if _raw_cam.size == 0 or _raw_cam.shape[0] == 0: print(\"  ERROR: grad_cam_instance returned empty array.\"); return None, None\n",
    "        print(f\"  _raw_cam generated - Shape: {_raw_cam.shape}, Min: {np.min(_raw_cam):.4f}, Max: {np.max(_raw_cam):.4f}\")\n",
    "\n",
    "        grayscale_cam = _raw_cam[0, :]\n",
    "        print(f\"  grayscale_cam extracted - Shape: {grayscale_cam.shape}, Min: {np.min(grayscale_cam):.4f}, Max: {np.max(grayscale_cam):.4f}\")\n",
    "\n",
    "        if np.isnan(grayscale_cam).any(): print(\"  ERROR: grayscale_cam contains NaNs.\"); return None, grayscale_cam\n",
    "\n",
    "        cam_min = np.min(grayscale_cam); cam_max = np.max(grayscale_cam)\n",
    "        if cam_max <= cam_min or abs(cam_max - cam_min) < 1e-6 : # Check for constant value robustly\n",
    "            print(f\"  Warning: grayscale_cam has no significant variation (min={cam_min:.4f}, max={cam_max:.4f}). Visualization may fail.\")\n",
    "            # Attempt visualization anyway\n",
    "\n",
    "        print(\"  Attempting show_cam_on_image...\")\n",
    "        if not (isinstance(original_image, np.ndarray) and original_image.ndim == 3 and original_image.shape[2] == 3 and np.min(original_image) >= 0 and np.max(original_image) <= 1.0):\n",
    "             print(f\"  ERROR: original_image format/range invalid. Type: {type(original_image)}, Shape: {original_image.shape}, Range: [{np.min(original_image)}, {np.max(original_image)}]\")\n",
    "             return None, grayscale_cam\n",
    "\n",
    "        visualization = show_cam_on_image(original_image, grayscale_cam, use_rgb=True, colormap=cv2.COLORMAP_HOT)\n",
    "\n",
    "        if visualization is None: print(\"  ERROR: show_cam_on_image returned None.\")\n",
    "        else: print(f\"  Visualization created - Shape: {visualization.shape}\")\n",
    "\n",
    "    except Exception as e_cam_gen:\n",
    "        print(f\"  ERROR during Grad-CAM generation steps: {e_cam_gen}\"); traceback.print_exc()\n",
    "        visualization = None; grayscale_cam = None # Ensure None on error\n",
    "\n",
    "    print(f\"  Returning visualization (is None: {visualization is None}), grayscale_cam (is None: {grayscale_cam is None})\")\n",
    "    return visualization, grayscale_cam\n",
    "# --- End generate_gradcam function ---"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d1a66377",
   "metadata": {
    "papermill": {
     "duration": 0.035935,
     "end_time": "2025-06-17T04:33:23.937062",
     "exception": false,
     "start_time": "2025-06-17T04:33:23.901127",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Main training function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "840e5d44",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-17T04:33:24.000040Z",
     "iopub.status.busy": "2025-06-17T04:33:23.999805Z",
     "iopub.status.idle": "2025-06-17T04:33:24.063098Z",
     "shell.execute_reply": "2025-06-17T04:33:24.062509Z"
    },
    "papermill": {
     "duration": 0.096716,
     "end_time": "2025-06-17T04:33:24.064343",
     "exception": false,
     "start_time": "2025-06-17T04:33:23.967627",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def run_single_model(model_type='efficientnetv2',\n",
    "                     cnn_backbone_name='efficientnetv2_m',\n",
    "                     transformer_backbone_name=None,\n",
    "                     use_meta_flag=True,\n",
    "                     use_external_flag=True,\n",
    "                     target_total_epochs=40): # Keep target epochs\n",
    "    \"\"\"\n",
    "    Main training function adapted for EffNetV2 / Swin Hybrid models.\n",
    "    Uses PLAUSIBLE adaptive settings based on configuration, NO forced bias.\n",
    "    Uses CONSISTENT augmentation and training schedules.\n",
    "    \"\"\"\n",
    "    global use_meta, use_external, NOTEBOOK_START_TIME, MAX_RUNTIME_SECONDS\n",
    "    use_meta = use_meta_flag\n",
    "    use_external = use_external_flag\n",
    "\n",
    "    print(f\"--- Starting Plausible Training Run ---\") # Changed title\n",
    "    print(f\"Model Type: {model_type}, CNN: {cnn_backbone_name}\" + (f\", TF: {transformer_backbone_name}\" if transformer_backbone_name else \"\"))\n",
    "    print(f\"Using Meta: {use_meta}, Using External: {use_external}\")\n",
    "\n",
    "    # --- 1. Configuration & Parameter Adaptation ---\n",
    "    print(\"\\n--- 1. Configuring Run Parameters ---\")\n",
    "    device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu'); print(f\"Device: {device}\")\n",
    "    if torch.cuda.device_count() > 1: print(f\"GPUs available: {torch.cuda.device_count()}\")\n",
    "\n",
    "    cnn_size_tag = get_v2_size_map(cnn_backbone_name)\n",
    "    # *** Unpack only TWO values ***\n",
    "    lr_adaptation_factor, regularization_factor = configure_dynamic_parameters(\n",
    "        model_type, cnn_backbone_name, use_meta, use_external\n",
    "    )\n",
    "\n",
    "    # Batch Size / Accumulation (Keep adaptive based on CNN size)\n",
    "    _batch_config = {'s': {'bs': 24, 'acc': 3}, 'm': {'bs': 18, 'acc': 4}, 'l': {'bs': 12, 'acc': 5}} # Adjusted for V2+SwinBase\n",
    "    _current_bs_cfg = _batch_config.get(cnn_size_tag, _batch_config['m'])\n",
    "    batch_size, accum_steps = _current_bs_cfg['bs'], _current_bs_cfg['acc']\n",
    "    effective_bs = batch_size * accum_steps\n",
    "    print(f\"Batch Config ({cnn_size_tag}): BS={batch_size}, Accum={accum_steps} (Eff={effective_bs})\")\n",
    "\n",
    "    # --- *** Use CONSISTENT Training Schedule *** ---\n",
    "    n_epochs = target_total_epochs # Total loop iterations\n",
    "\n",
    "    # --- <<< START DEBUG MODIFICATION >>> ---\n",
    "    debug_epochs = 25 # Set the number of epochs for DEBUG mode\n",
    "    if DEBUG:\n",
    "        print(f\"\\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\")\n",
    "        print(f\"!!! DEBUG MODE ACTIVE: Overriding epochs to {debug_epochs} !!!\")\n",
    "        print(f\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\\n\")\n",
    "        n_epochs = debug_epochs\n",
    "    # --- <<< END DEBUG MODIFICATION >>> ---\n",
    "\n",
    "    \n",
    "\n",
    "    # --- Calculate phase durations relative to n_epochs ---\n",
    "    # Aim for roughly: 20% freeze, 30% warmup, 50% cosine\n",
    "    # Ensure minimums and that phases fit within n_epochs\n",
    "    freeze_epo = min(n_epochs - 2, max(1, round(n_epochs * 0.20))) if n_epochs > 1 else 0\n",
    "    warmup_epo = min(n_epochs - freeze_epo - 1, max(1, round(n_epochs * 0.30))) if (n_epochs - freeze_epo) > 1 else 0\n",
    "    cosine_epo = n_epochs - freeze_epo - warmup_epo\n",
    "    cosine_epo = max(0, cosine_epo) # Ensure non-negative\n",
    "    # Simplified adjustment for DEBUG:\n",
    "    if DEBUG and n_epochs <= 5 : # Very short runs\n",
    "        freeze_epo = 1\n",
    "        warmup_epo = max(0, n_epochs - 2) # Warmup for remaining epochs except last\n",
    "        cosine_epo = max(0, n_epochs - freeze_epo - warmup_epo) # Likely 0 or 1\n",
    "        print(f\"DEBUG Schedule Adjustment: F={freeze_epo}, W={warmup_epo}, C={cosine_epo}\")\n",
    "    # --- Calculate unfreeze points relative to n_epochs ---\n",
    "    # Start unfreezing shortly after the initial freeze ends\n",
    "    unfreeze_start_epoch = freeze_epo + 1 # Start right after freeze\n",
    "    # Full unfreeze happens partway through the warmup phase (e.g., ~60% into warmup)\n",
    "    # Ensure it happens after start and before cosine starts\n",
    "    unfreeze_point_in_warmup = max(1, round(warmup_epo * 0.60))\n",
    "    full_unfreeze_epoch = min(freeze_epo + warmup_epo, freeze_epo + unfreeze_point_in_warmup)\n",
    "    # Make sure full unfreeze epoch is at least one after start epoch\n",
    "    full_unfreeze_epoch = max(unfreeze_start_epoch + 1, full_unfreeze_epoch)\n",
    "    # Guard against n_epochs being too small\n",
    "    if n_epochs <= freeze_epo + 1: full_unfreeze_epoch = n_epochs + 1 # Prevent unfreeze if only freeze exists\n",
    "\n",
    "    freeze_duration, warmup_duration, cosine_duration = freeze_epo, warmup_epo, cosine_epo\n",
    "\n",
    "    print(f\"Using Training Schedule: Freeze={freeze_duration}, Warmup={warmup_duration}, Cosine={cosine_duration} (Total={n_epochs})\")\n",
    "    print(f\"Unfreezing Schedule Points (Dynamic): Start E{unfreeze_start_epoch}, Full E{full_unfreeze_epoch}\")\n",
    "    \n",
    "    # Image Size & Data Directories\n",
    "    target_image_sizes = {'s': 384, 'm': 448, 'l': 480}\n",
    "    image_size = 384\n",
    "    data_dir_size = 384 if image_size <= 384 else 512\n",
    "    data_dir_comp = f'../input/jpeg-melanoma-{data_dir_size}x{data_dir_size}'\n",
    "    data_dir_ext = f'../input/jpeg-isic2019-{data_dir_size}x{data_dir_size}' if use_external else None\n",
    "    print(f\"Target Image Size: {image_size}, Data Dir Size: {data_dir_size}\")\n",
    "    print(f\"Competition Data: {data_dir_comp}\")\n",
    "    if data_dir_ext: print(f\"External Data: {data_dir_ext}\")\n",
    "\n",
    "    # Kernel Type String for Logging/Saving\n",
    "    kb = f\"{cnn_backbone_name.replace('efficientnet','effnet')}\"\n",
    "    if model_type == 'hybrid_swin': kb += \"_swin\"\n",
    "    kernel_type = f\"{kb}_{image_size}{'_ext' if use_external else ''}{'_meta' if use_meta else ''}\"\n",
    "    print(f\"Generated kernel_type: {kernel_type}\")\n",
    "    # --- Define hyperparameters USED LATER here ---\n",
    "    debug_sample_size = 1000\n",
    "    split_random_state = 42\n",
    "    llrd_decay_rate = 0.90 # Fixed choice for this implementation\n",
    "    lambda_binary = 0.5    # Fixed choice\n",
    "    loss_label_smoothing = 0.1 # Fixed choice\n",
    "    warmup_multiplier = 10    # Fixed choice\n",
    "    plateau_factor = 0.5      # Fixed choice\n",
    "    plateau_patience = 5       # Fixed choice\n",
    "    es_patience = 20          # Fixed choice\n",
    "    es_delta = 0.003          # Fixed choice\n",
    "    es_relative_delta = True  # Fixed choice\n",
    "    val_split_ratio = 0.2\n",
    "    es_score_weights = {'binary_auc': 0.5, 'binary_recall': 0.2, 'multiclass_auc': 0.2, 'val_loss': 0.1} # Fixed choice\n",
    "\n",
    "    # --- WandB Initialization ---\n",
    "    print(\"\\n--- WandB Initialization ---\")\n",
    "    wandb_run = None\n",
    "    try:\n",
    "        wandb_config = {\n",
    "            \"kernel_type\": kernel_type, \"model_type\": model_type, \"cnn_backbone\": cnn_backbone_name,\n",
    "            \"transformer_backbone\": transformer_backbone_name, \n",
    "            \"cnn_size_tag\": cnn_size_tag,\n",
    "            \"use_external\": use_external, \"use_meta\": use_meta, \"image_size\": image_size,\n",
    "            \"DEBUG\": DEBUG,\n",
    "            \"target_total_epochs\": n_epochs, \n",
    "            \"batch_size\": batch_size, \"accum_steps\": accum_steps, \"effective_bs\": effective_bs,\n",
    "            \"use_amp\": use_amp, \"init_lr\": init_lr,\n",
    "            \"lr_adaptation_factor\": lr_adaptation_factor, \n",
    "            \"regularization_factor\": regularization_factor, \n",
    "            \"llrd_decay_rate\": llrd_decay_rate, \n",
    "            \"lambda_binary_loss_weight\": lambda_binary, \n",
    "            \"loss_label_smoothing\": loss_label_smoothing, \n",
    "            \"freeze_epochs\": freeze_duration, \"warmup_epochs\": warmup_duration, \n",
    "            \"cosine_epochs\": cosine_duration, \n",
    "            \"unfreeze_start\": unfreeze_start_epoch, \"unfreeze_full\": full_unfreeze_epoch,\n",
    "            \"warmup_multiplier\": warmup_multiplier, \n",
    "            \"plateau_factor\": plateau_factor, \"plateau_patience\": plateau_patience, \n",
    "            \"es_patience\": es_patience, \"es_delta\": es_delta, \"es_relative_delta\": es_relative_delta, \n",
    "            \"es_warm_up\": freeze_duration, \n",
    "            \"es_score_weights\": es_score_weights, \n",
    "            \"num_workers\": num_workers, \"split_random_state\": split_random_state\n",
    "        }\n",
    "        tz = pytz.timezone('Asia/Jakarta'); run_name = f\"{kernel_type}_{datetime.now(tz).strftime('%y%m%d_%H%M')}\"\n",
    "        wandb_run = wandb.init(project=\"SKRIPSI GACOR\", entity=\"arveda-ava86-universitas-gadjah-mada-library\", config=wandb_config, name=run_name, tags=[cnn_size_tag, model_type, kernel_type])\n",
    "        print(f\"WandB run initialized: {run_name} (ID: {wandb_run.id if wandb_run else 'N/A'})\")\n",
    "    except Exception as e: print(f\"Error initializing WandB: {e}\"); traceback.print_exc(); wandb_run = None\n",
    "    torch.cuda.empty_cache()\n",
    "\n",
    "    \n",
    "    # --- 2. Data Sampling & Splitting ---\n",
    "    print(\"\\n--- 2. Data Sampling & Splitting ---\")\n",
    "    df_train_to_split = None # DataFrame to use for train/val split\n",
    "    # --- >>> ADD THIS PRINT STATEMENT <<< ---\n",
    "    print(f\"DEBUG CHECK: Type of split_random_state before sampling: {type(split_random_state)}, Value: {split_random_state}\")\n",
    "    # --- >>> END ADD <<< ---\n",
    "    if DEBUG:\n",
    "        # --- >>> ADD TYPE CHECK AND CORRECTION <<< ---\n",
    "        if isinstance(debug_sample_size, tuple):\n",
    "            print(f\"Warning: debug_sample_size was a tuple {debug_sample_size}. Taking the first element.\")\n",
    "            if len(debug_sample_size) > 0 and isinstance(debug_sample_size[0], int):\n",
    "                debug_sample_size = debug_sample_size[0]\n",
    "            else:\n",
    "                print(\"Error: Cannot correct debug_sample_size tuple. Reverting to default 200.\")\n",
    "                debug_sample_size = 200 # Fallback default\n",
    "        elif not isinstance(debug_sample_size, int):\n",
    "             print(f\"Warning: debug_sample_size was not an int ({type(debug_sample_size)}). Reverting to default 200.\")\n",
    "             debug_sample_size = 200 # Fallback default\n",
    "        # --- >>> END TYPE CHECK <<< ---\n",
    "\n",
    "        print(f\"\\n!!! DEBUG MODE: Sampling up to {debug_sample_size} instances from df_train !!!\") # Changed wording slightly\n",
    "\n",
    "        # Now the comparison should work\n",
    "        if len(df_train) <= debug_sample_size:\n",
    "             print(f\" Original df_train ({len(df_train)}) smaller than/equal to debug sample size. Using all.\")\n",
    "             df_train_to_split = df_train.copy()\n",
    "        elif len(df_train['target'].unique()) > 1:\n",
    "             try:\n",
    "                 # Try stratified sampling first\n",
    "                 required_frac = debug_sample_size / len(df_train)\n",
    "                 df_train_to_split = df_train.groupby('target', group_keys=False).apply(lambda x: x.sample(n=max(1, int(len(x) * required_frac)), random_state=split_random_state))\n",
    "\n",
    "                 # If oversampled due to rounding up in apply, sample down\n",
    "                 if len(df_train_to_split) > debug_sample_size:\n",
    "                      df_train_to_split = df_train_to_split.sample(debug_sample_size, random_state=split_random_state)\n",
    "                 # If undersampled (e.g., tiny classes), top up with random sample if needed (less critical for debug)\n",
    "                 # elif len(df_train_to_split) < debug_sample_size * 0.8:\n",
    "                 #    print(\" Stratified fraction resulted in fewer samples than expected, taking random sample instead.\")\n",
    "                 #    df_train_to_split = df_train.sample(debug_sample_size, random_state=split_random_state)\n",
    "\n",
    "\n",
    "                 print(f\" Stratified sampling successful for DEBUG (Target: {debug_sample_size}, Actual: {len(df_train_to_split)}).\")\n",
    "             except Exception as e:\n",
    "                 print(f\" Warning: Stratified sampling for DEBUG failed ({e}). Falling back to random sampling.\")\n",
    "                 df_train_to_split = df_train.sample(debug_sample_size, random_state=split_random_state)\n",
    "        else:\n",
    "             # Cannot stratify\n",
    "             print(\"Warning: Only one class present in df_train target for DEBUG. Performing random sampling.\")\n",
    "             df_train_to_split = df_train.sample(min(debug_sample_size, len(df_train)), random_state=split_random_state)\n",
    "\n",
    "        print(f\" DEBUG Sampled df_train shape: {df_train_to_split.shape}\")\n",
    "        if not df_train_to_split.empty:\n",
    "            print(f\" DEBUG Sampled target distribution:\\n{df_train_to_split['target'].value_counts(normalize=True).sort_index()}\")\n",
    "            \n",
    "    else: # Not DEBUG mode\n",
    "        # --- <<< CHANGE THIS BLOCK >>> ---\n",
    "        # if len(df_train) > production_sample_size: # REMOVE or comment out this check\n",
    "        #     print(f\"\\n!!! PRODUCTION MODE: Undersampling df_train...\")\n",
    "        #     # ... (undersampling code) ...\n",
    "        # else:\n",
    "        #     print(f\"\\n--- PRODUCTION MODE: Using full df_train ({len(df_train)} instances, <= {production_sample_size}) ---\")\n",
    "        #     df_train_to_split = df_train.copy()\n",
    "    \n",
    "        # --- Replace with ---\n",
    "        print(f\"\\n--- PRODUCTION MODE: Using full df_train ({len(df_train)} instances) ---\")\n",
    "        df_train_to_split = df_train.copy()\n",
    "        # --- <<< END CHANGE >>> ---\n",
    "\n",
    "\n",
    "\n",
    "    # --- Perform Train/Validation Split on the (potentially sampled) data ---\n",
    "    print(f\"\\nSplitting data (shape: {df_train_to_split.shape}) with val ratio {val_split_ratio}...\")\n",
    "    df_train_set = None\n",
    "    df_valid_set = None\n",
    "    if df_train_to_split.empty:\n",
    "        print(\"Warning: DataFrame to split is empty. Creating empty train/valid sets.\")\n",
    "        df_train_set = pd.DataFrame(columns=df_train.columns)\n",
    "        df_valid_set = pd.DataFrame(columns=df_train.columns)\n",
    "    elif val_split_ratio > 0 and val_split_ratio < 1:\n",
    "        # Check stratification possibility again on the sampled data\n",
    "        if len(df_train_to_split['target'].unique()) > 1:\n",
    "            try:\n",
    "                df_train_set, df_valid_set = train_test_split(\n",
    "                    df_train_to_split,\n",
    "                    test_size=val_split_ratio,\n",
    "                    random_state=split_random_state,\n",
    "                    stratify=df_train_to_split['target'] # Stratify on the sampled data\n",
    "                )\n",
    "                print(\" Stratified split successful.\")\n",
    "            except ValueError as e:\n",
    "                 print(f\" Warning: Stratified split on sampled data failed ({e}). Falling back to non-stratified split.\")\n",
    "                 df_train_set, df_valid_set = train_test_split(\n",
    "                     df_train_to_split,\n",
    "                     test_size=val_split_ratio,\n",
    "                     random_state=split_random_state\n",
    "                 )\n",
    "        else:\n",
    "             print(\"Warning: Only one class present in sampled df_train target. Performing non-stratified split.\")\n",
    "             df_train_set, df_valid_set = train_test_split(\n",
    "                 df_train_to_split,\n",
    "                 test_size=val_split_ratio,\n",
    "                 random_state=split_random_state\n",
    "             )\n",
    "    elif val_split_ratio == 0:\n",
    "         print(\"Validation split ratio is 0. Using all sampled data for training.\")\n",
    "         df_train_set = df_train_to_split.copy()\n",
    "         df_valid_set = pd.DataFrame(columns=df_train.columns)\n",
    "    else: # val_split_ratio >= 1\n",
    "         print(\"Validation split ratio is >= 1. Using all sampled data for validation.\")\n",
    "         df_valid_set = df_train_to_split.copy()\n",
    "         df_train_set = pd.DataFrame(columns=df_train.columns)\n",
    "\n",
    "    # Reset index after final split\n",
    "    if df_train_set is not None: df_train_set = df_train_set.reset_index(drop=True)\n",
    "    if df_valid_set is not None: df_valid_set = df_valid_set.reset_index(drop=True)\n",
    "\n",
    "    print(f\" Final Train set shape: {df_train_set.shape}, Final Validation set shape: {df_valid_set.shape}\")\n",
    "    if not df_train_set.empty: print(f\" Final Train set target distribution:\\n{df_train_set['target'].value_counts(normalize=True).sort_index()}\")\n",
    "    if not df_valid_set.empty: print(f\" Final Valid set target distribution:\\n{df_valid_set['target'].value_counts(normalize=True).sort_index()}\")\n",
    "\n",
    "    # --- Update WandB Config with final data counts ---\n",
    "    if wandb_run:\n",
    "        try: # Add try-except around wandb calls\n",
    "            wandb_run.config.update({\n",
    "                \"n_samples_total_before_split\": len(df_train_to_split),\n",
    "                \"n_samples_train\": len(df_train_set),\n",
    "                \"n_samples_valid\": len(df_valid_set),\n",
    "                \"out_dim\": out_dim,\n",
    "                \"mel_idx\": mel_idx\n",
    "            }, allow_val_change=True) # Allow changes post-init\n",
    "        except Exception as e: print(f\"Wandb config update failed (data counts): {e}\")\n",
    "\n",
    "\n",
    "    # --- Augmentations & DataLoaders ---\n",
    "    print(\"\\nSetting Augmentations & Creating DataLoaders...\")\n",
    "    transforms_val = A.Compose([\n",
    "        A.Resize(image_size, image_size),\n",
    "        A.Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))\n",
    "    ])\n",
    "    if 'transforms_train' not in globals(): raise NameError(\"Global 'transforms_train' not defined.\")\n",
    "\n",
    "    dataset_train = SIIMISICDataset(df_train_set, 'train', 'train', transform=transforms_train)\n",
    "    dataset_valid = SIIMISICDataset(df_valid_set, 'train', 'val', transform=transforms_val)\n",
    "\n",
    "    # --- Weighted Sampler Logic ---\n",
    "    train_sampler = None\n",
    "    # Run sampler if train set is not empty (applies to DEBUG=False undersampled case too)\n",
    "    if not df_train_set.empty:\n",
    "        target_counts = df_train_set['target'].value_counts().sort_index()\n",
    "        target_counts = target_counts.replace(0, 1e-9)\n",
    "        num_samples = len(df_train_set)\n",
    "        num_classes = len(target_counts)\n",
    "\n",
    "        if num_classes > 0 and num_samples > 0:\n",
    "            class_weights_map = (num_samples / (num_classes * target_counts))\n",
    "            sample_weights = torch.from_numpy(df_train_set['target'].map(class_weights_map).values).double()\n",
    "            if (sample_weights <= 0).any():\n",
    "                print(\"Warning: Clamping non-positive sample weights.\")\n",
    "                sample_weights = torch.clamp(sample_weights, min=1e-9)\n",
    "\n",
    "            # Ensure num_samples for sampler is reasonable, especially for small debug sets\n",
    "            sampler_num_samples = num_samples # Draw 'num_samples' per epoch by default\n",
    "            if DEBUG and num_samples < batch_size * 2: # Heuristic for very small debug sets\n",
    "                 sampler_num_samples = max(num_samples, batch_size) # Ensure at least one batch is drawn\n",
    "                 print(f\" Adjusting sampler num_samples to {sampler_num_samples} for small DEBUG set.\")\n",
    "\n",
    "            train_sampler = WeightedRandomSampler(\n",
    "                weights=sample_weights,\n",
    "                num_samples=sampler_num_samples,\n",
    "                replacement=True\n",
    "            )\n",
    "            print(f\"WeightedRandomSampler Enabled (Classes: {num_classes}, Samples Drawn: {sampler_num_samples})\")\n",
    "        else:\n",
    "            print(\"WeightedRandomSampler Disabled: Not enough classes or samples in train_set.\")\n",
    "    else:\n",
    "        print(f\"WeightedRandomSampler Disabled (Train set empty)\")\n",
    "\n",
    "\n",
    "    # --- DataLoaders ---\n",
    "    train_loader = DataLoader(\n",
    "        dataset_train, batch_size=batch_size, sampler=train_sampler,\n",
    "        shuffle=(train_sampler is None and not df_train_set.empty),\n",
    "        num_workers=num_workers, pin_memory=True,\n",
    "        drop_last= (not df_train_set.empty)\n",
    "    ) if not df_train_set.empty else None\n",
    "\n",
    "    valid_loader = DataLoader(\n",
    "        dataset_valid, batch_size=batch_size * 2, shuffle=False,\n",
    "        num_workers=num_workers, pin_memory=True\n",
    "    ) if not df_valid_set.empty else None\n",
    "\n",
    "    print(f\"Loaders Ready:\")\n",
    "    print(f\"  Train Loader: {'Created' if train_loader else 'Skipped'}\" + (f\" ({len(train_loader)} batches)\" if train_loader else \"\"))\n",
    "    print(f\"  Valid Loader: {'Created' if valid_loader else 'Skipped'}\" + (f\" ({len(valid_loader)} batches)\" if valid_loader else \"\"))\n",
    "\n",
    "\n",
    "\n",
    "    # --- 3. Creating Model ---\n",
    "    print(\"\\n--- 3. Creating Model ---\")\n",
    "    model=None\n",
    "    try:\n",
    "        if model_type == 'hybrid_swin':\n",
    "            model = HybridSwinModel(\n",
    "                cnn_backbone_name=cnn_backbone_name,\n",
    "                transformer_backbone_name=transformer_backbone_name,\n",
    "                out_dim=out_dim,                 \n",
    "                n_meta_features=n_meta_features, \n",
    "                pretrained=True,\n",
    "                image_size=image_size,\n",
    "                regularization_factor=regularization_factor\n",
    "            )\n",
    "        # --- ADD THIS NEW CONDITION ---\n",
    "        elif model_type == 'swin_only':\n",
    "            print(\">>> Running in Swin Transformer ONLY mode <<<\")\n",
    "            model = HybridSwinModel(\n",
    "                cnn_backbone_name=None, # <<< PASS NONE HERE TO DISABLE CNN\n",
    "                transformer_backbone_name=transformer_backbone_name,\n",
    "                out_dim=out_dim,                 \n",
    "                n_meta_features=n_meta_features, \n",
    "                pretrained=True,\n",
    "                image_size=image_size,\n",
    "                regularization_factor=regularization_factor\n",
    "            )\n",
    "            \n",
    "        elif model_type == 'efficientnetv2':\n",
    "            model = EffNetV2Model(\n",
    "                backbone_name=cnn_backbone_name,\n",
    "                out_dim=out_dim,                 \n",
    "                n_meta_features=n_meta_features,\n",
    "                pretrained=True,\n",
    "                regularization_factor=regularization_factor\n",
    "            )\n",
    "        else:\n",
    "            raise ValueError(f\"Unknown model_type: {model_type}\")\n",
    "\n",
    "    except Exception as model_init_e:\n",
    "        print(f\"!!! ERROR initializing model: {model_init_e}\")\n",
    "        traceback.print_exc() # Print full traceback for model init errors\n",
    "        raise model_init_e\n",
    "\n",
    "    if model is None: raise RuntimeError(\"Model init failed silently.\")\n",
    "    # --- >>> ADD DROPOUT LOGGING AFTER MODEL CREATION <<< ---\n",
    "    if wandb_run and 'model_ref' in locals() and model_ref is not None:\n",
    "        try:\n",
    "            dropout_config = {}\n",
    "            # Log classifier dropout (exists in both models)\n",
    "            if hasattr(model_ref, 'initial_classifier_dropout'):\n",
    "                 dropout_config[\"initial_dropout_classifier\"] = model_ref.initial_classifier_dropout\n",
    "            # Log fusion dropout (only in hybrid)\n",
    "            if hasattr(model_ref, 'initial_fusion_dropout'):\n",
    "                 dropout_config[\"initial_dropout_fusion\"] = model_ref.initial_fusion_dropout\n",
    "            # Log image dropout if implemented and used\n",
    "            # if hasattr(model_ref, 'initial_image_dropout'):\n",
    "            #      dropout_config[\"initial_dropout_image\"] = model_ref.initial_image_dropout\n",
    "\n",
    "            if dropout_config: # Only update if we found dropout values\n",
    "                wandb_run.config.update(dropout_config, allow_val_change=True)\n",
    "                print(f\"Logged effective initial dropout rates to WandB: {dropout_config}\")\n",
    "        except Exception as e: print(f\"Wandb config update failed (dropout): {e}\")\n",
    "  \n",
    "    # Determine base model reference and check for DataParallel\n",
    "    model = model.to(device)\n",
    "    model_ref = model \n",
    "    is_parallel = False\n",
    "    if torch.cuda.device_count() > 1:\n",
    "        print(f\"Using {torch.cuda.device_count()} GPUs. Wrapping model with DataParallel.\")\n",
    "        model = nn.DataParallel(model)\n",
    "        model_ref = model.module \n",
    "        is_parallel = True\n",
    "    print(f\"Model Instantiated ({type(model_ref).__name__}). Parallel: {is_parallel}\")\n",
    "  \n",
    "    initial_freeze_block=2; print(f\"Applying initial freeze up to CNN block {initial_freeze_block}...\")\n",
    "    partial_freeze_enet(model, freeze_until_block=initial_freeze_block)\n",
    "    trainable_params=sum(p.numel() for p in model.parameters() if p.requires_grad); print(f\"Initially Trainable: {trainable_params:,}\")\n",
    "    print(f\"Model check: Has meta? {'Yes' if hasattr(model_ref,'meta_attention') else 'No'}, n_meta={getattr(model_ref,'n_meta_features','N/A')}\")\n",
    "\n",
    "    # --- 4. Loss, Optimizer, Scheduler ---\n",
    "    print(\"\\n--- 4. Loss, Optimizer, Scheduler ---\")\n",
    "    \n",
    "    if not df_train_set.empty:\n",
    "        counts=df_train_set['target'].value_counts().reindex(range(out_dim),fill_value=1e-6)\n",
    "        w_raw=torch.FloatTensor([1.0/c for c in counts]).to(device); class_weights=w_raw/w_raw.sum()*out_dim\n",
    "    else: class_weights = torch.ones(out_dim, device=device)\n",
    "    criterion_multi = nn.CrossEntropyLoss(weight=class_weights, label_smoothing=0.1).to(device)\n",
    "    lambda_binary = 0.5 \n",
    "\n",
    "\n",
    "    base_lr = init_lr\n",
    "    initial_lr = base_lr * 0.01 \n",
    "    param_groups = []\n",
    "\n",
    "    print(\"Defining initial optimizer groups...\")\n",
    "    initially_optimized_params = 0\n",
    "    head_params = []\n",
    "    backbone_params = [] \n",
    "    head_param_ids = set()\n",
    "    for part_name in ['myfc', 'classifier', 'meta_attention', 'meta_fc', 'fusion_layer']:\n",
    "        module = getattr(model_ref, part_name, None)\n",
    "        if module and not isinstance(module, nn.Identity):\n",
    "             head_param_ids.update(id(p) for p in module.parameters())\n",
    "    # Assign parameters to groups based on requires_grad and location\n",
    "    print(\" Iterating through model parameters for initial optimizer...\")\n",
    "    for name, param in model.named_parameters(): # Iterate through potentially wrapped model\n",
    "        if param.requires_grad: # Check if it's trainable after partial_freeze_enet\n",
    "            if id(param) in head_param_ids:\n",
    "                 head_params.append(param)\n",
    "            else: # Assume it's part of a backbone if requires_grad and not in head\n",
    "                 backbone_params.append(param)\n",
    "\n",
    "    # Add groups if they have parameters\n",
    "    if backbone_params:\n",
    "        param_groups.append({'params': backbone_params, 'lr': initial_lr, 'weight_decay': 0.01}) # Low WD for backbone parts\n",
    "        count = sum(p.numel() for p in backbone_params)\n",
    "        initially_optimized_params += count\n",
    "        print(f\"  Added initial optimizer group for 'Trainable Backbone Parts' ({len(backbone_params)} params, {count:,} elements) LR={initial_lr:.1e}, WD=0.01\")\n",
    "\n",
    "    if head_params:\n",
    "        # Use a slightly higher LR for the head initially\n",
    "        head_initial_lr = initial_lr * 5\n",
    "        param_groups.append({'params': head_params, 'lr': head_initial_lr, 'weight_decay': 0.05}) # Higher WD for head parts\n",
    "        count = sum(p.numel() for p in head_params)\n",
    "        initially_optimized_params += count\n",
    "        print(f\"  Added initial optimizer group for 'Head Parts' ({len(head_params)} params, {count:,} elements) LR={head_initial_lr:.1e}, WD=0.05\")\n",
    "\n",
    "    if not param_groups:\n",
    "        # This should only happen if partial_freeze_enet made nothing trainable\n",
    "        raise RuntimeError(\"No parameters requiring grad found for initial optimizer! Check partial_freeze_enet.\")\n",
    "\n",
    "    optimizer = optim.AdamW(param_groups, eps=1e-7)\n",
    "    print(f\"Initial optimizer created with {len(param_groups)} groups.\")\n",
    "    print(f\"Total parameters in initial optimizer: {initially_optimized_params:,}\") \n",
    "    scaler = GradScaler() if use_amp else None\n",
    "\n",
    "    warmup_multiplier = 10\n",
    "    sched_cosine = CosineAnnealingLR(optimizer, T_max=max(1, cosine_duration), eta_min=base_lr * 0.001)\n",
    "    sched_warmup = GradualWarmupSchedulerV2(optimizer, multiplier=warmup_multiplier, total_epoch=max(1, warmup_duration), after_scheduler=sched_cosine)\n",
    "    sched_plateau = ReduceLROnPlateau(optimizer, mode='max', factor=0.5, patience=5, verbose=True, min_lr=1e-7) \n",
    "    print(\"Schedulers initialized.\")\n",
    "    es_checkpoint_path = f'{kernel_type}_best.pth'\n",
    "    early_stopping = EarlyStopping(\n",
    "        patience=20, mode='max', delta=0.003, relative_delta=True,\n",
    "        warm_up=freeze_duration, verbose=True, checkpoint_path=es_checkpoint_path,\n",
    "        score_weights={'binary_auc': 0.5, 'binary_recall': 0.2, 'multiclass_auc': 0.2, 'val_loss': 0.1} \n",
    "    )\n",
    "    print(f\"Early stopping active after epoch {freeze_duration}, checkpoint: {es_checkpoint_path}\")\n",
    "\n",
    "\n",
    "    # --- 5. WandB Setup ---\n",
    "    # Watch model - log gradients and parameters (optional, can be verbose)\n",
    "    if wandb and wandb.run:\n",
    "        try:\n",
    "            # Exclude embedding layers if they cause issues\n",
    "            wandb.watch(model, log='all', log_freq=max(100, len(train_loader)//2), idx=0, log_graph=False)\n",
    "            print(\"WandB watching model.\")\n",
    "        except Exception as e:\n",
    "            print(f\"WandB watch failed: {e}\")\n",
    "\n",
    "\n",
    "    # --- 6. Training Loop ---\n",
    "    print(f\"\\n--- 6. Starting Training Loop (Target: {n_epochs} Epochs) ---\")\n",
    "    # ... (Loop initializations) ...\n",
    "    train_losses, val_losses = [], []; best_model_state, best_metrics = None, None; best_PROBS, best_TARGETS = None, None; best_epoch_num=0; best_score=float('-inf'); total_start_time=time.time(); main_cosine_scheduler=None; last_epoch_completed=0; early_stopping.reset()\n",
    "    main_scheduler = None # This will hold the active scheduler (Warmup->Cosine or just Cosine)\n",
    "    time_limit_reached = False # Flag to indicate why the loop stopped\n",
    "    try:\n",
    "        for epoch in range(1, n_epochs + 1):\n",
    "            last_epoch_completed = epoch; epoch_start_time = time.time()\n",
    "            print(f\"\\n===== Epoch {epoch}/{n_epochs} =====\") # Removed profile from print\n",
    "            # <<< --- START RUNTIME CHECK --- >>>\n",
    "            current_time = time.time()\n",
    "            elapsed_seconds = current_time - NOTEBOOK_START_TIME\n",
    "            if elapsed_seconds >= MAX_RUNTIME_SECONDS:\n",
    "                print(f\"\\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\")\n",
    "                print(f\"!!! RUNTIME LIMIT REACHED ({elapsed_seconds:.0f}s / {MAX_RUNTIME_SECONDS}s) !!!\")\n",
    "                print(f\"!!! Stopping training loop before starting Epoch {epoch}.   !!!\")\n",
    "                print(f\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\\n\")\n",
    "                time_limit_reached = True\n",
    "                break # Exit the training loop\n",
    "            else:\n",
    "                print(f\"Runtime Check: {elapsed_seconds/3600:.2f} hours elapsed (Limit: {MAX_RUNTIME_SECONDS/3600:.2f} hours)\")\n",
    "            # <<< --- END RUNTIME CHECK --- >>>\n",
    "            # Set dynamic dropout (uses regularization_factor)\n",
    "            if hasattr(model_ref, 'set_epoch'): model_ref.set_epoch(epoch)\n",
    "\n",
    "            # --- Progressive Layer Unfreezing (Use FIXED schedule points) ---\n",
    "            optimizer, optimizer_changed = progressive_layer_unfreezing(\n",
    "                model, optimizer, epoch, initial_freeze_block,\n",
    "                unfreeze_start_epoch=unfreeze_start_epoch,\n",
    "                full_unfreeze_epoch=full_unfreeze_epoch,\n",
    "                total_epochs=n_epochs, base_lr=base_lr,\n",
    "                cnn_backbone_name=cnn_backbone_name,\n",
    "                lr_adaptation_factor=lr_adaptation_factor,\n",
    "                llrd_decay_rate=0.90,\n",
    "                regularization_factor=regularization_factor                \n",
    "                )\n",
    "\n",
    "# --- >>> REVISED Scheduler Stepping Logic <<< ---\n",
    "\n",
    "            # Phase 1: Initial Freeze (Epochs 1 to freeze_duration)\n",
    "            if epoch <= freeze_duration:\n",
    "                print(\"Scheduler Phase: Initial Freeze (No Step)\")\n",
    "                # Optimizer LR is low (initial_lr), no scheduler step needed\n",
    "\n",
    "            # Phase 2: Initial Warmup (Epochs freeze_duration + 1 to freeze_duration + warmup_duration)\n",
    "            elif epoch == freeze_duration + 1: # First epoch of initial warmup\n",
    "                 print(f\"Scheduler Phase: Starting Initial Warmup (Epochs {epoch} to {freeze_duration + warmup_duration})\")\n",
    "                 # Initialize the first main_scheduler (WarmupV2 -> Cosine)\n",
    "                 sched_cosine_init = CosineAnnealingLR(optimizer, T_max=max(1, cosine_duration), eta_min=base_lr * 0.001)\n",
    "                 sched_warmup_init = GradualWarmupSchedulerV2(optimizer, multiplier=warmup_multiplier, total_epoch=max(1, warmup_duration), after_scheduler=sched_cosine_init)\n",
    "                 main_scheduler = sched_warmup_init\n",
    "                 main_scheduler.step() # Step for the current epoch (epoch 1 of warmup)\n",
    "            elif epoch <= freeze_duration + warmup_duration:\n",
    "                 if main_scheduler: main_scheduler.step() # Continue stepping initial warmup/cosine\n",
    "                 else: print(\"Error: Initial scheduler missing during warmup phase!\")\n",
    "\n",
    "            # Phase 3: Post-Warmup / Post-Unfreeze Reset\n",
    "            else: # epoch > freeze_duration + warmup_duration\n",
    "                if optimizer_changed: # This happens *exactly* at full_unfreeze_epoch\n",
    "                     print(\"Optimizer Changed! Resetting FULL scheduler sequence.\")\n",
    "                     remaining_epochs_total = n_epochs - epoch + 1\n",
    "                     # Define a *new, shorter* warmup + cosine for the remaining epochs\n",
    "                     # Example: 5 epochs warmup, rest cosine. Adjust as needed.\n",
    "                     new_warmup_epochs = min(5, max(1, remaining_epochs_total // 4))\n",
    "                     new_cosine_epochs = remaining_epochs_total - new_warmup_epochs\n",
    "                     print(f\"  New schedule phase: Warmup={new_warmup_epochs}, Cosine={new_cosine_epochs}\")\n",
    "\n",
    "                     if new_warmup_epochs + new_cosine_epochs != remaining_epochs_total:\n",
    "                          print(\"  Warning: New schedule epoch calculation mismatch.\")\n",
    "                          new_cosine_epochs = max(0, remaining_epochs_total - new_warmup_epochs) # Ensure non-negative\n",
    "\n",
    "                     # Create NEW schedulers based on the *new* optimizer state\n",
    "                     # Use the LRs set by progressive_layer_unfreezing\n",
    "                     sched_cosine_reset = CosineAnnealingLR(optimizer, T_max=max(1, new_cosine_epochs), eta_min=base_lr * 0.0001) # Lower final LR maybe?\n",
    "                     sched_warmup_reset = GradualWarmupSchedulerV2(optimizer, multiplier=warmup_multiplier, total_epoch=max(1, new_warmup_epochs), after_scheduler=sched_cosine_reset)\n",
    "                     main_scheduler = sched_warmup_reset # OVERWRITE main_scheduler\n",
    "\n",
    "                     # Reset Plateau scheduler with the new optimizer\n",
    "                     sched_plateau = ReduceLROnPlateau(optimizer, mode='max', factor=0.5, patience=5, verbose=True, min_lr=1e-7); sched_plateau._reset()\n",
    "                     print(\"  Plateau scheduler reset.\")\n",
    "\n",
    "                     main_scheduler.step() # Step the *new* scheduler for the current epoch\n",
    "\n",
    "                elif main_scheduler: # Optimizer didn't change (already past full_unfreeze_epoch)\n",
    "                     print(\"Scheduler Phase: Stepping Existing Post-Warmup Scheduler\")\n",
    "                     main_scheduler.step() # Step the active scheduler (could be warmup_reset or cosine_reset)\n",
    "                else:\n",
    "                     # This case should ideally not be reached if logic is correct\n",
    "                     print(\"Error: Main scheduler missing in post-warmup/post-reset phase!\")\n",
    "                     # Fallback: Create a simple cosine scheduler for remaining epochs\n",
    "                     remaining_at_fallback = n_epochs - epoch + 1\n",
    "                     main_scheduler = CosineAnnealingLR(optimizer, T_max=max(1, remaining_at_fallback), eta_min=base_lr * 0.001)\n",
    "                     main_scheduler.step()\n",
    "\n",
    "                # --- >>> END REVISED Scheduler Stepping Logic <<< ---\n",
    "            # Log LR\n",
    "            current_lr = optimizer.param_groups[0]['lr']\n",
    "            print(f\"Current LR: {current_lr:.2e}\")\n",
    "            if wandb and wandb.run: wandb.log({\"learning_rate\": current_lr}, step=epoch)\n",
    "\n",
    "            # --- Train ---\n",
    "            if len(train_loader) > 0:\n",
    "                train_loss = train_epoch(\n",
    "                    model, train_loader, optimizer, wandb, epoch, scaler=scaler,\n",
    "                    accum_steps=accum_steps, criterion_multi=criterion_multi,\n",
    "                    mel_idx=mel_idx, lambda_binary=lambda_binary, device=device\n",
    "                )\n",
    "                if train_loss is not None: train_losses.append(train_loss)\n",
    "            else:\n",
    "                print(\"Skipping train epoch: train_loader is empty.\")\n",
    "                train_loss = None # Signify no training loss\n",
    "\n",
    "            # --- Validate ---\n",
    "            if len(valid_loader) > 0:\n",
    "                val_results = val_epoch(\n",
    "                    model, valid_loader, wandb, epoch, n_test=1, # n_test=1 assumes no TTA\n",
    "                    criterion_multi=criterion_multi, mel_idx=mel_idx,\n",
    "                    lambda_binary=lambda_binary, device=device, use_amp=use_amp\n",
    "                )\n",
    "                # Unpack all 15 results\n",
    "                (val_loss, bin_auc, mc_auc, PROBS, TARGETS, bin_acc, bin_prec,\n",
    "                 bin_rec, bin_f1, bin_spec, mc_acc, mc_f1, mc_cm, bin_cm, temp, roc) = val_results\n",
    "                val_losses.append(val_loss)\n",
    "\n",
    "                # --- Early Stopping & Best Model Check ---\n",
    "                # Normalize loss for ES (higher score is better)\n",
    "                normalized_val_loss = max(0, 1.0 - min(val_loss / 5.0, 1.0)) # Adjust divisor if loss range differs\n",
    "                metrics_for_es = {\n",
    "                    'binary_auc': bin_auc if not np.isnan(bin_auc) else 0.0,\n",
    "                    'val_loss': normalized_val_loss,\n",
    "                    'binary_recall': bin_rec if not np.isnan(bin_rec) else 0.0,\n",
    "                    'multiclass_auc': mc_auc if not np.isnan(mc_auc) else 0.0,\n",
    "                }\n",
    "                early_stopping(metrics_for_es, model, epoch) # Check ES\n",
    "\n",
    "                composite_score = sum(\n",
    "                    early_stopping.score_weights.get(m, 0) * metrics_for_es.get(m, 0)\n",
    "                    for m in early_stopping.score_weights\n",
    "                )\n",
    "\n",
    "                # Log comprehensive validation metrics\n",
    "                if wandb and wandb.run:\n",
    "                    wandb.log({\n",
    "                        \"composite_score\": composite_score, \"val_loss_raw\": val_loss,\n",
    "                        **metrics_for_es, # Include metrics used for ES score\n",
    "                        'binary_f1': bin_f1, 'binary_acc': bin_acc, 'binary_precision': bin_prec,\n",
    "                        'binary_specificity': bin_spec, 'multiclass_acc': mc_acc, 'multiclass_f1': mc_f1,\n",
    "                        'temperature': temp\n",
    "                    }, step=epoch)\n",
    "\n",
    "                # Save best model state if score improved\n",
    "                if composite_score > best_score:\n",
    "                    best_score = composite_score\n",
    "                    best_model_state = model_ref.state_dict() # Get state from base model\n",
    "                    best_epoch_num = epoch\n",
    "                    best_metrics = { # Store detailed metrics for the best epoch\n",
    "                        'epoch': epoch, 'composite_score': composite_score, 'val_loss_raw': val_loss,\n",
    "                        'binary_auc': bin_auc, 'multiclass_auc': mc_auc, 'binary_recall': bin_rec,\n",
    "                        'binary_f1': bin_f1, 'binary_acc': bin_acc, 'binary_precision': bin_prec,\n",
    "                        'binary_specificity': bin_spec, 'multiclass_acc': mc_acc, 'multiclass_f1': mc_f1,\n",
    "                        'temperature': temp, 'binary_cm': bin_cm, 'multiclass_cm': mc_cm\n",
    "                    }\n",
    "                    best_PROBS = PROBS\n",
    "                    best_TARGETS = TARGETS\n",
    "                    print(f\"*** New Best Score: {best_score:.6f} at Epoch {epoch} ***\")\n",
    "                    # Save temporary best model (overwritten each time)\n",
    "                    torch.save({'epoch': best_epoch_num, 'model_state_dict': best_model_state},\n",
    "                               early_stopping.checkpoint_path) # Use ES path\n",
    "\n",
    "                # --- Plateau Scheduler Step ---\n",
    "                # Step based on composite score during cosine phase\n",
    "                if epoch > freeze_duration + warmup_duration:\n",
    "                    if hasattr(sched_plateau, 'optimizer') and sched_plateau.optimizer is optimizer:\n",
    "                        sched_plateau.step(composite_score)\n",
    "                    elif optimizer_changed:\n",
    "                        pass # Optimizer was reset, plateau scheduler already updated\n",
    "                    else: # Fallback if optimizer reference somehow differs\n",
    "                        print(\"Warn: Recreating Plateau scheduler due to optimizer mismatch.\")\n",
    "                        sched_plateau=ReduceLROnPlateau(optimizer,mode='max',factor=0.5,patience=5,verbose=True,min_lr=1e-7)\n",
    "                        sched_plateau._reset()\n",
    "                        sched_plateau.step(composite_score)\n",
    "\n",
    "            else: # No validation data\n",
    "                print(\"Skipping validation epoch: valid_loader is empty.\")\n",
    "                # Cannot check early stopping or update best model\n",
    "\n",
    "            # --- Check Early Stopping Trigger ---\n",
    "            if early_stopping.early_stop:\n",
    "                print(f\"EARLY STOPPING triggered after epoch {epoch}.\")\n",
    "                break\n",
    "\n",
    "            print(f\"Epoch {epoch} completed in {time.time() - epoch_start_time:.2f}s.\")\n",
    "            torch.cuda.empty_cache() # Clear cache at end of epoch\n",
    "        # --- End MAIN TRAINING LOOP ---\n",
    "\n",
    "    except KeyboardInterrupt:\n",
    "        print(\"\\nTraining interrupted by user.\")\n",
    "    except Exception as e:\n",
    "        print(f\"\\nAn error occurred during training loop: {e}\")\n",
    "        logging.error(traceback.format_exc()) # Log detailed error\n",
    "    finally:\n",
    "        # --- Final Operations ---\n",
    "        total_time = time.time() - total_start_time\n",
    "        loop_stop_reason = \"Runtime Limit\" if time_limit_reached else (\"Early Stopping\" if early_stopping.early_stop else \"Completed Epochs\")\n",
    "        print(f\"\\n===== Training Finished / Stopped (Epoch {last_epoch_completed}/{n_epochs}, Reason: {loop_stop_reason}) =====\") # <--- Modified print\n",
    "        print(f\"Total time: {total_time:.2f}s\")\n",
    "\n",
    "        # Reload best model state if early stopping happened and we have a best epoch recorded\n",
    "        if early_stopping.early_stop and best_epoch_num > 0:\n",
    "            best_model_path_es = early_stopping.checkpoint_path\n",
    "            if os.path.exists(best_model_path_es):\n",
    "                print(f\"Reloading best model state from Early Stopping checkpoint (Epoch {best_epoch_num})...\")\n",
    "                try:\n",
    "                    checkpoint = torch.load(best_model_path_es)\n",
    "                    # Load into the base model structure first\n",
    "                    temp_model = model_ref.__class__( # Re-instantiate base model\n",
    "                         backbone_name=cnn_backbone_name, # Or use appropriate args for hybrid\n",
    "                         # Add other necessary args based on model type...\n",
    "                         transformer_backbone_name=transformer_backbone_name if model_type=='hybrid_swin' else None,\n",
    "                         out_dim=out_dim, n_meta_features=n_meta_features, image_size=image_size,\n",
    "                         pretrained=False # Don't need pretrained weights here\n",
    "                    )\n",
    "                    temp_model.load_state_dict(checkpoint['model_state_dict'])\n",
    "                    best_model_state = temp_model.state_dict() # Get the clean state_dict\n",
    "                    print(\" Successfully reloaded best model state.\")\n",
    "                except Exception as load_err:\n",
    "                    print(f\" Warning: Failed to reload best model state from {best_model_path_es}. Error: {load_err}\")\n",
    "                    # Keep the state from before loop end if loading fails\n",
    "            else:\n",
    "                print(f\"Warning: Early stopping triggered, but checkpoint file not found at {best_model_path_es}.\")\n",
    "\n",
    "\n",
    "        # Prepare final metrics dictionary\n",
    "        final_log_metrics = {}\n",
    "        if best_metrics:\n",
    "            print(f\"Using metrics from Best Epoch: {best_epoch_num}\")\n",
    "            final_log_metrics = best_metrics.copy() # Use copy\n",
    "        elif last_epoch_completed > 0 and 'val_results' in locals():\n",
    "            print(f\"WARNING: No best metrics saved. Using metrics from last completed validation epoch ({last_epoch_completed}).\")\n",
    "             # Reconstruct from last val_results if needed (simplified example)\n",
    "            final_log_metrics = {'epoch': last_epoch_completed,\n",
    "                                'val_loss_raw': val_loss, 'binary_auc': bin_auc, 'multiclass_auc': mc_auc}\n",
    "            if best_model_state is None and 'model' in locals(): # Use last model state if no best saved\n",
    "                 best_model_state = model_ref.state_dict()\n",
    "            best_epoch_num = last_epoch_completed # Mark as last epoch if using last metrics\n",
    "        else:\n",
    "            print(\"WARNING: No validation results available to log final metrics.\")\n",
    "\n",
    "        # Add training summary stats\n",
    "        final_log_metrics['total_training_time_sec'] = round(total_time, 2)\n",
    "        final_log_metrics['last_epoch_completed'] = last_epoch_completed\n",
    "        final_log_metrics['best_epoch_logged'] = best_epoch_num # Epoch whose metrics are being logged\n",
    "\n",
    "        # Log final summary to WandB\n",
    "        if wandb and wandb.run:\n",
    "             summary = {f\"final_{k}\": v for k, v in final_log_metrics.items() if isinstance(v, (int, float, bool, str))}\n",
    "             print(\"\\nFinal Summary Metrics:\")\n",
    "             for k, v in sorted(summary.items()): print(f\"  - {k}: {v}\")\n",
    "             try: wandb.summary.update(summary)\n",
    "             except Exception as wb_err: print(f\"Warning: Failed to update WandB summary: {wb_err}\")\n",
    "\n",
    "        # --- Save Final Artifacts ---\n",
    "        if best_model_state is not None and best_epoch_num > 0:\n",
    "            # Use the explicitly saved ES checkpoint path as the final path now\n",
    "            final_model_path = early_stopping.checkpoint_path\n",
    "            # Re-save with additional info if needed, or just use the ES checkpoint\n",
    "            print(f\"\\nFinal Best Model saved at: {final_model_path}\")\n",
    "            # Optionally save metrics dict separately or add to checkpoint\n",
    "            # torch.save({ ... 'final_metrics': final_log_metrics ... }, final_model_path) # Example if re-saving\n",
    "\n",
    "            # Log Model Artifact to WandB\n",
    "            if wandb and wandb.run:\n",
    "                model_artifact_name = f\"model-{wandb.run.id}-final\"\n",
    "                description=f\"Final model ({kernel_type}, Best E{best_epoch_num})\"\n",
    "                try:\n",
    "                    model_artifact = wandb.Artifact(model_artifact_name, type=\"model\",\n",
    "                                                    description=description, metadata=summary)\n",
    "                    if os.path.exists(final_model_path):\n",
    "                         model_artifact.add_file(final_model_path)\n",
    "                         wandb.log_artifact(model_artifact, aliases=[\"best\", f\"E{best_epoch_num}\"])\n",
    "                         print(\"Logged FINAL model artifact to WandB.\")\n",
    "                    else: print(f\"Warning: Final model file {final_model_path} not found for artifact logging.\")\n",
    "                except Exception as art_err: print(f\"Warning: Failed logging model artifact: {art_err}\")\n",
    "\n",
    "            # and if wandb run is active\n",
    "            if best_PROBS is not None and best_TARGETS is not None and \\\n",
    "               wandb is not None and wandb.run is not None:\n",
    "                preds_artifact_name = f\"preds-{wandb.run.id}-final\"\n",
    "                preds_desc = f\"Val preds/tgts (Best E{best_epoch_num})\"\n",
    "                probs_fn = f\"best_probs_E{best_epoch_num}_{wandb.run.id}.npy\"\n",
    "                tgts_fn = f\"best_tgts_E{best_epoch_num}_{wandb.run.id}.npy\"\n",
    "                valid_ids_fn = f\"best_valid_ids_E{best_epoch_num}_{wandb.run.id}.csv\"\n",
    "\n",
    "                try:\n",
    "                    probs_np = np.array(best_PROBS)\n",
    "                    tgts_np = np.array(best_TARGETS)\n",
    "                    if 'df_valid_set' in locals() and df_valid_set is not None and not df_valid_set.empty:\n",
    "                         valid_ids_df = df_valid_set[['image_name']].copy() \n",
    "                         valid_ids_df.to_csv(valid_ids_fn, index=False)\n",
    "                         print(f\" Saved validation IDs ({len(valid_ids_df)}) to {valid_ids_fn}\")\n",
    "                    else:\n",
    "                         print(\"Warning: Could not save validation IDs (df_valid_set unavailable or empty).\")\n",
    "                         valid_ids_fn = None \n",
    "\n",
    "                    np.save(probs_fn, probs_np); np.save(tgts_fn, tgts_np)\n",
    "                    print(f\" Saved best predictions ({probs_np.shape}) to {probs_fn}\")\n",
    "                    print(f\" Saved best targets ({tgts_np.shape}) to {tgts_fn}\")\n",
    "\n",
    "                    pred_artifact = wandb.Artifact(preds_artifact_name, type=\"val_predictions\", description=preds_desc)\n",
    "                    pred_artifact.add_file(probs_fn); pred_artifact.add_file(tgts_fn)\n",
    "\n",
    "                    if valid_ids_fn and os.path.exists(valid_ids_fn):\n",
    "                         pred_artifact.add_file(valid_ids_fn)\n",
    "                    wandb.log_artifact(pred_artifact, aliases=[\"best_preds\", f\"E{best_epoch_num}\"])\n",
    "                    print(\"Logged final predictions artifact (including validation IDs).\")\n",
    "\n",
    "                    # Clean up local files after logging\n",
    "                    try:\n",
    "                        os.remove(probs_fn); os.remove(tgts_fn)\n",
    "                        if valid_ids_fn and os.path.exists(valid_ids_fn): os.remove(valid_ids_fn)\n",
    "                    except OSError as e: print(f\" Warning: Failed to remove temporary prediction files: {e}\")\n",
    "\n",
    "                except Exception as e: print(f\"Error saving/logging prediction artifacts: {e}\")\n",
    "        else:\n",
    "            print(\"\\nNo best model state recorded or best epoch is 0, skipping final artifact saving.\")\n",
    "\n",
    "        # Log Final CM Tables from best_metrics if available\n",
    "        if best_metrics and wandb and wandb.run:\n",
    "            bin_cm=best_metrics.get('bin_cm',[]); multi_cm=best_metrics.get('mc_cm',[])\n",
    "            cls_nms=[k for k,v in sorted(globals().get('diagnosis2idx',{}).items(),key=lambda i:i[1])] or [str(i) for i in range(globals().get('out_dim',0))]\n",
    "            try:\n",
    "                 if bin_cm: wandb.log({f\"binary_cm_table_P\": wandb.Table(columns=['Pred Non-Mel','Pred Mel'],data=bin_cm)}, step=n_epochs)\n",
    "                 if multi_cm and len(multi_cm)==len(cls_nms): wandb.log({f\"multiclass_cm_table_P\": wandb.Table(columns=[f\"Pred {n}\" for n in cls_nms],data=multi_cm)}, step=n_epochs)\n",
    "            except Exception as e: print(f\"Warn: Failed log final CMs: {e}\")\n",
    "\n",
    "    # --- Function Return ---\n",
    "    print(\"--- Exiting Adaptive Training Run ---\")\n",
    "    # Return single factors AND the wandb_run object\n",
    "    return (model, best_model_state, final_log_metrics, train_losses, val_losses,\n",
    "            best_PROBS, best_TARGETS, df_valid_set, diagnosis2idx, best_epoch_num,\n",
    "            kernel_type, early_stopping, model_type, cnn_backbone_name, n_meta_features,\n",
    "            image_size, out_dim,\n",
    "            lr_adaptation_factor, regularization_factor,\n",
    "            wandb_run # <<< ADD wandb_run HERE\n",
    "           ) # 20 values returned now"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "212c7d22",
   "metadata": {
    "papermill": {
     "duration": 0.030628,
     "end_time": "2025-06-17T04:33:24.125919",
     "exception": false,
     "start_time": "2025-06-17T04:33:24.095291",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Main execution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "0539f578",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-17T04:33:24.188355Z",
     "iopub.status.busy": "2025-06-17T04:33:24.188136Z",
     "iopub.status.idle": "2025-06-17T16:22:19.187468Z",
     "shell.execute_reply": "2025-06-17T16:22:19.186562Z"
    },
    "papermill": {
     "duration": 42542.784119,
     "end_time": "2025-06-17T16:22:26.941084",
     "exception": false,
     "start_time": "2025-06-17T04:33:24.156965",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Starting run: swin_only / efficientnet_v2_m\n",
      "--- Starting Plausible Training Run ---\n",
      "Model Type: swin_only, CNN: efficientnet_v2_m, TF: swin_base_patch4_window12_384.ms_in22k_ft_in1k\n",
      "Using Meta: False, Using External: True\n",
      "\n",
      "--- 1. Configuring Run Parameters ---\n",
      "Device: cuda:0\n",
      "GPUs available: 2\n",
      "Configuring BASE scaling factors based on CNN size ONLY for: type='swin_only', cnn='efficientnet_v2_m' (m), meta=False, external=True\n",
      "  NOTE: Multipliers for meta, external, hybrid are DISABLED for purity.\n",
      "  Base factors based on CNN size 'm': LR Factor=1.00, Reg Factor=1.00\n",
      "  ==> Final Factors (Based ONLY on CNN Size): LR Adapt Factor=1.0, Reg Factor=1.0\n",
      "Batch Config (m): BS=18, Accum=4 (Eff=72)\n",
      "Using Training Schedule: Freeze=6, Warmup=9, Cosine=15 (Total=30)\n",
      "Unfreezing Schedule Points (Dynamic): Start E7, Full E11\n",
      "Target Image Size: 384, Data Dir Size: 384\n",
      "Competition Data: ../input/jpeg-melanoma-384x384\n",
      "External Data: ../input/jpeg-isic2019-384x384\n",
      "Generated kernel_type: effnet_v2_m_384_ext\n",
      "\n",
      "--- WandB Initialization ---\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.19.1\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in \u001b[35m\u001b[1m/kaggle/working/wandb/run-20250617_043324-cq19o9b4\u001b[0m\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: Run \u001b[1m`wandb offline`\u001b[0m to turn off syncing.\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33meffnet_v2_m_384_ext_250617_1133\u001b[0m\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: ⭐️ View project at \u001b[34m\u001b[4mhttps://wandb.ai/arveda-ava86-universitas-gadjah-mada-library/SKRIPSI%20GACOR\u001b[0m\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: 🚀 View run at \u001b[34m\u001b[4mhttps://wandb.ai/arveda-ava86-universitas-gadjah-mada-library/SKRIPSI%20GACOR/runs/cq19o9b4\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WandB run initialized: effnet_v2_m_384_ext_250617_1133 (ID: cq19o9b4)\n",
      "\n",
      "--- 2. Data Sampling & Splitting ---\n",
      "DEBUG CHECK: Type of split_random_state before sampling: <class 'int'>, Value: 42\n",
      "\n",
      "--- PRODUCTION MODE: Using full df_train (57964 instances) ---\n",
      "\n",
      "Splitting data (shape: (57964, 13)) with val ratio 0.2...\n",
      " Stratified split successful.\n",
      " Final Train set shape: (46371, 13), Final Validation set shape: (11593, 13)\n",
      " Final Train set target distribution:\n",
      "target\n",
      "0    0.014966\n",
      "1    0.057277\n",
      "2    0.048953\n",
      "3    0.004119\n",
      "4    0.010826\n",
      "5    0.004356\n",
      "6    0.087814\n",
      "7    0.311078\n",
      "8    0.460611\n",
      "Name: proportion, dtype: float64\n",
      " Final Valid set target distribution:\n",
      "target\n",
      "0    0.014923\n",
      "1    0.057276\n",
      "2    0.048909\n",
      "3    0.004140\n",
      "4    0.010869\n",
      "5    0.004399\n",
      "6    0.087812\n",
      "7    0.311050\n",
      "8    0.460623\n",
      "Name: proportion, dtype: float64\n",
      "\n",
      "Setting Augmentations & Creating DataLoaders...\n",
      "WeightedRandomSampler Enabled (Classes: 9, Samples Drawn: 46371)\n",
      "Loaders Ready:\n",
      "  Train Loader: Created (2576 batches)\n",
      "  Valid Loader: Created (323 batches)\n",
      "\n",
      "--- 3. Creating Model ---\n",
      ">>> Running in Swin Transformer ONLY mode <<<\n",
      "Instantiating Model (CNN: None, Transformer: swin_base_patch4_window12_384.ms_in22k_ft_in1k)...\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "14e829fd9a3e4074a6dcec9b9c02d0dd",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "model.safetensors:   0%|          | 0.00/365M [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " Loaded Transformer: swin_base_patch4_window12_384.ms_in22k_ft_in1k. Pretrained=True\n",
      " Swin features: 1024. Classifier removed.\n",
      "  - Meta Pathway: Disabled\n",
      "Using 2 GPUs. Wrapping model with DataParallel.\n",
      "Model Instantiated (HybridSwinModel). Parallel: True\n",
      "Applying initial freeze up to CNN block 2...\n",
      "Warning (partial_freeze_enet): CNN backbone not found. Skipping freeze.\n",
      "Initially Trainable: 87,409,025\n",
      "Model check: Has meta? No, n_meta=0\n",
      "\n",
      "--- 4. Loss, Optimizer, Scheduler ---\n",
      "Defining initial optimizer groups...\n",
      " Iterating through model parameters for initial optimizer...\n",
      "  Added initial optimizer group for 'Trainable Backbone Parts' (327 params, 86,878,584 elements) LR=1.0e-05, WD=0.01\n",
      "  Added initial optimizer group for 'Head Parts' (6 params, 530,441 elements) LR=5.0e-05, WD=0.05\n",
      "Initial optimizer created with 2 groups.\n",
      "Total parameters in initial optimizer: 87,409,025\n",
      "Schedulers initialized.\n",
      "Early stopping active after epoch 6, checkpoint: effnet_v2_m_384_ext_best.pth\n",
      "WandB watching model.\n",
      "\n",
      "--- 6. Starting Training Loop (Target: 30 Epochs) ---\n",
      "\n",
      "===== Epoch 1/30 =====\n",
      "Runtime Check: 0.02 hours elapsed (Limit: 11.42 hours)\n",
      "Scheduler Phase: Initial Freeze (No Step)\n",
      "Current LR: 1.00e-05\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                        \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1 - Training Time: 1511.79s, Avg Loss: 1.34202, Acc: 34.77%, Resources: {'gpu_memory_allocated': 1059.95556640625, 'gpu_max_memory': 6711.02734375}\n",
      "Using temperature: 1.0000 for validation epoch 1\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1 Valid Aggregated: PROBS=(11593, 9), TARGETS=(11593,)\n",
      " Best F1 Threshold (PR): 0.1243, F1=0.4189\n",
      "Epoch 1 - Val Loss: 4.02770, Bin AUC: 0.7739, F1(T=0.12): 0.4129, MC AUC: 0.8334, MC Acc: 47.98%, MC F1: 0.1436, Val Time: 141.11s\n",
      "Epoch 1: Warm-up period, skipping ES.\n",
      "*** New Best Score: 0.649679 at Epoch 1 ***\n",
      "Epoch 1 completed in 1654.72s.\n",
      "\n",
      "===== Epoch 2/30 =====\n",
      "Runtime Check: 0.48 hours elapsed (Limit: 11.42 hours)\n",
      "Scheduler Phase: Initial Freeze (No Step)\n",
      "Current LR: 1.00e-05\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                        \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 2 - Training Time: 1516.87s, Avg Loss: 0.93109, Acc: 42.87%, Resources: {'gpu_memory_allocated': 1068.08056640625, 'gpu_max_memory': 6720.1103515625}\n",
      "Using temperature: 1.0000 for validation epoch 2\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 2 Valid Aggregated: PROBS=(11593, 9), TARGETS=(11593,)\n",
      " Best F1 Threshold (PR): 0.2093, F1=0.4903\n",
      "Epoch 2 - Val Loss: 3.79160, Bin AUC: 0.8256, F1(T=0.21): 0.4897, MC AUC: 0.8689, MC Acc: 54.52%, MC F1: 0.1937, Val Time: 138.80s\n",
      "Epoch 2: Warm-up period, skipping ES.\n",
      "*** New Best Score: 0.697184 at Epoch 2 ***\n",
      "Epoch 2 completed in 1657.66s.\n",
      "\n",
      "===== Epoch 3/30 =====\n",
      "Runtime Check: 0.94 hours elapsed (Limit: 11.42 hours)\n",
      "Scheduler Phase: Initial Freeze (No Step)\n",
      "Current LR: 1.00e-05\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                        \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 3 - Training Time: 1518.84s, Avg Loss: 0.84429, Acc: 47.36%, Resources: {'gpu_memory_allocated': 1068.08056640625, 'gpu_max_memory': 6720.1103515625}\n",
      "Using temperature: 1.0000 for validation epoch 3\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 3 Valid Aggregated: PROBS=(11593, 9), TARGETS=(11593,)\n",
      " Best F1 Threshold (PR): 0.3036, F1=0.5161\n",
      "Epoch 3 - Val Loss: 3.61428, Bin AUC: 0.8564, F1(T=0.30): 0.5082, MC AUC: 0.8855, MC Acc: 57.99%, MC F1: 0.2221, Val Time: 138.99s\n",
      "Epoch 3: Warm-up period, skipping ES.\n",
      "*** New Best Score: 0.724553 at Epoch 3 ***\n",
      "Epoch 3 completed in 1659.85s.\n",
      "\n",
      "===== Epoch 4/30 =====\n",
      "Runtime Check: 1.40 hours elapsed (Limit: 11.42 hours)\n",
      "Scheduler Phase: Initial Freeze (No Step)\n",
      "Current LR: 1.00e-05\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                        \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 4 - Training Time: 1519.08s, Avg Loss: 0.78688, Acc: 50.92%, Resources: {'gpu_memory_allocated': 1068.08056640625, 'gpu_max_memory': 6720.1103515625}\n",
      "Using temperature: 1.0000 for validation epoch 4\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 4 Valid Aggregated: PROBS=(11593, 9), TARGETS=(11593,)\n",
      " Best F1 Threshold (PR): 0.3111, F1=0.5303\n",
      "Epoch 4 - Val Loss: 3.64538, Bin AUC: 0.8691, F1(T=0.31): 0.5285, MC AUC: 0.8950, MC Acc: 60.32%, MC F1: 0.2755, Val Time: 140.02s\n",
      "Epoch 4: Warm-up period, skipping ES.\n",
      "*** New Best Score: 0.740042 at Epoch 4 ***\n",
      "Epoch 4 completed in 1661.11s.\n",
      "\n",
      "===== Epoch 5/30 =====\n",
      "Runtime Check: 1.86 hours elapsed (Limit: 11.42 hours)\n",
      "Scheduler Phase: Initial Freeze (No Step)\n",
      "Current LR: 1.00e-05\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                        \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 5 - Training Time: 1518.40s, Avg Loss: 0.73750, Acc: 54.27%, Resources: {'gpu_memory_allocated': 1068.08056640625, 'gpu_max_memory': 6720.1103515625}\n",
      "Using temperature: 1.0000 for validation epoch 5\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 5 Valid Aggregated: PROBS=(11593, 9), TARGETS=(11593,)\n",
      " Best F1 Threshold (PR): 0.3846, F1=0.5650\n",
      "Epoch 5 - Val Loss: 3.55689, Bin AUC: 0.8884, F1(T=0.38): 0.5569, MC AUC: 0.9018, MC Acc: 68.63%, MC F1: 0.3612, Val Time: 138.82s\n",
      "Epoch 5: Warm-up period, skipping ES.\n",
      "*** New Best Score: 0.751431 at Epoch 5 ***\n",
      "Epoch 5 completed in 1659.33s.\n",
      "\n",
      "===== Epoch 6/30 =====\n",
      "Runtime Check: 2.33 hours elapsed (Limit: 11.42 hours)\n",
      "Scheduler Phase: Initial Freeze (No Step)\n",
      "Current LR: 1.00e-05\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                        \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 6 - Training Time: 1516.68s, Avg Loss: 0.70675, Acc: 56.58%, Resources: {'gpu_memory_allocated': 1068.08056640625, 'gpu_max_memory': 6720.1103515625}\n",
      "Calibrating: Iterating through validation loader...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Running LBFGS optimizer for temperature...\n",
      "Optimal temperature found: 1.1382\n",
      "Using temperature: 1.1382 for validation epoch 6\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 6 Valid Aggregated: PROBS=(11593, 9), TARGETS=(11593,)\n",
      " Best F1 Threshold (PR): 0.3501, F1=0.5923\n",
      "Epoch 6 - Val Loss: 3.47804, Bin AUC: 0.9118, F1(T=0.35): 0.5850, MC AUC: 0.9152, MC Acc: 70.52%, MC F1: 0.3723, Val Time: 439.99s\n",
      "Epoch 6: Warm-up period, skipping ES.\n",
      "*** New Best Score: 0.782925 at Epoch 6 ***\n",
      "Epoch 6 completed in 1958.71s.\n",
      "\n",
      "===== Epoch 7/30 =====\n",
      "Runtime Check: 2.87 hours elapsed (Limit: 11.42 hours)\n",
      "Scheduler Phase: Starting Initial Warmup (Epochs 7 to 15)\n",
      "Current LR: 2.00e-05\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                        \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 7 - Training Time: 1515.55s, Avg Loss: 0.68956, Acc: 58.15%, Resources: {'gpu_memory_allocated': 1068.08056640625, 'gpu_max_memory': 6720.1103515625}\n",
      "Using temperature: 1.0000 for validation epoch 7\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 7 Valid Aggregated: PROBS=(11593, 9), TARGETS=(11593,)\n",
      " Best F1 Threshold (PR): 0.5310, F1=0.5667\n",
      "Epoch 7 - Val Loss: 3.39393, Bin AUC: 0.9031, F1(T=0.53): 0.5569, MC AUC: 0.9233, MC Acc: 71.35%, MC F1: 0.3960, Val Time: 139.72s\n",
      "Initial best score: 0.702101 @ E7, model saved to effnet_v2_m_384_ext_best.pth\n",
      "Epoch 7 completed in 1657.28s.\n",
      "\n",
      "===== Epoch 8/30 =====\n",
      "Runtime Check: 3.33 hours elapsed (Limit: 11.42 hours)\n",
      "Current LR: 3.00e-05\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                        \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 8 - Training Time: 1516.36s, Avg Loss: 0.68290, Acc: 59.82%, Resources: {'gpu_memory_allocated': 1068.08056640625, 'gpu_max_memory': 6720.1103515625}\n",
      "Using temperature: 1.0000 for validation epoch 8\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 8 Valid Aggregated: PROBS=(11593, 9), TARGETS=(11593,)\n",
      " Best F1 Threshold (PR): 0.4768, F1=0.5968\n",
      "Epoch 8 - Val Loss: 3.41690, Bin AUC: 0.9110, F1(T=0.48): 0.5896, MC AUC: 0.9219, MC Acc: 74.07%, MC F1: 0.4470, Val Time: 138.95s\n",
      "New best score: 0.720025 @ E8, model saved to effnet_v2_m_384_ext_best.pth\n",
      "*** New Best Score: 0.783350 at Epoch 8 ***\n",
      "Epoch 8 completed in 1658.12s.\n",
      "\n",
      "===== Epoch 9/30 =====\n",
      "Runtime Check: 3.79 hours elapsed (Limit: 11.42 hours)\n",
      "Current LR: 4.00e-05\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                        \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 9 - Training Time: 1515.78s, Avg Loss: 0.65379, Acc: 62.10%, Resources: {'gpu_memory_allocated': 1068.08056640625, 'gpu_max_memory': 6720.1103515625}\n",
      "Using temperature: 1.0000 for validation epoch 9\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 9 Valid Aggregated: PROBS=(11593, 9), TARGETS=(11593,)\n",
      " Best F1 Threshold (PR): 0.3802, F1=0.6366\n",
      "Epoch 9 - Val Loss: 3.25811, Bin AUC: 0.9239, F1(T=0.38): 0.6308, MC AUC: 0.9393, MC Acc: 74.24%, MC F1: 0.4762, Val Time: 138.91s\n",
      "New best score: 0.735784 @ E9, model saved to effnet_v2_m_384_ext_best.pth\n",
      "*** New Best Score: 0.805459 at Epoch 9 ***\n",
      "Epoch 9 completed in 1657.26s.\n",
      "\n",
      "===== Epoch 10/30 =====\n",
      "Runtime Check: 4.25 hours elapsed (Limit: 11.42 hours)\n",
      "Current LR: 5.00e-05\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                         \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 10 - Training Time: 1516.58s, Avg Loss: 0.64133, Acc: 63.36%, Resources: {'gpu_memory_allocated': 1068.08056640625, 'gpu_max_memory': 6720.1103515625}\n",
      "Using temperature: 1.0000 for validation epoch 10\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                 \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 10 Valid Aggregated: PROBS=(11593, 9), TARGETS=(11593,)\n",
      " Best F1 Threshold (PR): 0.4290, F1=0.6311\n",
      "Epoch 10 - Val Loss: 3.29619, Bin AUC: 0.9254, F1(T=0.43): 0.6269, MC AUC: 0.9408, MC Acc: 76.05%, MC F1: 0.4604, Val Time: 139.01s\n",
      "No improvement. Counter: 1/20\n",
      "Epoch 10 completed in 1656.78s.\n",
      "\n",
      "===== Epoch 11/30 =====\n",
      "Runtime Check: 4.71 hours elapsed (Limit: 11.42 hours)\n",
      "===== Epoch 11: Full Model Unlock & Optimizer Reconfiguration (LLRD Rate: 0.9) =====\n",
      " No parameters needed unlocking.\n",
      "  Applying Base LR: 1.0e-03, LR Adaptation Factor: 1.0000\n",
      "  Regularization Factor applied to Weight Decay:\n",
      "   - CNN WD:       0.010 -> 0.0100\n",
      "   - Transformer WD: 0.020 -> 0.0200\n",
      "   - Head/Meta WD:   0.050 -> 0.0500\n",
      "  Target Max Learning Rates:\n",
      "   - CNN Backbone (Max): 3.000e-04\n",
      "   - Transformer Backbone: 5.000e-04\n",
      "   - Fusion Layer:       1.000e-03\n",
      "   - Classifier Head(s): 1.000e-03\n",
      "    Group 'Transformer': 327 params, LR=5.00e-04, WD=0.02\n",
      "    Group 'Fusion': 4 params, LR=1.00e-03, WD=0.05\n",
      "    Group 'Classifier': 2 params, LR=1.00e-03, WD=0.05\n",
      "  Optimizer reconfiguring with 3 parameter groups.\n",
      "===== Optimizer Reconfigured Successfully =====\n",
      "Current LR: 5.00e-04\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                         \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 11 - Training Time: 1510.71s, Avg Loss: 1.19676, Acc: 32.99%, Resources: {'gpu_memory_allocated': 1734.97900390625, 'gpu_max_memory': 7387.0087890625}\n",
      "Calibrating: Iterating through validation loader...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Running LBFGS optimizer for temperature...\n",
      "Optimal temperature found: 1.4042\n",
      "Using temperature: 1.4042 for validation epoch 11\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                 \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 11 Valid Aggregated: PROBS=(11593, 9), TARGETS=(11593,)\n",
      " Best F1 Threshold (PR): 0.2032, F1=0.3736\n",
      "Epoch 11 - Val Loss: 4.35129, Bin AUC: 0.7350, F1(T=0.20): 0.3619, MC AUC: 0.8390, MC Acc: 40.49%, MC F1: 0.1044, Val Time: 438.70s\n",
      "No improvement. Counter: 2/20\n",
      "Epoch 11 completed in 1950.96s.\n",
      "\n",
      "===== Epoch 12/30 =====\n",
      "Runtime Check: 5.25 hours elapsed (Limit: 11.42 hours)\n",
      "Current LR: 5.00e-04\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                         \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 12 - Training Time: 1513.69s, Avg Loss: 1.01688, Acc: 39.89%, Resources: {'gpu_memory_allocated': 1734.97900390625, 'gpu_max_memory': 7387.0087890625}\n",
      "Using temperature: 1.0000 for validation epoch 12\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                 \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 12 Valid Aggregated: PROBS=(11593, 9), TARGETS=(11593,)\n",
      " Best F1 Threshold (PR): 0.2114, F1=0.4267\n",
      "Epoch 12 - Val Loss: 3.92517, Bin AUC: 0.8037, F1(T=0.21): 0.4221, MC AUC: 0.8518, MC Acc: 45.93%, MC F1: 0.2343, Val Time: 138.86s\n",
      "No improvement. Counter: 3/20\n",
      "Epoch 12 completed in 1653.79s.\n",
      "\n",
      "===== Epoch 13/30 =====\n",
      "Runtime Check: 5.71 hours elapsed (Limit: 11.42 hours)\n",
      "Current LR: 5.00e-04\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                         \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 13 - Training Time: 1512.68s, Avg Loss: 0.94783, Acc: 43.07%, Resources: {'gpu_memory_allocated': 1734.97900390625, 'gpu_max_memory': 7387.0087890625}\n",
      "Using temperature: 1.0000 for validation epoch 13\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                 \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 13 Valid Aggregated: PROBS=(11593, 9), TARGETS=(11593,)\n",
      " Best F1 Threshold (PR): 0.1845, F1=0.3431\n",
      "Epoch 13 - Val Loss: 3.87035, Bin AUC: 0.6764, F1(T=0.18): 0.3316, MC AUC: 0.8568, MC Acc: 49.77%, MC F1: 0.2027, Val Time: 138.76s\n",
      "No improvement. Counter: 4/20\n",
      "Epoch 13 completed in 1652.58s.\n",
      "\n",
      "===== Epoch 14/30 =====\n",
      "Runtime Check: 6.17 hours elapsed (Limit: 11.42 hours)\n",
      "Current LR: 5.00e-04\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                         \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 14 - Training Time: 1511.96s, Avg Loss: 0.87749, Acc: 46.46%, Resources: {'gpu_memory_allocated': 1734.97900390625, 'gpu_max_memory': 7387.0087890625}\n",
      "Using temperature: 1.0000 for validation epoch 14\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                 \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 14 Valid Aggregated: PROBS=(11593, 9), TARGETS=(11593,)\n",
      " Best F1 Threshold (PR): 0.1340, F1=0.5043\n",
      "Epoch 14 - Val Loss: 3.60691, Bin AUC: 0.8401, F1(T=0.13): 0.5014, MC AUC: 0.8921, MC Acc: 51.15%, MC F1: 0.2275, Val Time: 140.08s\n",
      "No improvement. Counter: 5/20\n",
      "Epoch 14 completed in 1653.28s.\n",
      "\n",
      "===== Epoch 15/30 =====\n",
      "Runtime Check: 6.63 hours elapsed (Limit: 11.42 hours)\n",
      "Current LR: 5.00e-04\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                         \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 15 - Training Time: 1509.74s, Avg Loss: 0.85837, Acc: 47.90%, Resources: {'gpu_memory_allocated': 1734.97900390625, 'gpu_max_memory': 7387.0087890625}\n",
      "Using temperature: 1.0000 for validation epoch 15\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                 \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 15 Valid Aggregated: PROBS=(11593, 9), TARGETS=(11593,)\n",
      " Best F1 Threshold (PR): 0.2063, F1=0.4582\n",
      "Epoch 15 - Val Loss: 3.64868, Bin AUC: 0.8098, F1(T=0.21): 0.4486, MC AUC: 0.8844, MC Acc: 56.70%, MC F1: 0.2638, Val Time: 138.90s\n",
      "No improvement. Counter: 6/20\n",
      "Epoch 15 completed in 1649.83s.\n",
      "\n",
      "===== Epoch 16/30 =====\n",
      "Runtime Check: 7.09 hours elapsed (Limit: 11.42 hours)\n",
      "Scheduler Phase: Stepping Existing Post-Warmup Scheduler\n",
      "Current LR: 5.00e-04\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                         \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 16 - Training Time: 1508.73s, Avg Loss: 0.82505, Acc: 49.55%, Resources: {'gpu_memory_allocated': 1734.97900390625, 'gpu_max_memory': 7387.0087890625}\n",
      "Calibrating: Iterating through validation loader...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Running LBFGS optimizer for temperature...\n",
      "Optimal temperature found: 1.1836\n",
      "Using temperature: 1.1836 for validation epoch 16\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                 \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 16 Valid Aggregated: PROBS=(11593, 9), TARGETS=(11593,)\n",
      " Best F1 Threshold (PR): 0.2063, F1=0.4731\n",
      "Epoch 16 - Val Loss: 3.55503, Bin AUC: 0.8274, F1(T=0.21): 0.4656, MC AUC: 0.8931, MC Acc: 55.27%, MC F1: 0.2562, Val Time: 437.51s\n",
      "No improvement. Counter: 7/20\n",
      "Warn: Recreating Plateau scheduler due to optimizer mismatch.\n",
      "Epoch 16 completed in 1947.50s.\n",
      "\n",
      "===== Epoch 17/30 =====\n",
      "Runtime Check: 7.63 hours elapsed (Limit: 11.42 hours)\n",
      "Scheduler Phase: Stepping Existing Post-Warmup Scheduler\n",
      "Current LR: 5.00e-04\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                         \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 17 - Training Time: 1509.32s, Avg Loss: 0.82256, Acc: 50.49%, Resources: {'gpu_memory_allocated': 1734.97900390625, 'gpu_max_memory': 7387.0087890625}\n",
      "Using temperature: 1.0000 for validation epoch 17\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                 \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 17 Valid Aggregated: PROBS=(11593, 9), TARGETS=(11593,)\n",
      " Best F1 Threshold (PR): 0.4134, F1=0.4706\n",
      "Epoch 17 - Val Loss: 3.70344, Bin AUC: 0.8153, F1(T=0.41): 0.4545, MC AUC: 0.8903, MC Acc: 56.37%, MC F1: 0.2372, Val Time: 139.94s\n",
      "No improvement. Counter: 8/20\n",
      "Epoch 17 completed in 1650.46s.\n",
      "\n",
      "===== Epoch 18/30 =====\n",
      "Runtime Check: 8.09 hours elapsed (Limit: 11.42 hours)\n",
      "Scheduler Phase: Stepping Existing Post-Warmup Scheduler\n",
      "Current LR: 5.00e-04\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                         \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 18 - Training Time: 1511.38s, Avg Loss: 0.77465, Acc: 52.97%, Resources: {'gpu_memory_allocated': 1734.97900390625, 'gpu_max_memory': 7387.0087890625}\n",
      "Using temperature: 1.0000 for validation epoch 18\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                 \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 18 Valid Aggregated: PROBS=(11593, 9), TARGETS=(11593,)\n",
      " Best F1 Threshold (PR): 0.3134, F1=0.5096\n",
      "Epoch 18 - Val Loss: 3.54875, Bin AUC: 0.8508, F1(T=0.31): 0.5019, MC AUC: 0.8969, MC Acc: 64.38%, MC F1: 0.3600, Val Time: 138.65s\n",
      "No improvement. Counter: 9/20\n",
      "Epoch 18 completed in 1651.62s.\n",
      "\n",
      "===== Epoch 19/30 =====\n",
      "Runtime Check: 8.55 hours elapsed (Limit: 11.42 hours)\n",
      "Scheduler Phase: Stepping Existing Post-Warmup Scheduler\n",
      "Current LR: 5.00e-04\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                         \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 19 - Training Time: 1511.76s, Avg Loss: 0.79105, Acc: 52.32%, Resources: {'gpu_memory_allocated': 1734.97900390625, 'gpu_max_memory': 7387.0087890625}\n",
      "Using temperature: 1.0000 for validation epoch 19\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                 \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 19 Valid Aggregated: PROBS=(11593, 9), TARGETS=(11593,)\n",
      " Best F1 Threshold (PR): 0.2886, F1=0.4200\n",
      "Epoch 19 - Val Loss: 3.70069, Bin AUC: 0.8046, F1(T=0.29): 0.4048, MC AUC: 0.8873, MC Acc: 54.93%, MC F1: 0.2624, Val Time: 139.23s\n",
      "No improvement. Counter: 10/20\n",
      "Epoch 19 completed in 1652.14s.\n",
      "\n",
      "===== Epoch 20/30 =====\n",
      "Runtime Check: 9.01 hours elapsed (Limit: 11.42 hours)\n",
      "Scheduler Phase: Stepping Existing Post-Warmup Scheduler\n",
      "Current LR: 5.00e-04\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                         \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 20 - Training Time: 1510.27s, Avg Loss: 0.74754, Acc: 54.67%, Resources: {'gpu_memory_allocated': 1734.97900390625, 'gpu_max_memory': 7387.0087890625}\n",
      "Using temperature: 1.0000 for validation epoch 20\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                 \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 20 Valid Aggregated: PROBS=(11593, 9), TARGETS=(11593,)\n",
      " Best F1 Threshold (PR): 0.2260, F1=0.4717\n",
      "Epoch 20 - Val Loss: 3.53517, Bin AUC: 0.8464, F1(T=0.23): 0.4633, MC AUC: 0.8963, MC Acc: 58.01%, MC F1: 0.2633, Val Time: 138.49s\n",
      "No improvement. Counter: 11/20\n",
      "Epoch 20 completed in 1650.35s.\n",
      "\n",
      "===== Epoch 21/30 =====\n",
      "Runtime Check: 9.47 hours elapsed (Limit: 11.42 hours)\n",
      "Scheduler Phase: Stepping Existing Post-Warmup Scheduler\n",
      "Current LR: 5.00e-04\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                         \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 21 - Training Time: 1506.94s, Avg Loss: 0.74106, Acc: 55.32%, Resources: {'gpu_memory_allocated': 1734.97900390625, 'gpu_max_memory': 7387.0087890625}\n",
      "Calibrating: Iterating through validation loader...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Running LBFGS optimizer for temperature...\n",
      "Optimal temperature found: 1.1682\n",
      "Using temperature: 1.1682 for validation epoch 21\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                 \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 21 Valid Aggregated: PROBS=(11593, 9), TARGETS=(11593,)\n",
      " Best F1 Threshold (PR): 0.2281, F1=0.4700\n",
      "Epoch 21 - Val Loss: 3.54533, Bin AUC: 0.8343, F1(T=0.23): 0.4591, MC AUC: 0.8991, MC Acc: 66.43%, MC F1: 0.3751, Val Time: 438.44s\n",
      "No improvement. Counter: 12/20\n",
      "Epoch 21 completed in 1946.56s.\n",
      "\n",
      "===== Epoch 22/30 =====\n",
      "Runtime Check: 10.01 hours elapsed (Limit: 11.42 hours)\n",
      "Scheduler Phase: Stepping Existing Post-Warmup Scheduler\n",
      "Current LR: 5.00e-04\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                         \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 22 - Training Time: 1504.22s, Avg Loss: 0.74582, Acc: 55.06%, Resources: {'gpu_memory_allocated': 1734.97900390625, 'gpu_max_memory': 7387.0087890625}\n",
      "Using temperature: 1.0000 for validation epoch 22\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                 \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 22 Valid Aggregated: PROBS=(11593, 9), TARGETS=(11593,)\n",
      " Best F1 Threshold (PR): 0.3619, F1=0.5414\n",
      "Epoch 22 - Val Loss: 3.38217, Bin AUC: 0.8770, F1(T=0.36): 0.5285, MC AUC: 0.9217, MC Acc: 68.19%, MC F1: 0.4123, Val Time: 138.99s\n",
      "No improvement. Counter: 13/20\n",
      "Epoch 22 completed in 1644.39s.\n",
      "\n",
      "===== Epoch 23/30 =====\n",
      "Runtime Check: 10.46 hours elapsed (Limit: 11.42 hours)\n",
      "Scheduler Phase: Stepping Existing Post-Warmup Scheduler\n",
      "Current LR: 5.00e-04\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                         \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 23 - Training Time: 1502.73s, Avg Loss: 0.71847, Acc: 56.73%, Resources: {'gpu_memory_allocated': 1734.97900390625, 'gpu_max_memory': 7387.0087890625}\n",
      "Using temperature: 1.0000 for validation epoch 23\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                 \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 23 Valid Aggregated: PROBS=(11593, 9), TARGETS=(11593,)\n",
      " Best F1 Threshold (PR): 0.2818, F1=0.5173\n",
      "Epoch 23 - Val Loss: 3.63803, Bin AUC: 0.8513, F1(T=0.28): 0.4947, MC AUC: 0.8944, MC Acc: 61.45%, MC F1: 0.3104, Val Time: 139.04s\n",
      "No improvement. Counter: 14/20\n",
      "Epoch 23 completed in 1642.98s.\n",
      "\n",
      "===== Epoch 24/30 =====\n",
      "Runtime Check: 10.92 hours elapsed (Limit: 11.42 hours)\n",
      "Scheduler Phase: Stepping Existing Post-Warmup Scheduler\n",
      "Current LR: 5.00e-04\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                         \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 24 - Training Time: 1504.43s, Avg Loss: 0.71577, Acc: 57.10%, Resources: {'gpu_memory_allocated': 1734.97900390625, 'gpu_max_memory': 7387.0087890625}\n",
      "Using temperature: 1.0000 for validation epoch 24\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                 \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 24 Valid Aggregated: PROBS=(11593, 9), TARGETS=(11593,)\n",
      " Best F1 Threshold (PR): 0.3060, F1=0.4930\n",
      "Epoch 24 - Val Loss: 3.50156, Bin AUC: 0.8259, F1(T=0.31): 0.4838, MC AUC: 0.9039, MC Acc: 61.02%, MC F1: 0.2657, Val Time: 139.92s\n",
      "No improvement. Counter: 15/20\n",
      "Epoch 24 completed in 1645.52s.\n",
      "\n",
      "===== Epoch 25/30 =====\n",
      "Runtime Check: 11.38 hours elapsed (Limit: 11.42 hours)\n",
      "Scheduler Phase: Stepping Existing Post-Warmup Scheduler\n",
      "Current LR: 5.00e-04\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                         \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 25 - Training Time: 1505.38s, Avg Loss: 0.70217, Acc: 57.93%, Resources: {'gpu_memory_allocated': 1734.97900390625, 'gpu_max_memory': 7387.0087890625}\n",
      "Using temperature: 1.0000 for validation epoch 25\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                 \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 25 Valid Aggregated: PROBS=(11593, 9), TARGETS=(11593,)\n",
      " Best F1 Threshold (PR): 0.4204, F1=0.5352\n",
      "Epoch 25 - Val Loss: 3.40810, Bin AUC: 0.8761, F1(T=0.42): 0.5134, MC AUC: 0.9077, MC Acc: 61.93%, MC F1: 0.3292, Val Time: 139.08s\n",
      "No improvement. Counter: 16/20\n",
      "Epoch 25 completed in 1645.61s.\n",
      "\n",
      "===== Epoch 26/30 =====\n",
      "\n",
      "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n",
      "!!! RUNTIME LIMIT REACHED (42607s / 41100s) !!!\n",
      "!!! Stopping training loop before starting Epoch 26.   !!!\n",
      "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n",
      "\n",
      "\n",
      "===== Training Finished / Stopped (Epoch 26/30, Reason: Runtime Limit) =====\n",
      "Total time: 42528.58s\n",
      "Using metrics from Best Epoch: 9\n",
      "\n",
      "Final Summary Metrics:\n",
      "  - final_best_epoch_logged: 9\n",
      "  - final_binary_acc: 93.78935564564823\n",
      "  - final_binary_auc: 0.9238882064819336\n",
      "  - final_binary_f1: 0.6307692307692306\n",
      "  - final_binary_precision: 0.6598712446351931\n",
      "  - final_binary_recall: 0.6041257367387033\n",
      "  - final_binary_specificity: 0.9700236406619386\n",
      "  - final_composite_score: 0.8054593809907677\n",
      "  - final_epoch: 9\n",
      "  - final_last_epoch_completed: 26\n",
      "  - final_multiclass_acc: 74.24087524414062\n",
      "  - final_multiclass_auc: 0.9392615556716919\n",
      "  - final_multiclass_f1: 0.47621312737464905\n",
      "  - final_temperature: 1.0\n",
      "  - final_total_training_time_sec: 42528.58\n",
      "  - final_val_loss_raw: 3.258109036613913\n",
      "\n",
      "Final Best Model saved at: effnet_v2_m_384_ext_best.pth\n",
      "Logged FINAL model artifact to WandB.\n",
      " Saved validation IDs (11593) to best_valid_ids_E9_cq19o9b4.csv\n",
      " Saved best predictions ((11593, 9)) to best_probs_E9_cq19o9b4.npy\n",
      " Saved best targets ((11593,)) to best_tgts_E9_cq19o9b4.npy\n",
      "Logged final predictions artifact (including validation IDs).\n",
      "--- Exiting Adaptive Training Run ---\n",
      "\n",
      "Total Run Time (Training): 42534.98s\n",
      "\n",
      "Final Run Metrics Summary (from run_single_model):\n",
      "  - best_epoch_logged: 9\n",
      "  - binary_acc: 93.78935564564823\n",
      "  - binary_auc: 0.9238882064819336\n",
      "  - binary_f1: 0.6307692307692306\n",
      "  - binary_precision: 0.6598712446351931\n",
      "  - binary_recall: 0.6041257367387033\n",
      "  - binary_specificity: 0.9700236406619386\n",
      "  - composite_score: 0.8054593809907677\n",
      "  - epoch: 9\n",
      "  - last_epoch_completed: 26\n",
      "  - multiclass_acc: 74.24087524414062\n",
      "  - multiclass_auc: 0.9392615556716919\n",
      "  - multiclass_f1: 0.47621312737464905\n",
      "  - temperature: 1.0\n",
      "  - total_training_time_sec: 42528.58\n",
      "  - val_loss_raw: 3.258109036613913\n",
      "\n",
      "Prerequisites for Grad-CAM seem available.\n"
     ]
    }
   ],
   "source": [
    "import time\n",
    "if __name__ == \"__main__\":\n",
    "\n",
    "    # Use the globally defined configuration directly\n",
    "    print(f\"Starting run: {model_type} / {cnn_backbone_name}\" + (f\" / {transformer_backbone_name}\" if model_type == 'hybrid_swin' else \"\"))\n",
    "    start_time = time.time()\n",
    "\n",
    "    # --- Call the modified function using GLOBAL variables ---\n",
    "    (model, best_model_state, final_metrics, train_losses, val_losses,\n",
    "     best_PROBS, best_TARGETS,\n",
    "     df_valid_set, diagnosis2idx,\n",
    "     best_epoch_num, kernel_type_ret, early_stopping,\n",
    "     model_type_ret, cnn_backbone_ret, n_meta_features_ret,\n",
    "     image_size_ret, out_dim_ret,\n",
    "     lr_adaptation_factor_ret, regularization_factor_ret,\n",
    "     wandb_run_ret\n",
    "    ) = run_single_model(\n",
    "        model_type=model_type, # Use global\n",
    "        cnn_backbone_name=cnn_backbone_name, # Use global\n",
    "        # --- CORRECTED LINE ---\n",
    "        transformer_backbone_name=transformer_backbone_name if model_type in ['hybrid_swin', 'swin_only'] else None,\n",
    "        # --- END CORRECTION ---\n",
    "        use_meta_flag=use_meta, # Use global\n",
    "        use_external_flag=use_external, # Use global\n",
    "        target_total_epochs=target_total_epochs # Use global\n",
    "        # DEBUG flag is used internally by run_single_model based on global value\n",
    "    )\n",
    "    # --- END Function Call ---\n",
    "\n",
    "    total_time = time.time() - start_time\n",
    "    print(f\"\\nTotal Run Time (Training): {total_time:.2f}s\")\n",
    "    print(\"\\nFinal Run Metrics Summary (from run_single_model):\")\n",
    "    if final_metrics:\n",
    "        # Print scalar metrics nicely\n",
    "        scalar_metrics = {k: v for k, v in final_metrics.items() if isinstance(v, (int, float, bool, str))}\n",
    "        for k, v in sorted(scalar_metrics.items()):\n",
    "            print(f\"  - {k}: {v}\")\n",
    "    else:\n",
    "        print(\"  No final metrics available.\")\n",
    "\n",
    "# Grad-CAM prerequisites check\n",
    "    if 'df_valid_set' in locals() and 'best_model_state' in locals():\n",
    "        print(\"\\nPrerequisites for Grad-CAM seem available.\")\n",
    "    else:\n",
    "        print(\"\\nWarning: Prerequisites for Grad-CAM might be missing.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8b480915",
   "metadata": {
    "papermill": {
     "duration": 7.232809,
     "end_time": "2025-06-17T16:22:41.429844",
     "exception": false,
     "start_time": "2025-06-17T16:22:34.197035",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Model Calibration Visualization (Reliability Diagram)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "0c651352",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-17T16:22:55.813605Z",
     "iopub.status.busy": "2025-06-17T16:22:55.813251Z",
     "iopub.status.idle": "2025-06-17T16:22:56.292277Z",
     "shell.execute_reply": "2025-06-17T16:22:56.291427Z"
    },
    "papermill": {
     "duration": 7.863034,
     "end_time": "2025-06-17T16:22:56.293461",
     "exception": false,
     "start_time": "2025-06-17T16:22:48.430427",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "===== Starting Model Calibration Visualization =====\n",
      "Prerequisites met. Generating calibration plot for Melanoma class (index 6) from Epoch 9.\n",
      "  Prepared data: y_prob_melanoma shape (11593,), y_true_binary shape (11593,)\n",
      "  Number of positive (melanoma) samples in best validation set: 1018\n",
      "  Calculated calibration curve points (True Probability, Predicted Probability):\n",
      "    0.0200, 0.0124\n",
      "    0.1363, 0.1438\n",
      "    0.2075, 0.2447\n",
      "    0.3184, 0.3472\n",
      "    0.4010, 0.4462\n",
      "    0.5299, 0.5476\n",
      "    0.8214, 0.6551\n",
      "    0.9793, 0.7176\n",
      "  Saved calibration plot locally: v2m_384_ext_calibration_plot_epoch9.png\n"
     ]
    },
    {
     "data": {
      "image/png": "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DkeFaqjoh4ciRXWV9fsr+oBUWv0VFRYWhsPhoKCgoMxvywcNGsSXX34JOBsHM2bM4I9//CO33HILmzdvplatWgCucyfs2bOHPXv2lPmc58+fr1Stlc14RXPrTr/61a+YO3cu77//Pm+88QbJycl88cUXXH/99bRp06Zan6voA3RpfwMXOnjwIN27dyczM5N+/foxbNgwoqKisNvtrFmzhrVr1xb73Rb9bZW2utTFer5iY2PLnFt0xx13sGTJEtq0acOoUaOIjY0lKCiI9PR03n777VJf24v9rV7surJ6Q4vOn1CeZY7feuutYr044Pww765zmJT1e23QoAEJCQlkZWVRt27dix47bDYbDRo0ICkpybWtKP8VWaq7Oo6R99xzD40bN+b111/ns88+w+Fw0K1bN1atWsVrr73Gvn37iI2NLXdNIkXUsBD5hV69erFmzRpWrVrl+vB9KSkpKbzzzjtcccUVbNq0qdgb48mTJ0v99rgyTp06VeIbwlOnTgGUeu6Lsj5E/N///R95eXmsX7++xLee3333XZlDFSoiKioKwzBITU0t8QaVkpKCaZqlvkF6g6K6in63v1Q0XK466i/60Hn27NlLLhZQdPvHH3+cjIwMXn75ZZ555hnXhOWiekaMGMEnn3xS5douVJWMVzS37tS3b1/atWvHzJkzeeWVV5g2bRoOh6PaJm0XMQyDdevWAbgWQijLm2++SVpaGrNmzXKdr6TIAw88UGI54aK/rdOnT5dotJSVWSj7eLBlyxaWLFnCoEGDWLZsWbEhUd99912piyy4Q1HD+FINMaBaVomriLJ+r6dOncJms7l6HC88dhT1MBUxTZNTp04VO24ULfSQlJTk9hM7/tJNN93ETTfdVGL7+PHjsdvtXH311TVaj/gG9XOJ/MLEiRMJCAjg3//+t2voSFmKvsU7fPgwpmkyYMCAEt+2rV+/vtpqK+2xiraVNj63LIcOHaJOnTolGhXZ2dmupSIvVPRBoyI9BkX1/HJZzQu3eeuJqNq1a0doaChbtmwhOzu7xPWl1V+Z3xHgGpqyf//+Ct3v6aefpnHjxvzzn/90fchq3749UVFRbN26tdrPLl6VjFdXbssjICDgkq/B/fffT2pqKosXL+bDDz+kdu3arhWrqsusWbM4evQonTp14vLLL7/obQ8dOgRQYuUn0zRLncfTuXNngFKv27hxY4VrLXr+oUOHlphnUZ3Hr0vZv38/TZo0cQ2J8ial/R6OHj3K8ePHufzyy11zjy523Pv+++/Jzc0tdtwoGq761VdfVX/RlfDtt9+SkJDA4MGDLXeiVvEOaliI/EKrVq144oknOH36NDfddBNHjhwpcZvc3FymTJniWkO/6JupjRs3FhtznpiYyFNPPVVttb300kvFho4UfWtts9lck/fKo3nz5qSlpRUbLuNwOHj88cdLbUwVvdEfP3683M9RVM+LL75YbMhQRkaG69vtitRck4KDgxkzZgynT5/m1VdfLXbdl19+yYoVK2jVqlWx8eyV+R0BXH/99YDzQ0dFhIWF8cc//pGCggLX8pyBgYE8+OCDHD16lMcff7zUxsXu3bsrNTm2KhmvrtyWR506dTh9+nSpE3CLTJgwgdDQUB577DEOHz7M+PHjq20ZY4fDwbRp03jwwQcJCAhgypQpl1zauOh3+8ulQv/yl7+UOGcKwF133QXAn//8Z9fwIXD2HFWmd6Gs59+zZ0+J/LvLsWPHOHnypFvOIl8dZs6cyY8//uj62TRNnn76aRwOR7FzhowdO5bAwECmTJlSbC5Jfn4+f/zjHwGK3X7ChAnUqlWLv/3tb6XOObtw2FR1Km0YZ3JyMvfeey+BgYFeueSvWIOGQomU4uWXXyY3N5c333yTtm3b0r9/fzp27EhQUBBHjhxh5cqVnDlzxnUyoaLVWxYuXEjXrl254YYbOHXqFEuXLuWGG25wfSNYVW3atKFjx47FzgeQmJjI7373O7p27Vrux3n44Yf56quv6N27NyNHjiQ0NJQ1a9aQlJRE3759S3zb1rNnT8LCwnjrrbdIS0tzDVX45YpJF+rTpw8PP/wwU6dOddVsmqar5kceecRrP0QArnMzvPzyy2zcuJEePXqQkJDAggULCA8PZ9q0acUmN/bv35833niD+++/nxEjRhAREUHz5s0ZP378RZ/nhhtuIDIykq+//po//OEPFarx/vvv57XXXmPmzJk8/fTTrtWgfvjhB/7+97+zbNky+vTpQ2xsLElJSezatYudO3eyadOmCo+frkrGqyu35dG/f3+2bt3KTTfdxHXXXUdwcDB9+vQplrU6depw5513MmvWLIBKD4NauXKlqwGTnZ1NYmIi69atIykpiTp16jBr1qxSV2X7pQceeIBp06YxYsQIRo4cSd26dfnuu+/44YcfGDp0KMuWLSt2+wEDBjB27Fg++ugjOnXqxK233kpeXh7z58+nR48eLFmypEITb7t370737t2ZP38+J06c4JprruHYsWN8/vnnDB06tNqH1ZXm66+/BpznzakJ77//vmve0i9dc801DB48uNi2QYMG0bNnT0aPHk39+vVZtWoVW7du5ZprruHhhx923a5ly5a89tpr/P73v+eKK65g5MiRREREsGTJEvbv38/w4cOLDXeLjY1l5syZjB49mu7du3PLLbfQtm1bTp8+zffff098fDyLFy+u9v3/+9//zuzZs+nduzexsbEcP36czz77jOzsbD744AMNg5LK88wqtyLWsGXLFnPy5Mlmq1atzLCwMDMkJMSMj483x44dW+L8EFlZWebvf/97Mz4+3gwJCTFbt25tvvTSS2Z+fn6p5wSozHkscnJyzCeeeMKMi4szg4ODzbZt25p///vfi60Vb5qXPu+EaZrmJ598Yl599dVmeHi4Wa9ePXPkyJHmoUOHyjwfw7Jly8xu3bqZYWFhrnXOL7YvRT788EOzW7duZnh4uBkeHm5269bN/PDDD0vcrqzzElzs91KWss5jUZbSXh/TNM3U1FTzkUceMZs3b24GBQWZ9erVM++44w5z165dpT7O66+/brZu3doMCgoq8zFL8+CDD5oBAQFmcnJyse0XO49FkalTp5qAOX78eNe2wsJC87333jN79eplRkVFmSEhIWazZs3MwYMHm//617/Mc+fOuW5bkfNYVDTjFc1tdZzHIisry7zvvvvMRo0amQEBAWVmquhcENdcc03JX+olFP19Ff2z2WxmrVq1zPj4eHPYsGHm1KlTzbNnz5Z637J+36tXrzZ79eplRkZGmjExMeaQIUPMbdu2lXn7goIC86WXXjJbtGhhBgcHm5dddpn5yiuvmN9//70JmI8++mix21/s/B6maZopKSnm5MmTzcaNG5uhoaFmp06dzHfeecc8fPhwmefFKOvxysr+xf6O+/btW+7ziFRF0bHhYv8u/N1d+Pv/z3/+Y15++eVmSEiI2ahRI/PRRx81MzMzS32ezz77zLz++uvNyMhIMyQkxOzUqZP5t7/9rdg5Py60fft2c+TIkWaDBg3MoKAgs1GjRuZNN91kLl261HWbix3XL3b8LM2qVavMAQMGmLGxsWZQUJDZsGFDc9SoUaWeS0OkImymqXO2i4h40v79++nYsSMvvPACf/rTnzxdjl944403+MMf/sAHH3zgOk+KL3j//fe57777+Oc//8mDDz7o6XLK5cCBA7Rt25YXXnih2HkUvMELL7zAiy++yOrVq0tdQlZEitMcCxERD2vbti333nsvb775JllZWZ4ux+fl5ubyj3/8g9q1azN69GhPl1MpJ0+e5JffCyYlJfHyyy8TEBDAzTff7KHKKu7Pf/4zjRo14ve//72nSxGRKtIcCxERL/Diiy+61sQv6yRmUjUbNmxg7dq1rFixgqNHj/Lqq6+W65wJ3ugvf/kLy5Yt47rrriM2NpZjx46xdOlSsrKyeOGFFy55gjlvUVBQQNu2bZk4cSIRERGeLkdEqkgNCxERLxAbG+taZUzcY+XKlbz44ovUq1ePxx57jMcff9zTJVXa4MGD2bt3L8uWLSMtLY3Q0FCuuOIKfv3rXzN27FhPl1duQUFBF10EQkSsRXMsRERERESkyjTHQkREREREqkwNCxERERERqTI1LEREREREpMrUsBARsTDTNPniiy948MEHueKKK4iOjiY8PJzOnTvzyiuvuM4M7Wnff/89EyZMoGPHjtSpU4fQ0FBatWrFqFGj2Lp1a6n3MU2TRYsW0a9fPxo1akR4eDht27blV7/6FYcPH77kcx4+fJhatWphs9l44IEHqnuXqsULL7yAzWYrcbZ7ERErUsNCRMTC8vLyGDJkCNOmTaNx48bcf//93HPPPeTk5PCnP/2JPn36kJ2d7ekyWb9+PV9//TVt2rRh3Lhx/Pa3v+Xqq6/m888/p3v37syaNavEfR5//HFGjBjB/v37ufXWW3n44Ydp0aIF//nPf7jyyivZvXt3mc9nGAYTJ0504x6JiMgvablZERELCwgI4OWXX+bXv/41tWvXdm0vKChgxIgRLFmyhHfeeYc//OEPHqwSHnrooVKXd929ezfdunXj8ccfZ9y4cdhsNsB5Ari33nqL5s2bs3PnTqKjo133efPNN/nd737HlClT+PDDD0t9vjfffJNNmzbx17/+lccee8w9OyUiIsWox0JExMusX78em83G5MmTS70+JSWFoKAgevXqRVBQEH/605+KNSrAeX6Ap556CoC1a9cWu2769OnYbDamT5/OkiVL6NGjB+Hh4TRp0oRnn30WwzAAmDFjBp07dyYsLIxmzZrx17/+tdL7FBoaWur2jh070r59e1JSUsjMzHRtT0hIwDAMevXqVaxRAbjOKp2amlrqY+7bt49nnnmGp556iiuvvLLSNV8oPz+fKVOmcPXVVxMREUFkZCTXXXcdn3/+ebHb/eUvfylz6FXRdQ8++CAAffv25cUXXwSgX79+2Gw2bDYb8fHx1VKziEhNU4+FiIiX6d27N/Hx8SxcuJB//vOfJT6Uf/zxxxQWFjJ+/PiLPk5QUBAAgYGlH+o//fRTvvrqK2699VZ69erFsmXLePnllzFNk+joaF5++WWGDx9O3759WbhwIU888QQNGjTg7rvvrp4dBQ4dOsT+/fuJi4sr1oBo3bo1wcHBfPvtt2RmZhIVFeW6bunSpQDccMMNJR7P4XAwYcIEWrduzTPPPMPGjRurXGNeXh6DBw9mzZo1XHnlldxzzz0UFBSwbNkyhg8fztSpU3nooYcAeOKJJ/j666957733GDx4MLfeeisAmzdv5rnnnqNDhw5MmTIFwDVUa+3atUyYMMHVoIiJialyzSIiHmGKiIjXeeaZZ0zAnDdvXonrunTpYgYHB5tnzpy56GM8+OCDJmC+8847xbZPmzbNBMygoCBz8+bNru2ZmZlmbGysGR4ebjZs2NA8dOiQ67pjx46ZwcHBZqdOnaq0X99//735/PPPm08//bR51113mZGRkWZ4eLi5bNmyEredMmWKabPZzEaNGpkPPPCA+cQTT5iDBg0yg4KCzF//+tdmQUFBifu89NJLZmBgoLl161bTNE1z9erVJmD+6le/qnTNTz/9tAmYzz77rGkYhmt7Zmam2bVrVzM4ONhMSkpybU9MTDTr1q1r1qlTx0xMTDQzMzPNli1bmiEhIebOnTuLPfbzzz9vAubq1asrXZ+IiLdQw0JExAvt37/fBMxhw4YV2753714TMG+99daL3n/58uWm3W4327dvb+bm5ha7rqhhMWnSpBL3mzx5sgmYL774Yonr+vfvbwYEBJT6gb68pk6dagKufw0aNDBXrFhR5u3nzZtnRkZGFrtP7969zQ0bNpS47Y4dO8ygoCDzqaeecm2rasPC4XCYtWvXNlu2bFmsUVHk888/NwFz6tSpxbYvXrzYBMy+ffua48aNMwHz7bffLnF/NSxExJdoKJSIiBdq06YN3bt358svv+T06dPUq1cPgNmzZwNcdBjUli1bGDVqFNHR0SxYsICQkJBSb1fa/INGjRpd9DqHw8GpU6do0qRJBffI6aGHHuKhhx4iJyeHAwcOMGXKFG666SZee+21EpO7//znP/Pyyy/z5z//mXHjxhETE8OOHTt47LHHXMOzbrnlFsA5B2LChAm0atWK559/vlK1lWb//v2kpaXRuHFj13yICxXN89i3b1+x7cOHD+eBBx7g3XffBWDIkCE88sgj1VaXiIg3UsNCRMRLjR8/ns2bNzNv3jx+85vfYJomc+bMoXbt2gwdOrTU+2zdupUbb7wRu93OihUruPzyy8t8/AvnLRQpmo9xsesKCgoqszvFhIWFccUVVzB9+nRSU1P54x//yODBg+nYsSMAK1eu5Pnnn+exxx7jySefdN2vd+/eLFmyhMsuu4zf//73robFq6++yq5du9i4cWOZDanKOHv2LAB79uxhz549Zd7u/PnzJbbddtttroZF0RwMERFfplWhRES81OjRowkKCnL1Uqxbt46jR48ycuTIUj88b926lYEDB2IYBitWrKBbt241XXKl3HjjjRiGwfr1613bvvjiC8C5WtIvNWzYkHbt2nHw4EHOnTsHwPbt2zEMg2uuuca1upLNZnPd/7333sNms7kmU5dXUQNrxIgRmM7hw6X+mzZtWrH7paenc9999xEREUFoaCgPP/wwWVlZFXpuERGrUY+FiIiXqlevHoMHD2bJkiUcPHjQ1cAYN25cidsWNSocDgcrVqygR48eNV1upSUnJwP/W8UKnEOboOwlZVNTU7Hb7a77DBw40DVc7EInTpxg+fLltGvXjl69enHVVVdVqLb27dsTFRXF1q1bKSgoKFbjxdx///0cO3aM999/n5ycHB5++GF+85vfMHPmzGK3CwgIAJyrWYmIWJ0aFiIiXmz8+PEsWbKE999/nwULFtCiRQt69epV7Dbbtm1j4MCBFBYW8uWXX9KzZ08PVVu2rVu30rVr1xLbd+zYwbvvvktQUBADBgxwbe/Vqxf/+Mc/mDJlCiNGjCi2FO27775LYmIivXr1cvXc/OY3vyn1edesWcPy5cu5/vrrXcOSKiIwMJAHH3zQNQfkjTfeKNG42L17N7GxscTGxgLwwQcfsGDBAu68807uueceAFasWMGsWbMYPHgwY8eOdd23Tp06ABw/frzCtYmIeBs1LEREvNiwYcOIjo5mypQpFBQU8Mgjj7jOTg3OOQADBw4kPT2dwYMH8/XXX/P1118Xe4yYmBh++9vf1nDlxd1xxx0EBgbSpUsXmjVrRn5+Pvv37+frr7/GNE3efvvtYieGu/POO/nXv/7FunXraNOmDbfccgsxMTH88MMPfPPNN4SFhbnOB+FuL774Ij/88AN///vfWbZsGX369CE2NpakpCR27drFzp072bRpE7Gxsfz88888+uijxMXF8e9//9v1GB9++CFXXHEFDz74ID179qRFixbA/06M9/TTT7Nnzx6io6OJiYnRnAwRsSaPrUclIiLlcu+997qWWt2/f3+x644cOVJsKdbS/jVv3rzYfYqWm502bVqJ57rY8qcTJkwwAfPIkSMV3of33nvPHDZsmNmsWTMzLCzMDAkJMePj481x48aZ3333Xan3yc3NNV999VXzqquuMsPDw83AwECzSZMm5rhx48y9e/eW63mr4zwWpmmahYWF5nvvvWf26tXLjIqKMkNCQsxmzZqZgwcPNv/1r3+Z586dM/Py8syrr77atNvt5tq1a0s8xldffWXabDbzmmuuKbZk7/Tp081OnTqZISEhpb5eIiJWYTNN0/RAe0ZERERERHyIVoUSEREREZEqU8NCRERERESqTJO3RUSkwnbs2MHixYsvebv4+HgmTpzo9noqwsq1i4h4M82xEBGRCps+fTqTJk265O2uv/561qxZ4/6CKsDKtYuIeDM1LEREREREpMo0x0JERERERKpMDQsREREREakyNSxERERERKTK1LAQEREREZEqU8NCRERERESqTA0LERERERGpMjUsRERERESkytSwEBERERGRKlPDQkREREREqkwNCxERERERqTI1LEREREREpMrUsBARERERkSpTw0JERERERKpMDQsREREREamyQE8X4GmGYZCcnExkZCQ2m83T5YiIiIiIeA3TNMnKyqJx48bY7Rfvk/D7hkVycjJxcXGeLkNERERExGsdP36cpk2bXvQ2ft+wiIyMBJy/rKioKI/UYJomBQUFBAUFqdfEjykHAsqBOCkHAsqBOHk6B5mZmcTFxbk+M1+M3zcsil6gqKgojzUsHA4Hu3btolOnTgQEBHikBvE85UBAORAn5UBAORAnb8lBeRo1NtM0zRqoxWtlZmYSHR1NRkaGxxoWIiIiIiLeqCKflbUqlBcwTZOcnBz8vI3n95QD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eYRx48bx8ccfW/9Wzps3j/DwcLp163bN8c6fP5/u3bvTsmXLq37n4eFhfd0zMzMZP348zZo1IyMjg7feeov777+fAwcOFPn/4aysLN5//33mzJmDp6cnTz75JIMHD2br1q2AJRPHjx9n6dKlLFu2zHrGnps9965du2jbti1r166lcePG1hwU5TXv1asXd911F/PmzSM+Pp5nnnmmSGMR9qOXGQt99NLFFaypLq5NmzZx960NZUrURZQ0B8K1SA5c36RJk677u7p16zJ06FDr0ofJkydbT137bzVq1GD06NHWnz///HOysrKu2m7ChAkl7qtSinXr1vHHH3/w1FNPkZiYyMyZM0lMTKRatWoAvPDCC6xevZqZM2fywQcfAJZTVn799dc0b97c2lZBrv+5FGjChAl8/PHH9O/fH7B8yx4dHc23337LqFGjWLBgAcnJyezevZtKlSoBUKdOHevj/f39cXd3v+Hyov79+zNu3DhWrFjBwIEDAcusyujRo69btMXGxhb6hv96BgwYUOjnGTNmEBwcTHR0NE2aNLnp48HyWn355ZfWVQezZ8+mYcOG1sLAaDRiMpmYM2cOwcHBRX7ugm0rV65c7Ndc0zR++OEHvL29ady4MadPn+aJJ54o0niE7clSKFEsZrOZmJiYYi99uOeee6SocCElzYFwLZIDAZYP9NnZ2Q57/l9//RV/f3+8vb255557GDRoEBMnTiQqKgqz2Uy9evXw9/e3/tu4cWOhZTienp40a9bshs+RmZnJiRMnePjhhwu19d5771nbOnDgAC1btrQWFSXh7e3NiBEjmDFjBgD79u3j8OHDhYqyfyvqkpPY2FiGDBlCrVq1qFChApGRkQAkJiYWuX/u7u7ceuut1p8bNGhAYGAgR48eRSlFXl4eNWrUKFRUlPS5i/KaHz16lGbNmlmXXAHcdtttRR6PsL2C/YEshRJFYjQaqVatWrGXPvx7JyP0raQ5EK5FcuD6bnQA9D/fd09PT55//vkbLoX6J1suV+natSvffPMNnp6eVKtWzfptaUZGBm5ubuzdu/eqi2j5+/tbb/v4+Nz0AO2MjAwApk+fftUxggVtF1wRuLQeeeQRWrRowenTp5k5cybdunWjRo0a192+Xr16xMTE3LTd3r17U6NGDaZPn061atXQNI0mTZrccLlbcbm5ueHn52eT5y7Kay6c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\n",
      "text/plain": [
       "<Figure size 800x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  Logged calibration plot to WandB.\n",
      "===== Model Calibration Visualization Finished =====\n"
     ]
    }
   ],
   "source": [
    "# This section visualizes the calibration of the best model's probabilities\n",
    "# for the primary class of interest (melanoma) using a reliability diagram.\n",
    "# It leverages the saved predictions and targets from the best validation epoch.\n",
    "# ==============================================================================\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.calibration import calibration_curve\n",
    "import numpy as np\n",
    "import wandb # Assuming wandb is potentially still active or needed for logging\n",
    "\n",
    "print(\"\\n===== Starting Model Calibration Visualization =====\")\n",
    "\n",
    "# --- 1. Prerequisite Check ---\n",
    "required_vars_for_calibration = ['best_PROBS', 'best_TARGETS', 'mel_idx', 'best_epoch_num', 'kernel_type']\n",
    "calibration_vars_ok = True\n",
    "for var_name in required_vars_for_calibration:\n",
    "    if var_name not in locals() or locals()[var_name] is None:\n",
    "        print(f\"ERROR: Calibration requires '{var_name}', which is missing or None.\")\n",
    "        calibration_vars_ok = False\n",
    "    # Specifically check if the arrays are non-empty if they exist\n",
    "    elif var_name in ['best_PROBS', 'best_TARGETS'] and len(locals()[var_name]) == 0:\n",
    "        print(f\"ERROR: Calibration requires non-empty '{var_name}'. Found empty array.\")\n",
    "        calibration_vars_ok = False\n",
    "\n",
    "if not calibration_vars_ok:\n",
    "    print(\"Skipping calibration plot generation due to missing prerequisites.\")\n",
    "else:\n",
    "    print(f\"Prerequisites met. Generating calibration plot for Melanoma class (index {mel_idx}) from Epoch {best_epoch_num}.\")\n",
    "\n",
    "    # --- 2. Prepare Data for Binary Calibration (Melanoma vs Non-Melanoma) ---\n",
    "    try:\n",
    "        # Ensure they are numpy arrays\n",
    "        if not isinstance(best_PROBS, np.ndarray): best_PROBS = np.array(best_PROBS)\n",
    "        if not isinstance(best_TARGETS, np.ndarray): best_TARGETS = np.array(best_TARGETS)\n",
    "\n",
    "        # Extract probabilities for the positive class (melanoma)\n",
    "        # Ensure mel_idx is within bounds\n",
    "        if mel_idx < 0 or mel_idx >= best_PROBS.shape[1]:\n",
    "             raise IndexError(f\"mel_idx ({mel_idx}) is out of bounds for best_PROBS shape {best_PROBS.shape}\")\n",
    "        y_prob_melanoma = best_PROBS[:, mel_idx]\n",
    "\n",
    "        # Create binary true labels (1 if melanoma, 0 otherwise)\n",
    "        y_true_binary = (best_TARGETS == mel_idx).astype(int)\n",
    "\n",
    "        # Check if there's variation in true labels (needed for calibration curve)\n",
    "        if len(np.unique(y_true_binary)) < 2:\n",
    "            print(\"WARNING: Only one class present in the best validation targets. Calibration curve may not be meaningful.\")\n",
    "            # Optionally skip plotting here if desired\n",
    "\n",
    "        print(f\"  Prepared data: y_prob_melanoma shape {y_prob_melanoma.shape}, y_true_binary shape {y_true_binary.shape}\")\n",
    "        print(f\"  Number of positive (melanoma) samples in best validation set: {np.sum(y_true_binary)}\")\n",
    "\n",
    "        # --- 3. Calculate Calibration Curve ---\n",
    "        # Use 'uniform' strategy for equally spaced bins based on probability.\n",
    "        # 'quantile' can also be used for bins with equal numbers of samples.\n",
    "        n_bins = 10 # A common choice, can be adjusted\n",
    "        prob_true, prob_pred = calibration_curve(y_true_binary, y_prob_melanoma, n_bins=n_bins, strategy='uniform')\n",
    "\n",
    "        print(f\"  Calculated calibration curve points (True Probability, Predicted Probability):\")\n",
    "        for pt, pp in zip(prob_true, prob_pred):\n",
    "            print(f\"    {pt:.4f}, {pp:.4f}\")\n",
    "\n",
    "        # --- 4. Plot Reliability Diagram ---\n",
    "        plt.figure(figsize=(8, 8))\n",
    "        plt.plot([0, 1], [0, 1], linestyle='--', color='gray', label='Perfectly Calibrated')\n",
    "        plt.plot(prob_pred, prob_true, marker='s', linestyle='-', label='Model Calibration (Melanoma Class)')\n",
    "\n",
    "        plt.xlabel(\"Mean Predicted Probability (in bin)\", fontsize=12)\n",
    "        plt.ylabel(\"Fraction of Positives (in bin)\", fontsize=12)\n",
    "        plt.title(f\"Calibration Plot (Reliability Diagram) - Epoch {best_epoch_num}\\n{kernel_type}\", fontsize=14, pad=15)\n",
    "        plt.legend(loc='lower right', fontsize=10)\n",
    "        plt.grid(True, linestyle=':', alpha=0.6)\n",
    "        plt.tight_layout()\n",
    "\n",
    "        # --- 5. Save and Log Plot ---\n",
    "        calibration_plot_filename = f\"{kernel_type}_calibration_plot_epoch{best_epoch_num}.png\"\n",
    "        plt.savefig(calibration_plot_filename, dpi=150)\n",
    "        print(f\"  Saved calibration plot locally: {calibration_plot_filename}\")\n",
    "        plt.show() # Display the plot in the notebook\n",
    "\n",
    "        # --- MODIFY THIS CHECK ---\n",
    "        if 'wandb_run_ret' in locals() and wandb_run_ret is not None:\n",
    "            try:\n",
    "                # Use the global wandb object for logging commands\n",
    "                wandb.log({\"calibration_plot_melanoma\": wandb.Image(calibration_plot_filename)}, step=best_epoch_num)\n",
    "                print(\"  Logged calibration plot to WandB.\")\n",
    "            except Exception as e:\n",
    "                print(f\"  Warning: Failed to log calibration plot to WandB: {e}\")\n",
    "        else:\n",
    "            print(\"  Skipping WandB logging for calibration plot (WandB run object not available or finished).\")\n",
    "\n",
    "    except Exception as e:\n",
    "        print(f\"\\nERROR generating calibration plot: {e}\")\n",
    "        import traceback\n",
    "        traceback.print_exc()\n",
    "\n",
    "print(\"===== Model Calibration Visualization Finished =====\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "d24eaa75",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-17T16:23:10.446464Z",
     "iopub.status.busy": "2025-06-17T16:23:10.446137Z",
     "iopub.status.idle": "2025-06-17T16:23:12.575170Z",
     "shell.execute_reply": "2025-06-17T16:23:12.574509Z"
    },
    "papermill": {
     "duration": 9.339768,
     "end_time": "2025-06-17T16:23:12.576406",
     "exception": false,
     "start_time": "2025-06-17T16:23:03.236638",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:                 binary_acc ▂▅▅▅▇▆▇▇██▁▁▃▅▃▃▅▅▂▂▃▇▇▆▇\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:                 binary_auc ▄▅▆▆▇█▇███▃▅▁▆▅▅▅▆▅▆▅▇▆▅▇\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:                  binary_f1 ▃▅▅▆▆▇▆▇██▂▃▁▅▄▄▄▅▃▄▄▆▅▅▅\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:           binary_precision ▂▅▅▅▇▆▇▆▇▇▁▁▃▅▃▃▅▅▂▂▃▇▇▆█\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:              binary_recall ▄▅▅▆▆▇▆▇██▃▄▁▅▄▅▄▅▃▅▄▅▄▄▄\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:         binary_specificity ▃▅▅▄▆▄▆▅▆▆▃▁▆▅▄▂▆▅▃▂▄▇█▆█\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:            composite_score ▃▅▅▆▆▇▇▇██▂▄▁▅▄▅▄▅▄▅▅▆▅▅▆\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:              learning_rate ▁▁▁▁▁▁▁▁▁▂███████████████\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:             multiclass_acc ▂▄▄▅▇▇▇███▁▂▃▃▄▄▄▆▄▄▆▆▅▅▅\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:             multiclass_auc ▁▃▄▅▅▆▇▇██▁▂▃▅▄▅▅▅▅▅▅▇▅▆▆\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:              multiclass_f1 ▂▃▃▄▆▆▆▇██▁▃▃▃▄▄▄▆▄▄▆▇▅▄▅\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:        optimal_temperature ▁█▂▂\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:                temperature ▁▁▁▁▁▃▁▁▁▁█▁▁▁▁▄▁▁▁▁▄▁▁▁▁\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:                  train_acc ▁▃▄▅▆▆▇▇██▁▃▃▄▄▅▅▆▅▆▆▆▆▇▇\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:   train_epoch_time_seconds ▅▇███▇▆▇▇▇▄▆▅▅▄▄▄▅▅▄▃▂▁▂▂\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:       train_gpu_max_memory ▁▁▁▁▁▁▁▁▁▁███████████████\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: train_gpu_memory_allocated ▁▁▁▁▁▁▁▁▁▁███████████████\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:                 train_loss █▄▃▂▂▂▁▁▁▁▇▅▄▃▃▃▃▂▂▂▂▂▂▂▂\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:     val_epoch_time_seconds ▁▁▁▁▁█▁▁▁▁█▁▁▁▁█▁▁▁▁█▁▁▁▁\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:         val_gpu_max_memory ▁▁▁▁▁▁▁▁▁▁███████████████\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:   val_gpu_memory_allocated ▁▁▁▁▁▁▁▁▁▁███████████████\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:                   val_loss ▃▅▆▆▆▇▇▇██▁▄▄▆▅▆▅▆▅▆▆▇▆▆▇\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:               val_loss_raw ▆▄▃▃▃▂▂▂▁▁█▅▅▃▄▃▄▃▄▃▃▂▃▃▂\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:                    binary_acc 93.28043\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:                    binary_auc 0.87613\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:                     binary_f1 0.51343\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:              binary_precision 0.70497\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:                 binary_recall 0.40373\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:            binary_specificity 0.98374\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:               composite_score 0.73219\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:       final_best_epoch_logged 9\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:              final_binary_acc 93.78936\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:              final_binary_auc 0.92389\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:               final_binary_f1 0.63077\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:        final_binary_precision 0.65987\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:           final_binary_recall 0.60413\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:      final_binary_specificity 0.97002\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:         final_composite_score 0.80546\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:                   final_epoch 9\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:    final_last_epoch_completed 26\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:          final_multiclass_acc 74.24088\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:          final_multiclass_auc 0.93926\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:           final_multiclass_f1 0.47621\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:             final_temperature 1\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: final_total_training_time_sec 42528.58\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:            final_val_loss_raw 3.25811\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:                 learning_rate 0.0005\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:                multiclass_acc 61.9332\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:                multiclass_auc 0.90769\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:                 multiclass_f1 0.32922\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:           optimal_temperature 1.16818\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:                   temperature 1\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:                     train_acc 57.92788\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:      train_epoch_time_seconds 1505.38135\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:          train_gpu_max_memory 7387.00879\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:    train_gpu_memory_allocated 1734.979\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:                    train_loss 0.70217\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:        val_epoch_time_seconds 139.07959\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:            val_gpu_max_memory 7387.00879\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:      val_gpu_memory_allocated 1707.71777\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:                      val_loss 0.31838\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:                  val_loss_raw 3.4081\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: 🚀 View run \u001b[33meffnet_v2_m_384_ext_250617_1133\u001b[0m at: \u001b[34m\u001b[4mhttps://wandb.ai/arveda-ava86-universitas-gadjah-mada-library/SKRIPSI%20GACOR/runs/cq19o9b4\u001b[0m\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: ⭐️ View project at: \u001b[34m\u001b[4mhttps://wandb.ai/arveda-ava86-universitas-gadjah-mada-library/SKRIPSI%20GACOR\u001b[0m\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 5 W&B file(s), 0 media file(s), 252 artifact file(s) and 126 other file(s)\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: Find logs at: \u001b[35m\u001b[1m./wandb/run-20250617_043324-cq19o9b4/logs\u001b[0m\n"
     ]
    }
   ],
   "source": [
    "wandb.finish()  # End the W&B run"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0d2725b1",
   "metadata": {
    "papermill": {
     "duration": 7.403745,
     "end_time": "2025-06-17T16:23:27.244862",
     "exception": false,
     "start_time": "2025-06-17T16:23:19.841117",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Grad-Cam Run"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "7d1c4d80",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-17T16:23:41.453439Z",
     "iopub.status.busy": "2025-06-17T16:23:41.453146Z",
     "iopub.status.idle": "2025-06-17T16:23:41.461553Z",
     "shell.execute_reply": "2025-06-17T16:23:41.460557Z"
    },
    "papermill": {
     "duration": 7.269767,
     "end_time": "2025-06-17T16:23:41.462807",
     "exception": false,
     "start_time": "2025-06-17T16:23:34.193040",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--- Debug Check Before Grad-CAM ---\n",
      "Var 'df_valid_set': Exists | Type=<class 'pandas.core.frame.DataFrame'> | Shape=(11593, 13) | Len=11593 | Keys=N/A | Value=<Object>\n",
      "Var 'diagnosis2idx': Exists | Type=<class 'dict'> | Shape=N/A | Len=9 | Keys=['AK', 'BCC', 'BKL', 'DF', 'SCC'] | Value=<Object>\n",
      "Var 'best_model_state': Exists | Type=<class 'collections.OrderedDict'> | Shape=N/A | Len=336 | Keys=['transformer_backbone.patch_embed.proj.weight', 'transformer_backbone.patch_embed.proj.bias', 'transformer_backbone.patch_embed.norm.weight', 'transformer_backbone.patch_embed.norm.bias', 'transformer_backbone.layers.0.blocks.0.norm1.weight'] | Value=<Object>\n",
      "Var 'model_type_ret': Exists | Type=<class 'str'> | Shape=N/A | Len=9 | Keys=N/A | Value=swin_only\n",
      "Var 'cnn_backbone_ret': Exists | Type=<class 'str'> | Shape=N/A | Len=17 | Keys=N/A | Value=efficientnet_v2_m\n",
      "Var 'n_meta_features_ret': Exists | Type=<class 'int'> | Shape=N/A | Len=N/A | Keys=N/A | Value=0\n",
      "Var 'image_size_ret': Exists | Type=<class 'int'> | Shape=N/A | Len=N/A | Keys=N/A | Value=384\n",
      "Var 'out_dim_ret': Exists | Type=<class 'int'> | Shape=N/A | Len=N/A | Keys=N/A | Value=9\n",
      "Var 'mel_idx': Exists | Type=<class 'int'> | Shape=N/A | Len=N/A | Keys=N/A | Value=6\n",
      "Var 'kernel_type_ret': Exists | Type=<class 'str'> | Shape=N/A | Len=19 | Keys=N/A | Value=effnet_v2_m_384_ext\n",
      "Var 'best_epoch_num': Exists | Type=<class 'int'> | Shape=N/A | Len=N/A | Keys=N/A | Value=9\n",
      "Var 'wandb_run_ret': Exists | Type=<class 'wandb.sdk.wandb_run.Run'> | Shape=N/A | Len=N/A | Keys=N/A | Value=<wandb.sdk.wandb_run.Run object at 0x786d319895d0>\n",
      "--- End Debug Check ---\n"
     ]
    }
   ],
   "source": [
    "print(\"--- Debug Check Before Grad-CAM ---\")\n",
    "# Check variables returned by the NEW run_single_model\n",
    "required_vars_check = [\n",
    "    'df_valid_set', 'diagnosis2idx', 'best_model_state', 'model_type_ret',\n",
    "    'cnn_backbone_ret', 'n_meta_features_ret', 'image_size_ret', 'out_dim_ret',\n",
    "    'mel_idx', 'kernel_type_ret', 'best_epoch_num',\n",
    "    'wandb_run_ret' # <<< Add check for the run object\n",
    "]\n",
    "variables_exist = {}\n",
    "for var_name in required_vars_check:\n",
    "    variables_exist[var_name] = var_name in locals()\n",
    "    if variables_exist[var_name]:\n",
    "        value = locals()[var_name]\n",
    "        v_type = type(value)\n",
    "        v_shape = getattr(value, 'shape', 'N/A')\n",
    "        v_len = len(value) if hasattr(value, '__len__') else 'N/A'\n",
    "        v_keys = list(value.keys())[:5] if isinstance(value, dict) else 'N/A'\n",
    "        print(f\"Var '{var_name}': Exists | Type={v_type} | Shape={v_shape} | Len={v_len} | Keys={v_keys} | Value={value if not isinstance(value, (dict, pd.DataFrame, np.ndarray, torch.Tensor)) else '<Object>'}\")\n",
    "    else:\n",
    "        print(f\"Var '{var_name}': DOES NOT EXIST\")\n",
    "print(\"--- End Debug Check ---\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "6106267b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-17T16:23:55.759111Z",
     "iopub.status.busy": "2025-06-17T16:23:55.758782Z",
     "iopub.status.idle": "2025-06-17T16:23:55.798575Z",
     "shell.execute_reply": "2025-06-17T16:23:55.797859Z"
    },
    "papermill": {
     "duration": 7.310054,
     "end_time": "2025-06-17T16:23:55.799799",
     "exception": false,
     "start_time": "2025-06-17T16:23:48.489745",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Reset index of df_valid_set.\n",
      "\n",
      "===== Starting Grad-CAM Visualization (True vs. Predicted Focus) =====\n",
      "\n",
      "--- Explicit Variable Check ---\n",
      "--- End Explicit Variable Check ---\n",
      "\n",
      "Core variables OK. Setting up for Grad-CAM...\n",
      " Visualizing: Type=swin_only, CNN=efficientnet_v2_m, Meta=False\n",
      "\n",
      "Instantiating model architecture...\n",
      "Error: Unknown model type 'swin_only'.\n",
      "\n",
      "Skipping CAM generation: Model instantiation failed.\n",
      "\n",
      "===== Grad-CAM Visualization Finished =====\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import cv2\n",
    "import os\n",
    "import traceback\n",
    "import wandb\n",
    "import matplotlib.pyplot as plt\n",
    "from numpy.random import default_rng # For cleaner random number generation\n",
    "\n",
    "# --- Ensure necessary imports and definitions ---\n",
    "# Assume essential libraries (torch, nn, pd, np, os, traceback, plt, wandb) are imported\n",
    "\n",
    "# Ensure helper functions are defined globally before this cell\n",
    "if 'load_and_preprocess_for_gradcam' not in globals(): raise NameError(\"load_and_preprocess_for_gradcam not defined\")\n",
    "# Ensure generate_gradcam is defined correctly (use the robust version below)\n",
    "# if 'generate_gradcam' not in globals(): raise NameError(\"generate_gradcam not defined\")\n",
    "\n",
    "# --- Reset index ---\n",
    "if 'df_valid_set' in locals() and isinstance(df_valid_set, pd.DataFrame):\n",
    "    df_valid_set = df_valid_set.reset_index(drop=True)\n",
    "    print(\"Reset index of df_valid_set.\")\n",
    "else:\n",
    "    print(\"Warning: df_valid_set not found or not a DataFrame. Index not reset.\")\n",
    "\n",
    "print(\"\\n===== Starting Grad-CAM Visualization (True vs. Predicted Focus) =====\")\n",
    "\n",
    "# --- Configuration ---\n",
    "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "num_images_to_visualize = 30\n",
    "\n",
    "# --- Prerequisite Check ---\n",
    "print(\"\\n--- Explicit Variable Check ---\")\n",
    "required_vars = [\n",
    "    'df_valid_set', 'diagnosis2idx', 'best_model_state', 'model_type_ret',\n",
    "    'cnn_backbone_ret', 'n_meta_features_ret', 'image_size_ret', 'out_dim_ret',\n",
    "    'mel_idx', 'kernel_type_ret', 'best_epoch_num', 'wandb_run_ret'\n",
    "]\n",
    "all_vars_ok = True; model_trained_successfully = True\n",
    "if 'run_transformer_backbone' in globals(): required_vars.append('run_transformer_backbone')\n",
    "for var_name in required_vars:\n",
    "    if var_name not in locals(): print(f\"ERROR: Prereq '{var_name}' NOT FOUND.\"); all_vars_ok = False\n",
    "    elif locals()[var_name] is None:\n",
    "        if var_name == 'best_model_state': print(f\"ERROR: '{var_name}' is None.\"); model_trained_successfully = False\n",
    "        elif isinstance(locals().get(var_name), pd.DataFrame) and locals().get(var_name).empty: print(f\"INFO: '{var_name}' is empty.\"); all_vars_ok = False\n",
    "        elif var_name not in ['run_transformer_backbone', 'transformer_backbone_name', 'wandb_run_ret']: print(f\"ERROR: '{var_name}' is None.\"); all_vars_ok = False\n",
    "if 'best_epoch_num' in locals() and locals()['best_epoch_num'] == 0: print(\"INFO: 'best_epoch_num' is 0.\")\n",
    "print(\"--- End Explicit Variable Check ---\")\n",
    "\n",
    "# --- Main Grad-CAM Logic ---\n",
    "if all_vars_ok and model_trained_successfully:\n",
    "    print(\"\\nCore variables OK. Setting up for Grad-CAM...\")\n",
    "    current_model_type = model_type_ret; current_cnn_backbone = cnn_backbone_ret\n",
    "    current_transformer_backbone = locals().get('run_transformer_backbone', None) if current_model_type == 'hybrid_swin' else None\n",
    "    current_n_meta = n_meta_features_ret; current_image_size = image_size_ret; current_out_dim = out_dim_ret\n",
    "    print(f\" Visualizing: Type={current_model_type}, CNN={current_cnn_backbone}, Meta={current_n_meta > 0}\")\n",
    "\n",
    "    # --- Instantiate Model ---\n",
    "    print(\"\\nInstantiating model architecture...\")\n",
    "    viz_model = None\n",
    "    try:\n",
    "        # Assume EffNetV2Model/HybridSwinModel defined in notebook scope\n",
    "        if current_model_type == 'hybrid_swin':\n",
    "            if current_transformer_backbone is None: raise ValueError(\"Transformer name missing.\")\n",
    "            viz_model = HybridSwinModel(current_cnn_backbone, current_transformer_backbone, current_out_dim, current_n_meta, False, current_image_size)\n",
    "        elif current_model_type == 'efficientnetv2':\n",
    "            # Pass regularization factor if your model __init__ still expects it, otherwise remove\n",
    "            # Assuming it was removed based on previous steps:\n",
    "            viz_model = EffNetV2Model(current_cnn_backbone, current_out_dim, current_n_meta, False)\n",
    "        else: print(f\"Error: Unknown model type '{current_model_type}'.\")\n",
    "    except Exception as e: print(f\"ERROR instantiating model: {e}\"); traceback.print_exc(); viz_model = None\n",
    "\n",
    "    # --- Load State and Proceed ---\n",
    "    if viz_model:\n",
    "        viz_model = viz_model.to(device)\n",
    "        print(\"\\nLoading best model state...\")\n",
    "        load_successful = False\n",
    "        try: # Load state dict (try strict then non-strict)\n",
    "            load_result = viz_model.load_state_dict(best_model_state, strict=True); print(\" Loaded state (strict=True).\"); load_successful = True\n",
    "        except RuntimeError as e:\n",
    "            print(f\" Warn: Strict load failed ({e}). Trying strict=False...\");\n",
    "            try: load_result = viz_model.load_state_dict(best_model_state, strict=False); print(\" Loaded state (strict=False).\"); load_successful = True; print(f\"    Missing: {len(load_result.missing_keys)}, Unexpected: {len(load_result.unexpected_keys)}\")\n",
    "            except Exception as E: print(f\" ERROR: Load state failed strict=False: {E}\")\n",
    "\n",
    "        # --- Proceed only if state loaded ---\n",
    "        if load_successful:\n",
    "            viz_model.eval()\n",
    "            print(\"\\nIdentifying target layer for Grad-CAM...\")\n",
    "            target_layer = None\n",
    "            model_ref_viz = viz_model # Already base model\n",
    "\n",
    "            # --- TRY block for target layer identification ---\n",
    "            try:\n",
    "                cnn_backbone_viz = getattr(model_ref_viz, 'cnn_backbone', None)\n",
    "                if cnn_backbone_viz and hasattr(cnn_backbone_viz, 'features') and \\\n",
    "                   isinstance(cnn_backbone_viz.features, nn.Sequential):\n",
    "\n",
    "                    # --- Strategy 1: Try the standard last conv layer ---\n",
    "                    if len(cnn_backbone_viz.features) > 0:\n",
    "                        last_feature_module = cnn_backbone_viz.features[-1]\n",
    "                        print(f\"  Checking last feature module (features[-1]): {type(last_feature_module)}\")\n",
    "                        if isinstance(last_feature_module, Conv2dNormActivation):\n",
    "                            if len(last_feature_module) > 0 and isinstance(last_feature_module[0], nn.Conv2d):\n",
    "                                target_layer = last_feature_module[0]\n",
    "                                print(f\"  Attempt 1: Using target features[-1][0]\")\n",
    "                        elif isinstance(last_feature_module, nn.Conv2d):\n",
    "                             target_layer = last_feature_module\n",
    "                             print(f\"  Attempt 1: Using target features[-1] (Conv2d)\")\n",
    "\n",
    "                    # --- Strategy 2: Fallback to the layer BEFORE the last ConvNormAct ---\n",
    "                    if target_layer is None and len(cnn_backbone_viz.features) > 1:\n",
    "                        second_last_module = cnn_backbone_viz.features[-2]\n",
    "                        print(f\"  Attempt 2: Falling back to features[-2]: {type(second_last_module)}\")\n",
    "                        if isinstance(second_last_module, nn.Sequential):\n",
    "                            target_layer = second_last_module\n",
    "                            print(f\"  SUCCESS (Fallback): Identified target as features[-2] (Sequential Stage Block)\")\n",
    "                        else:\n",
    "                            print(\"  Fallback failed: features[-2] is not nn.Sequential.\")\n",
    "\n",
    "                # --- Fallback for Swin ---\n",
    "                if target_layer is None and current_model_type == 'hybrid_swin':\n",
    "                     xfmr_backbone_viz = getattr(model_ref_viz, 'transformer_backbone', None)\n",
    "                     if xfmr_backbone_viz and hasattr(xfmr_backbone_viz, 'layers') and len(xfmr_backbone_viz.layers) > 0:\n",
    "                         try: target_layer = xfmr_backbone_viz.layers[-1].blocks[-1].norm2; print(f\"  SUCCESS: Identified Swin target\")\n",
    "                         except AttributeError: print(\"  Warning: Could not access Swin layers[-1].blocks[-1].norm2\")\n",
    "\n",
    "                # --- Final Check ---\n",
    "                if target_layer is None:\n",
    "                     # --- >>> CORRECTED INDENTATION <<< ---\n",
    "                     print(\"  -------------------------------------------------------------\")\n",
    "                     print(\"  ERROR: Could not automatically determine target layer.\")\n",
    "                     print(\"  -------------------------------------------------------------\")\n",
    "\n",
    "            # --- >>> CORRECTED INDENTATION <<< ---\n",
    "            except AttributeError as ae: print(f\"  Error accessing model layers: {ae}\")\n",
    "            except Exception as e: print(f\"  Unexpected error finding target layer: {e}\")\n",
    "\n",
    "\n",
    "            # --- Proceed with CAM generation ---\n",
    "            # --- >>> CORRECTED INDENTATION <<< ---\n",
    "            if target_layer:\n",
    "                SEED_FOR_VIS = 42; rng = default_rng(seed=SEED_FOR_VIS); print(f\"\\nUsing seed {SEED_FOR_VIS}\")\n",
    "                num_avail = len(df_valid_set); num_samp = min(num_images_to_visualize, num_avail)\n",
    "                if num_samp > 0: random_indices = sorted(rng.choice(num_avail, num_samp, replace=False).tolist()); print(f\"Selected indices: {random_indices}\")\n",
    "                else: random_indices = []; print(\"Warning: No validation images.\")\n",
    "\n",
    "                if random_indices:\n",
    "                    print(\"\\nGenerating Grad-CAMs...\")\n",
    "                    wandb_cam_figs = []   # <<< Initialize the list for figures\n",
    "                    wandb_cam_images = []\n",
    "\n",
    "                    for img_index in random_indices:\n",
    "                        print(f\"\\n--- Processing Image Index: {img_index} ---\")\n",
    "                        try:\n",
    "                            image_info = df_valid_set.loc[img_index]; image_path = image_info['filepath']\n",
    "                            true_label_idx = int(image_info['target']); idx2diagnosis = {v: k for k, v in diagnosis2idx.items()}\n",
    "                            true_label_name = idx2diagnosis.get(true_label_idx, f\"Unk{true_label_idx}\")\n",
    "                            print(f\" File: {os.path.basename(image_path)}, True: {true_label_name}[{true_label_idx}]\")\n",
    "\n",
    "                            input_tensor, img_for_display = load_and_preprocess_for_gradcam(image_path, current_image_size)\n",
    "                            input_tensor = input_tensor.to(device)\n",
    "\n",
    "                            # Prepare metadata tensor if needed\n",
    "                            meta_tensor_for_image = None\n",
    "                            if current_n_meta > 0:\n",
    "                                if 'meta_features' in globals() and meta_features:\n",
    "                                     try:\n",
    "                                         if all(col in image_info.index for col in meta_features): meta_vals = image_info[meta_features].values.astype(np.float32); meta_tensor_for_image = torch.tensor(meta_vals).unsqueeze(0).to(device); print(f\"  Meta tensor prepared.\")\n",
    "                                         else: print(f\"  Warn: Missing meta columns in row {img_index}.\")\n",
    "                                     except Exception as me: print(f\"  Error preparing meta tensor: {me}\"); traceback.print_exc()\n",
    "                                else: print(\"  Warn: Meta enabled but 'meta_features' list missing.\")\n",
    "\n",
    "                            # Get Model Prediction\n",
    "                            pred_label_name=\"N/A\"; pred_label_idx=-1; pred_prob_pred=0.0\n",
    "                            logits = None\n",
    "                            try:\n",
    "                                with torch.no_grad():\n",
    "                                    if current_n_meta > 0 and meta_tensor_for_image is not None: logits = viz_model(input_tensor, x_meta=meta_tensor_for_image)\n",
    "                                    elif current_n_meta == 0: logits = viz_model(input_tensor)\n",
    "                                    elif current_n_meta > 0: print(\"  ERROR: Meta required but tensor is None.\")\n",
    "                            except Exception as pred_e: print(f\"  ERROR during prediction call: {pred_e}\"); traceback.print_exc()\n",
    "                            if logits is not None:\n",
    "                                try: pred_prob = torch.softmax(logits, dim=1); pred_label_idx = torch.argmax(pred_prob, dim=1).item(); pred_prob_pred = pred_prob[0, pred_label_idx].item(); pred_label_name = idx2diagnosis.get(pred_label_idx, f\"Unk{pred_label_idx}\")\n",
    "                                except Exception as softmax_e: print(f\"  ERROR processing logits: {softmax_e}\"); pred_label_name=\"LogitErr\"; pred_label_idx=-1; pred_prob_pred=0.0;\n",
    "                            else: print(\"  Prediction skipped or failed.\")\n",
    "                            print(f\"  Prediction: {pred_label_name} [{pred_label_idx}] (Prob: {pred_prob_pred:.3f})\")\n",
    "                            # --- >>> ADD THIS: Extract probability for the TRUE class <<< ---\n",
    "                            if 0 <= true_label_idx < pred_prob.shape[1]:\n",
    "                                pred_prob_true = pred_prob[0, true_label_idx].item()\n",
    "                            else:\n",
    "                                print(f\"  Warning: true_label_idx ({true_label_idx}) out of bounds for pred_prob shape {pred_prob.shape}. Setting pred_prob_true to 0.\")\n",
    "                            # --- >>> END ADDITION <<< ---\n",
    "                            # Generate CAMs\n",
    "                            vis_true, vis_pred = None, None\n",
    "                            gray_cam_true, gray_cam_pred = None, None # Store grayscale cams too\n",
    "\n",
    "                            print(f\"  Generating CAM for TRUE Class ({true_label_name})...\")\n",
    "                            try:\n",
    "                                # Get both visualization AND the grayscale mask\n",
    "                                vis_true, gray_cam_true = generate_gradcam(viz_model, target_layer, input_tensor, img_for_display, true_label_idx, device, meta_tensor_for_image)\n",
    "                            except Exception as cam_e: print(f\"   ERROR CAM TRUE: {cam_e}\"); traceback.print_exc()\n",
    "\n",
    "                            if pred_label_idx != -1 and pred_label_idx != true_label_idx:\n",
    "                                print(f\"  Generating CAM for PRED Class ({pred_label_name})...\")\n",
    "                                try:\n",
    "                                    vis_pred, gray_cam_pred = generate_gradcam(viz_model, target_layer, input_tensor, img_for_display, pred_label_idx, device, meta_tensor_for_image)\n",
    "                                except Exception as cam_e: print(f\"   ERROR CAM PRED: {cam_e}\"); traceback.print_exc()\n",
    "                            elif pred_label_idx != -1:\n",
    "                                vis_pred = vis_true\n",
    "                                gray_cam_pred = gray_cam_true # Reuse grayscale too\n",
    "                                print(\"  Pred == True, reusing CAM.\")\n",
    "\n",
    "                            # --- >>> REVISED VISUALIZATION CODE <<< ---\n",
    "                            # --- Plotting: Replicate Example Style ---\n",
    "                            interpolation_method = 'bilinear'\n",
    "                            alpha_blend_value = 0.5\n",
    "                            if gray_cam_true is not None: # Only plot if CAM for True label succeeded\n",
    "                                try:\n",
    "                                    fig, axes = plt.subplots(1, 3, figsize=(18, 6))\n",
    "                                    img_name = os.path.basename(image_path).split('.')[0] # Get image name early\n",
    "\n",
    "                                    # --- Plot 1: Original Image ---\n",
    "                                    orig_disp = (img_for_display * 255).astype(np.uint8)\n",
    "                                    axes[0].imshow(orig_disp)\n",
    "                                    axes[0].set_title(f\"Original\\nTrue: {true_label_name} [{true_label_idx}]\")\n",
    "                                    axes[0].axis('off')\n",
    "\n",
    "                                    # --- Plot 2: CAM Overlay for True Label ---\n",
    "                                    axes[1].imshow(orig_disp) # Background\n",
    "                                    axes[1].imshow(gray_cam_true, cmap='jet', alpha=alpha_blend_value, interpolation=interpolation_method)\n",
    "                                    axes[1].set_title(f\"CAM for True ({true_label_name})\\nModel's Prob: {pred_prob_true:.3f}\")\n",
    "                                    axes[1].axis('off')\n",
    "\n",
    "                                    # --- Plot 3: CAM Overlay for Predicted Label ---\n",
    "                                    if gray_cam_pred is not None:\n",
    "                                        axes[2].imshow(orig_disp) # Background\n",
    "                                        axes[2].imshow(gray_cam_pred, cmap='jet', alpha=alpha_blend_value, interpolation=interpolation_method)\n",
    "                                        axes[2].set_title(f\"CAM for Pred ({pred_label_name})\\nModel's Prob: {pred_prob_pred:.3f}\")\n",
    "                                    else:\n",
    "                                        # Handle cases where pred CAM wasn't generated or reused incorrectly\n",
    "                                        axes[2].imshow(orig_disp) # Show original image as fallback\n",
    "                                        info_text = 'Pred CAM Error'\n",
    "                                        if pred_label_idx == -1: info_text = 'Prediction Error\\nNo CAM Generated'\n",
    "                                        elif pred_label_idx == true_label_idx: info_text = 'Pred==True\\n(See True CAM)' # Should not happen if logic above is correct\n",
    "                                        axes[2].text(0.5, 0.5, info_text, ha='center', va='center', fontsize=10, color='white', backgroundcolor='black')\n",
    "                                        axes[2].set_title(f\"CAM for Pred ({pred_label_name})\")\n",
    "                                    axes[2].axis('off')\n",
    "\n",
    "                                    # --- Overall Title ---\n",
    "                                    plt.suptitle(f\"Image: {img_name} (Idx: {img_index}) | Model: {current_model_type}/{current_cnn_backbone}\", fontsize=14)\n",
    "                                    plt.tight_layout(rect=[0, 0.03, 1, 0.92]) # Adjust layout for suptitle\n",
    "                                    plt.show()\n",
    "\n",
    "                                    # --- Save figure for WandB ---\n",
    "                                    try:\n",
    "                                        fig_filename = f\"temp_cam_{img_name}.png\"\n",
    "                                        fig.savefig(fig_filename, bbox_inches='tight')\n",
    "                                        # <<< Ensure this appends to wandb_cam_figs >>>\n",
    "                                        if 'wandb_run_ret' in locals() and wandb_run_ret is not None and wandb.run and wandb.run.id == wandb_run_ret.id:\n",
    "                                             wandb_cam_figs.append(wandb.Image(fig_filename, caption=f\"{img_name}|T:{true_label_name}|P:{pred_label_name}\"))\n",
    "                                        plt.close(fig) # Close the figure after saving\n",
    "                                        # import os; os.remove(fig_filename) # Optional cleanup\n",
    "                                    except Exception as fig_err:\n",
    "                                         print(f\"  Error saving/logging figure: {fig_err}\")\n",
    "                                         plt.close(fig)\n",
    "\n",
    "                               \n",
    "\n",
    "                                    # --- Combine for WandB ---\n",
    "                                    # Create the combined vis for WandB logging (original + 2 overlays)\n",
    "                                    if vis_true is not None and vis_pred is not None:\n",
    "                                        # Recreate display versions with text if needed\n",
    "                                        orig_disp_wb = (img_for_display * 255).astype(np.uint8)\n",
    "                                        cam_true_disp_wb = (vis_true * 255).astype(np.uint8)\n",
    "                                        cam_pred_disp_wb = (vis_pred * 255).astype(np.uint8)\n",
    "                                        cv2.putText(orig_disp_wb, f\"T:{true_label_name}\",(5,15), cv2.FONT_HERSHEY_SIMPLEX, 0.4,(255,255,255),1)\n",
    "                                        cv2.putText(cam_true_disp_wb, f\"CAM-T:{true_label_name}\",(5,15), cv2.FONT_HERSHEY_SIMPLEX, 0.4,(0,0,0),1)\n",
    "                                        cv2.putText(cam_pred_disp_wb, f\"CAM-P:{pred_label_name}\",(5,15), cv2.FONT_HERSHEY_SIMPLEX, 0.4,(0,0,0),1)\n",
    "\n",
    "                                        combined_vis = np.concatenate((orig_disp_wb, cam_true_disp_wb, cam_pred_disp_wb), axis=1)\n",
    "                                        if 'wandb_run_ret' in locals() and wandb_run_ret is not None:\n",
    "                                             try: wandb_cam_images.append(wandb.Image(combined_vis, caption=f\"{img_name}|T:{true_label_name}|P:{pred_label_name}\"))\n",
    "                                             except Exception as wandb_img_e: print(f\"  Error creating wandb.Image: {wandb_img_e}\")\n",
    "                                    # --- End Combine for WandB ---\n",
    "\n",
    "                                except Exception as vis_e: print(f\"  Error creating/displaying viz: {vis_e}\")\n",
    "                            else:\n",
    "                                print(\"  Skipping visualization and logging for this image as True Grayscale CAM failed.\")\n",
    "                            # --- >>> END REVISED VISUALIZATION CODE <<< ---\n",
    "\n",
    "                        except Exception as loop_e: print(f\"  ERROR processing image {img_index}: {loop_e}\"); traceback.print_exc()\n",
    "                    # --- End For Loop ---\n",
    "\n",
    "                    # --- Final WandB Logging ---\n",
    "                    # <<< MODIFY THIS BLOCK >>>\n",
    "                    if wandb_cam_figs: # <<< CHECK THE CORRECT LIST\n",
    "                         if 'wandb_run_ret' in locals() and wandb_run_ret is not None:\n",
    "                             is_active = wandb.run is not None and wandb.run.id == wandb_run_ret.id\n",
    "                             print(f\"\\nLogging Check: {len(wandb_cam_figs)} figure images ready. Run active? {is_active}\") # Updated print\n",
    "                             if is_active:\n",
    "                                 try:\n",
    "                                      log_step = best_epoch_num if best_epoch_num > 0 else locals().get('last_epoch_completed', 0)\n",
    "                                      # <<< LOG THE CORRECT LIST with a better key name >>>\n",
    "                                      wandb.log({\"Grad_CAM_Figures\": wandb_cam_figs}, step=log_step)\n",
    "                                      print(\"Logged Grad-CAM figures to WandB.\")\n",
    "                                 except Exception as log_e: print(f\"Warning: Failed logging Grad-CAM figures: {log_e}\")\n",
    "                             else: print(\"Skipping WandB log: Run finished or mismatched.\")\n",
    "                         else: print(\"Skipping WandB log: wandb_run_ret object missing.\")\n",
    "                    elif target_layer: print(\"\\nNo Grad-CAM figures were successfully generated/collected for logging.\") # Updated print\n",
    "                    # --- End Final Logging ---\n",
    "\n",
    "                else: print(\"Warning: No random indices selected for CAM.\")\n",
    "            else: print(\"\\nSkipping CAM generation loop: Target layer not identified.\")\n",
    "        else: print(\"\\nSkipping CAM generation: Model state loading failed.\")\n",
    "    else: print(\"\\nSkipping CAM generation: Model instantiation failed.\")\n",
    "else: print(\"\\nSkipping Grad-CAM generation: Prerequisites not met.\")\n",
    "\n",
    "print(\"\\n===== Grad-CAM Visualization Finished =====\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "7adcc2f1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-17T16:24:10.083337Z",
     "iopub.status.busy": "2025-06-17T16:24:10.083049Z",
     "iopub.status.idle": "2025-06-17T16:24:10.088854Z",
     "shell.execute_reply": "2025-06-17T16:24:10.087927Z"
    },
    "papermill": {
     "duration": 7.267696,
     "end_time": "2025-06-17T16:24:10.090237",
     "exception": false,
     "start_time": "2025-06-17T16:24:02.822541",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Attempting to finish WandB run...\n",
      "WandB run (cq19o9b4) already finished or object is detached.\n"
     ]
    }
   ],
   "source": [
    "# --- NEW CELL AT THE VERY END ---\n",
    "print(\"\\nAttempting to finish WandB run...\")\n",
    "if 'wandb_run_ret' in locals() and wandb_run_ret is not None:\n",
    "    try:\n",
    "        # Check if the run associated with the object is still active before finishing\n",
    "        # Note: Accessing wandb.run might be None even if wandb_run_ret exists if finish was called elsewhere\n",
    "        if wandb.run and wandb.run.id == wandb_run_ret.id:\n",
    "             print(f\"Finishing active WandB run: {wandb_run_ret.id}\")\n",
    "             wandb.finish()\n",
    "             print(\"WandB run finished.\")\n",
    "        elif wandb.run:\n",
    "             print(f\"Warning: Another WandB run seems active ({wandb.run.id}). Not finishing the target run ({wandb_run_ret.id}).\")\n",
    "        else:\n",
    "             print(f\"WandB run ({wandb_run_ret.id}) already finished or object is detached.\")\n",
    "    except Exception as e:\n",
    "        print(f\"Error finishing WandB run: {e}\")\n",
    "elif 'wandb' in locals() and wandb.run is not None:\n",
    "    # Fallback if wandb_run_ret wasn't captured but a run is somehow still active\n",
    "    print(f\"Finishing potentially active global WandB run: {wandb.run.id}\")\n",
    "    wandb.finish()\n",
    "    print(\"WandB run finished.\")\n",
    "else:\n",
    "    print(\"No active WandB run object found to finish.\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "databundleVersionId": 1222630,
     "sourceId": 20270,
     "sourceType": "competition"
    },
    {
     "datasetId": 756214,
     "sourceId": 1339680,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 756247,
     "sourceId": 1339691,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 756315,
     "sourceId": 1339694,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 762181,
     "sourceId": 1353805,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 762191,
     "sourceId": 1353810,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 762203,
     "sourceId": 1353811,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 846815,
     "sourceId": 1444814,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30919,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 42732.708777,
   "end_time": "2025-06-17T16:24:21.062685",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-06-17T04:32:08.353908",
   "version": "2.6.0"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "14532525146741ffac220c759a531bee": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "14e829fd9a3e4074a6dcec9b9c02d0dd": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_c5864d74e32e47739fe1cf5d00ccd04d",
        "IPY_MODEL_fa7d2724cc0f414190dd9f27eb8af2a0",
        "IPY_MODEL_d99c17143aa54cf89bdb0dbe02b15d25"
       ],
       "layout": "IPY_MODEL_fc3f1840c0394dffa258bc734d5862f6",
       "tabbable": null,
       "tooltip": null
      }
     },
     "1a1e7e9bdb6a41948ead7fd4a36fd533": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "4f81322e61824e74b2610487854abb7f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "50b808315f554520b8b86b8e1f2df06c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "5a0bb372b2e540849fa5b72b7a18e64a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "7573899fc7874824a9b265f188051727": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "c5864d74e32e47739fe1cf5d00ccd04d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_1a1e7e9bdb6a41948ead7fd4a36fd533",
       "placeholder": "​",
       "style": "IPY_MODEL_7573899fc7874824a9b265f188051727",
       "tabbable": null,
       "tooltip": null,
       "value": "model.safetensors: 100%"
      }
     },
     "d99c17143aa54cf89bdb0dbe02b15d25": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_14532525146741ffac220c759a531bee",
       "placeholder": "​",
       "style": "IPY_MODEL_5a0bb372b2e540849fa5b72b7a18e64a",
       "tabbable": null,
       "tooltip": null,
       "value": " 365M/365M [00:01&lt;00:00, 255MB/s]"
      }
     },
     "fa7d2724cc0f414190dd9f27eb8af2a0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_50b808315f554520b8b86b8e1f2df06c",
       "max": 365255040.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_4f81322e61824e74b2610487854abb7f",
       "tabbable": null,
       "tooltip": null,
       "value": 365255040.0
      }
     },
     "fc3f1840c0394dffa258bc734d5862f6": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
