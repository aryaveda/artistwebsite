{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "cc8cf257",
   "metadata": {
    "papermill": {
     "duration": 0.013093,
     "end_time": "2025-06-18T04:27:42.224159",
     "exception": false,
     "start_time": "2025-06-18T04:27:42.211066",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Setup and Configuration"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a75cd157",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-18T04:27:42.248196Z",
     "iopub.status.busy": "2025-06-18T04:27:42.247911Z",
     "iopub.status.idle": "2025-06-18T04:27:42.252605Z",
     "shell.execute_reply": "2025-06-18T04:27:42.251800Z"
    },
    "papermill": {
     "duration": 0.017987,
     "end_time": "2025-06-18T04:27:42.253857",
     "exception": false,
     "start_time": "2025-06-18T04:27:42.235870",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import os\n",
    "os.environ[\"PYTORCH_CUDA_ALLOC_CONF\"] = \"expandable_segments:True\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "833a3512",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-18T04:27:42.277180Z",
     "iopub.status.busy": "2025-06-18T04:27:42.276983Z",
     "iopub.status.idle": "2025-06-18T04:27:42.281067Z",
     "shell.execute_reply": "2025-06-18T04:27:42.280152Z"
    },
    "papermill": {
     "duration": 0.017009,
     "end_time": "2025-06-18T04:27:42.282221",
     "exception": false,
     "start_time": "2025-06-18T04:27:42.265212",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Notebook execution started at: 2025-06-18 04:27:42\n",
      "Maximum training runtime set to: 11.42 hours (41100 seconds)\n"
     ]
    }
   ],
   "source": [
    "import time\n",
    "\n",
    "NOTEBOOK_START_TIME = time.time()\n",
    "# Set maximum runtime in seconds (11 hours 25 minutes to leave buffer)\n",
    "MAX_RUNTIME_SECONDS = 11 * 3600 + 25 * 60\n",
    "print(f\"Notebook execution started at: {time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(NOTEBOOK_START_TIME))}\")\n",
    "print(f\"Maximum training runtime set to: {MAX_RUNTIME_SECONDS / 3600:.2f} hours ({MAX_RUNTIME_SECONDS} seconds)\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "311cd97b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-18T04:27:42.306573Z",
     "iopub.status.busy": "2025-06-18T04:27:42.306294Z",
     "iopub.status.idle": "2025-06-18T04:27:42.548849Z",
     "shell.execute_reply": "2025-06-18T04:27:42.548049Z"
    },
    "papermill": {
     "duration": 0.256224,
     "end_time": "2025-06-18T04:27:42.550126",
     "exception": false,
     "start_time": "2025-06-18T04:27:42.293902",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Wed Jun 18 04:27:42 2025       \r\n",
      "+-----------------------------------------------------------------------------------------+\r\n",
      "| NVIDIA-SMI 560.35.03              Driver Version: 560.35.03      CUDA Version: 12.6     |\r\n",
      "|-----------------------------------------+------------------------+----------------------+\r\n",
      "| GPU  Name                 Persistence-M | Bus-Id          Disp.A | Volatile Uncorr. ECC |\r\n",
      "| Fan  Temp   Perf          Pwr:Usage/Cap |           Memory-Usage | GPU-Util  Compute M. |\r\n",
      "|                                         |                        |               MIG M. |\r\n",
      "|=========================================+========================+======================|\r\n",
      "|   0  Tesla T4                       Off |   00000000:00:04.0 Off |                    0 |\r\n",
      "| N/A   41C    P8              9W /   70W |       1MiB /  15360MiB |      0%      Default |\r\n",
      "|                                         |                        |                  N/A |\r\n",
      "+-----------------------------------------+------------------------+----------------------+\r\n",
      "|   1  Tesla T4                       Off |   00000000:00:05.0 Off |                    0 |\r\n",
      "| N/A   40C    P8              9W /   70W |       1MiB /  15360MiB |      0%      Default |\r\n",
      "|                                         |                        |                  N/A |\r\n",
      "+-----------------------------------------+------------------------+----------------------+\r\n",
      "                                                                                         \r\n",
      "+-----------------------------------------------------------------------------------------+\r\n",
      "| Processes:                                                                              |\r\n",
      "|  GPU   GI   CI        PID   Type   Process name                              GPU Memory |\r\n",
      "|        ID   ID                                                               Usage      |\r\n",
      "|=========================================================================================|\r\n",
      "|  No running processes found                                                             |\r\n",
      "+-----------------------------------------------------------------------------------------+\r\n"
     ]
    }
   ],
   "source": [
    "!nvidia-smi"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "4a6f9aba",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-18T04:27:42.575874Z",
     "iopub.status.busy": "2025-06-18T04:27:42.575614Z",
     "iopub.status.idle": "2025-06-18T04:28:24.751292Z",
     "shell.execute_reply": "2025-06-18T04:28:24.750225Z"
    },
    "papermill": {
     "duration": 42.190592,
     "end_time": "2025-06-18T04:28:24.752836",
     "exception": false,
     "start_time": "2025-06-18T04:27:42.562244",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Successfully installed/upgraded: git+https://github.com/ildoonet/pytorch-gradual-warmup-lr.git\n",
      "Successfully installed/upgraded: geffnet\n",
      "Successfully installed/upgraded: albumentations\n",
      "Successfully installed/upgraded: wandb\n",
      "Successfully installed/upgraded: opencv-python\n",
      "Successfully installed/upgraded: pytz\n",
      "Successfully installed/upgraded: timm\n",
      "Successfully installed/upgraded: grad-cam\n",
      "Successfully installed/upgraded: ttach\n",
      "All packages installed.\n"
     ]
    }
   ],
   "source": [
    "import subprocess\n",
    "import sys\n",
    "\n",
    "def install_package(package, upgrade=False):\n",
    "    \"\"\"Installs a package, suppressing stdout and stderr.\"\"\"\n",
    "    try:\n",
    "        command = [sys.executable, \"-m\", \"pip\", \"install\"]\n",
    "        if upgrade:\n",
    "            command.append(\"--upgrade\")\n",
    "        command.append(package)\n",
    "\n",
    "        # Redirect stdout and stderr to /dev/null (or equivalent)\n",
    "        with open('/dev/null', 'w') as devnull:\n",
    "            subprocess.check_call(command, stdout=devnull, stderr=devnull)\n",
    "        print(f\"Successfully installed/upgraded: {package}\") # Inform user\n",
    "    except subprocess.CalledProcessError as e:\n",
    "        print(f\"Error installing {package}: {e}\", file=sys.stderr)\n",
    "    except Exception as e:  # Catch other potential exceptions\n",
    "        print(f\"An unexpected error occurred: {e}\", file=sys.stderr)\n",
    "\n",
    "# Example usage:  (replace with your package list)\n",
    "install_package(\"git+https://github.com/ildoonet/pytorch-gradual-warmup-lr.git\")\n",
    "install_package(\"geffnet\")\n",
    "install_package(\"albumentations\", upgrade=True) # Example with upgrade\n",
    "install_package(\"wandb\")\n",
    "install_package(\"opencv-python\")\n",
    "install_package(\"pytz\")\n",
    "install_package(\"timm\", upgrade=True)\n",
    "# Add near your other install commands\n",
    "install_package(\"grad-cam\")   \n",
    "install_package(\"ttach\") # pytorch-grad-cam sometimes uses this\n",
    "\n",
    "print(\"All packages installed.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "2f7c3239",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-18T04:28:24.778531Z",
     "iopub.status.busy": "2025-06-18T04:28:24.778262Z",
     "iopub.status.idle": "2025-06-18T04:28:53.248193Z",
     "shell.execute_reply": "2025-06-18T04:28:53.247495Z"
    },
    "papermill": {
     "duration": 28.48402,
     "end_time": "2025-06-18T04:28:53.249660",
     "exception": false,
     "start_time": "2025-06-18T04:28:24.765640",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Standard Libraries\n",
    "import os\n",
    "import time\n",
    "import warnings\n",
    "import logging\n",
    "import subprocess\n",
    "import traceback\n",
    "from datetime import datetime\n",
    "from tqdm import tqdm\n",
    "from tqdm.notebook import tqdm as tqdm_notebook\n",
    "\n",
    "# Data Handling and Visualization\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import PIL.Image\n",
    "import cv2\n",
    "import re\n",
    "# Machine Learning and Metrics\n",
    "from sklearn.model_selection import train_test_split, StratifiedKFold\n",
    "from sklearn.metrics import (\n",
    "    roc_auc_score, f1_score, accuracy_score, precision_score, recall_score,\n",
    "    classification_report, confusion_matrix, roc_curve, precision_recall_curve\n",
    ")\n",
    "from sklearn.calibration import calibration_curve\n",
    "from scipy.stats import wilcoxon\n",
    "\n",
    "# Deep Learning Frameworks\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.nn.functional as F\n",
    "import torch.optim as optim\n",
    "from torch.optim import lr_scheduler\n",
    "from torch.utils.data import (\n",
    "    TensorDataset, DataLoader, Dataset, RandomSampler, SubsetRandomSampler,\n",
    "    SequentialSampler, WeightedRandomSampler\n",
    ")\n",
    "from torch.amp import autocast as amp_autocast, GradScaler\n",
    "import torchvision\n",
    "import torchvision.transforms as transforms\n",
    "import math\n",
    "# Model Architectures and Utilities\n",
    "import timm\n",
    "from timm import create_model\n",
    "import geffnet\n",
    "from transformers import ViTFeatureExtractor, ViTModel, ViTConfig, SwinConfig, SwinModel\n",
    "\n",
    "# Learning Rate Schedulers\n",
    "from torch.optim.lr_scheduler import CosineAnnealingLR, ReduceLROnPlateau\n",
    "from warmup_scheduler import GradualWarmupScheduler\n",
    "# Add near your other imports\n",
    "from pytorch_grad_cam import GradCAM\n",
    "from pytorch_grad_cam.utils.model_targets import ClassifierOutputTarget\n",
    "from pytorch_grad_cam.utils.image import show_cam_on_image\n",
    "# Distributed Training\n",
    "from accelerate import Accelerator, notebook_launcher\n",
    "from torch.utils.data.distributed import DistributedSampler\n",
    "\n",
    "# Metrics and Evaluation\n",
    "from torchmetrics.classification import (\n",
    "    MulticlassAccuracy, MulticlassF1Score, MulticlassAUROC, MulticlassConfusionMatrix,\n",
    "    BinaryAUROC\n",
    ")\n",
    "from torchmetrics.functional.classification import binary_accuracy, binary_f1_score\n",
    "\n",
    "# Image Augmentation\n",
    "import albumentations as A\n",
    "\n",
    "from skimage.segmentation import slic\n",
    "\n",
    "# Timezone Handling\n",
    "import pytz\n",
    "from typing import Dict, Optional, Union\n",
    "\n",
    "# Experiment Tracking\n",
    "import wandb\n",
    "%matplotlib inline\n",
    "device = torch.device('cuda')\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'\n",
    "os.environ['PYTHONWARNINGS'] = 'ignore'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "0570cf91",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-18T04:28:53.275208Z",
     "iopub.status.busy": "2025-06-18T04:28:53.274739Z",
     "iopub.status.idle": "2025-06-18T04:28:54.150594Z",
     "shell.execute_reply": "2025-06-18T04:28:54.149866Z"
    },
    "papermill": {
     "duration": 0.889472,
     "end_time": "2025-06-18T04:28:54.151781",
     "exception": false,
     "start_time": "2025-06-18T04:28:53.262309",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[34m\u001b[1mwandb\u001b[0m: Using wandb-core as the SDK backend.  Please refer to https://wandb.me/wandb-core for more information.\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33marveda-ava86\u001b[0m (\u001b[33marveda-ava86-universitas-gadjah-mada-library\u001b[0m). Use \u001b[1m`wandb login --relogin`\u001b[0m to force relogin\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: \u001b[33mWARNING\u001b[0m If you're specifying your api key in code, ensure this code is not shared publicly.\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: \u001b[33mWARNING\u001b[0m Consider setting the WANDB_API_KEY environment variable, or running `wandb login` from the command line.\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: Appending key for api.wandb.ai to your netrc file: /root/.netrc\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from kaggle_secrets import UserSecretsClient\n",
    "user_secrets = UserSecretsClient()\n",
    "my_secret = user_secrets.get_secret(\"wandb_api_key\") \n",
    "wandb.login(key=my_secret)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "926152a8",
   "metadata": {
    "papermill": {
     "duration": 0.012076,
     "end_time": "2025-06-18T04:28:54.176495",
     "exception": false,
     "start_time": "2025-06-18T04:28:54.164419",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Parameter Configuration"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "dac5bbbe",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-18T04:28:54.201817Z",
     "iopub.status.busy": "2025-06-18T04:28:54.201595Z",
     "iopub.status.idle": "2025-06-18T04:28:54.209460Z",
     "shell.execute_reply": "2025-06-18T04:28:54.208833Z"
    },
    "papermill": {
     "duration": 0.021848,
     "end_time": "2025-06-18T04:28:54.210604",
     "exception": false,
     "start_time": "2025-06-18T04:28:54.188756",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Run Config: Model=swin_only, CNN=efficientnet_v2_m, UseMeta=True, UseExt=True\n",
      "NOTE: Forcing image_size to 384 for Swin model compatibility.\n",
      "CNN Size Tag: m, Target Image Size: 384x384\n",
      "Generated kernel_type: v2m_384_ext_meta\n",
      "Selected Data Directory Size: 384x384\n",
      "Comp Data Dir: ../input/jpeg-melanoma-384x384, Ext Data Dir: ../input/jpeg-isic2019-384x384\n",
      "Note: Batch size, accum steps, epoch phases are set dynamically.\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "# --- Core Run Configuration ---\n",
    "# SET THE CONFIGURATION FOR THIS SPECIFIC RUN:\n",
    "model_type = 'swin_only' # Options: 'efficientnetv2', 'hybrid_swin', 'swin_only'\n",
    "# Use the torch.hub names now for V2\n",
    "cnn_backbone_name = 'efficientnet_v2_m' # e.g., 'efficientnet_v2_s', 'efficientnet_v2_m', 'efficientnet_v2_l'\n",
    "# Use the TIMM name for Swin\n",
    "transformer_backbone_name = 'swin_base_patch4_window12_384.ms_in22k_ft_in1k' # Keep this for hybrid\n",
    "use_amp = True\n",
    "use_external = True\n",
    "use_meta = True\n",
    "DEBUG = False\n",
    "target_total_epochs = 30 \n",
    "# --- Standard Settings ---\n",
    "num_workers = 4\n",
    "init_lr = 1e-3 # Base LR\n",
    "\n",
    "# --- REMOVED Pretrained File Settings ---\n",
    "# model_dir = '../input/melanoma-winning-models'\n",
    "# pretrained_type = ...\n",
    "# i_fold = ...\n",
    "# model_file = ...\n",
    "\n",
    "print(f\"Run Config: Model={model_type}, CNN={cnn_backbone_name}, UseMeta={use_meta}, UseExt={use_external}\")\n",
    "\n",
    "# --- Helper Function ---\n",
    "def get_v2_size_map(v2_name_str):\n",
    "    if 'v2_s' in v2_name_str: return 's'\n",
    "    if 'v2_m' in v2_name_str: return 'm'\n",
    "    if 'v2_l' in v2_name_str: return 'l'\n",
    "    print(f\"Warning: Could not map V2 size from '{v2_name_str}'. Defaulting to 'm'.\")\n",
    "    return 'm'\n",
    "\n",
    "# --- Determine V2 Size and TARGET Image Size ---\n",
    "cnn_size_tag = get_v2_size_map(cnn_backbone_name)\n",
    "target_image_sizes_map = {'s': 384, 'm': 448, 'l': 480}\n",
    "image_size = 384\n",
    "# --- CORRECTED LINE ---\n",
    "if model_type in ['hybrid_swin', 'swin_only'] and '384' in transformer_backbone_name:\n",
    "# --- END CORRECTION ---\n",
    "        print(f\"NOTE: Forcing image_size to 384 for Swin model compatibility.\")\n",
    "        image_size = 384\n",
    "print(f\"CNN Size Tag: {cnn_size_tag}, Target Image Size: {image_size}x{image_size}\")\n",
    "\n",
    "# --- Generate kernel_type ---\n",
    "kernel_base = f\"{cnn_backbone_name.replace('_','').replace('efficientnet','')}\" # e.g., effnetv2m\n",
    "if model_type == 'hybrid_swin': kernel_base += f\"_{transformer_backbone_name.split('_')[0]}\"\n",
    "kernel_type = f\"{kernel_base}_{image_size}{'_ext' if use_external else ''}{'_meta' if use_meta else ''}\"\n",
    "print(f\"Generated kernel_type: {kernel_type}\")\n",
    "\n",
    "# --- Determine Data Directory Size ---\n",
    "available_data_sizes = [256, 384, 512]; data_dir_size = 384 if image_size <= 384 else 512\n",
    "print(f\"Selected Data Directory Size: {data_dir_size}x{data_dir_size}\")\n",
    "\n",
    "# --- Set Data Directory Paths ---\n",
    "data_dir = f'../input/jpeg-melanoma-{data_dir_size}x{data_dir_size}'\n",
    "data_dir2 = f'../input/jpeg-isic2019-{data_dir_size}x{data_dir_size}' if use_external else None\n",
    "print(f\"Comp Data Dir: {data_dir}\" + (f\", Ext Data Dir: {data_dir2}\" if data_dir2 else \"\"))\n",
    "\n",
    "# --- Dynamic Variables Note ---\n",
    "print(\"Note: Batch size, accum steps, epoch phases are set dynamically.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "82a6daf9",
   "metadata": {
    "papermill": {
     "duration": 0.012391,
     "end_time": "2025-06-18T04:28:54.235407",
     "exception": false,
     "start_time": "2025-06-18T04:28:54.223016",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Scaling Factors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "c1f1ca9c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-18T04:28:54.261006Z",
     "iopub.status.busy": "2025-06-18T04:28:54.260803Z",
     "iopub.status.idle": "2025-06-18T04:28:54.265661Z",
     "shell.execute_reply": "2025-06-18T04:28:54.265050Z"
    },
    "papermill": {
     "duration": 0.018844,
     "end_time": "2025-06-18T04:28:54.266919",
     "exception": false,
     "start_time": "2025-06-18T04:28:54.248075",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def configure_dynamic_parameters(model_type, cnn_backbone_name, use_meta, use_external):\n",
    "    \"\"\"\n",
    "    Calculates base scaling factors based ONLY on CNN size ('s', 'm', 'l').\n",
    "    Adaptations based on meta, external data, or hybrid type are REMOVED\n",
    "    to ensure consistent LR/Regularization multipliers across runs for purity.\n",
    "    Returns factors that will be applied later (e.g., in LLRD, WD, Dropout init).\n",
    "    \"\"\"\n",
    "    cnn_size_tag = get_v2_size_map(cnn_backbone_name)\n",
    "    print(f\"Configuring BASE scaling factors based on CNN size ONLY for: type='{model_type}', cnn='{cnn_backbone_name}' ({cnn_size_tag}), meta={use_meta}, external={use_external}\")\n",
    "    print(\"  NOTE: Multipliers for meta, external, hybrid are DISABLED for purity.\")\n",
    "\n",
    "    # --- Base Scales based ONLY on CNN Size ---\n",
    "    # Still apply a slight adjustment based on model scale, as this is common practice.\n",
    "    size_to_b_map = {'s': 3, 'm': 5, 'l': 7}\n",
    "    equiv_b_version = size_to_b_map.get(cnn_size_tag, 5)\n",
    "    # Base LR factor: Slightly lower for S, slightly higher for L relative to M (applied to base_lr later)\n",
    "    lr_base_scale = { 3: 0.9, 5: 1.0, 7: 1.1 } # Adjusted slightly: s: 0.9, m: 1.0, l: 1.1\n",
    "    # Base Regularization factor: Slightly higher for S, slightly lower for L (applied to WD/Dropout later)\n",
    "    reg_base_scale = { 3: 1.05, 5: 1.0, 7: 0.95 } # Adjusted slightly: s: 1.05, m: 1.0, l: 0.95\n",
    "    \n",
    "    current_base_lr_factor = lr_base_scale.get(equiv_b_version, 1.0)\n",
    "    current_base_reg_factor = reg_base_scale.get(equiv_b_version, 1.0)\n",
    "    print(f\"  Base factors based on CNN size '{cnn_size_tag}': LR Factor={current_base_lr_factor:.2f}, Reg Factor={current_base_reg_factor:.2f}\")\n",
    "\n",
    "    # --- Combine (Now only uses base factors) ---\n",
    "    final_lr_factor = current_base_lr_factor # * 1.0 (removed multiplier)\n",
    "    final_reg_factor = current_base_reg_factor # * 1.0 (removed multiplier)\n",
    "\n",
    "    # Clamp to reasonable bounds (still useful for the base factors)\n",
    "    final_lr_factor = max(0.5, min(final_lr_factor, 1.5)) # Clamp LR factor bounds if needed\n",
    "    final_reg_factor = max(0.5, min(final_reg_factor, 1.5)) # Clamp Reg factor bounds if needed\n",
    "\n",
    "    # Rename variables for clarity (these factors modify base LR/WD/Dropout later)\n",
    "    lr_adaptation_factor = round(final_lr_factor, 6)\n",
    "    regularization_factor = round(final_reg_factor, 6)\n",
    "\n",
    "    print(f\"  ==> Final Factors (Based ONLY on CNN Size): LR Adapt Factor={lr_adaptation_factor}, Reg Factor={regularization_factor}\")\n",
    "\n",
    "    # Return only the two factors\n",
    "    return lr_adaptation_factor, regularization_factor"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "90c55e70",
   "metadata": {
    "papermill": {
     "duration": 0.011872,
     "end_time": "2025-06-18T04:28:54.291173",
     "exception": false,
     "start_time": "2025-06-18T04:28:54.279301",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Data Preparation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "5bf3dd0a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-18T04:28:54.316329Z",
     "iopub.status.busy": "2025-06-18T04:28:54.316097Z",
     "iopub.status.idle": "2025-06-18T04:28:54.379116Z",
     "shell.execute_reply": "2025-06-18T04:28:54.378084Z"
    },
    "papermill": {
     "duration": 0.076977,
     "end_time": "2025-06-18T04:28:54.380344",
     "exception": false,
     "start_time": "2025-06-18T04:28:54.303367",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test Data Loaded - Shape: (10982, 8)\n",
      "Test Data Sample:\n",
      "      image_name  patient_id     sex  age_approx anatom_site_general_challenge  \\\n",
      "0  ISIC_0052060  IP_3579794    male        70.0                           NaN   \n",
      "1  ISIC_0052349  IP_7782715    male        40.0               lower extremity   \n",
      "2  ISIC_0058510  IP_7960270  female        55.0                         torso   \n",
      "3  ISIC_0073313  IP_6375035  female        50.0                         torso   \n",
      "4  ISIC_0073502  IP_0589375  female        45.0               lower extremity   \n",
      "\n",
      "   width  height                                           filepath  \n",
      "0   6000    4000  ../input/jpeg-melanoma-384x384/test/ISIC_00520...  \n",
      "1   6000    4000  ../input/jpeg-melanoma-384x384/test/ISIC_00523...  \n",
      "2   6000    4000  ../input/jpeg-melanoma-384x384/test/ISIC_00585...  \n",
      "3   6000    4000  ../input/jpeg-melanoma-384x384/test/ISIC_00733...  \n",
      "4   1920    1080  ../input/jpeg-melanoma-384x384/test/ISIC_00735...  \n"
     ]
    }
   ],
   "source": [
    "# Load test data\n",
    "df_test = pd.read_csv(os.path.join(data_dir, 'test.csv'))\n",
    "df_test['filepath'] = df_test['image_name'].apply(lambda x: os.path.join(data_dir, 'test', f'{x}.jpg'))\n",
    "print(\"Test Data Loaded - Shape:\", df_test.shape)\n",
    "print(\"Test Data Sample:\\n\", df_test.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "99038e35",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-18T04:28:54.406159Z",
     "iopub.status.busy": "2025-06-18T04:28:54.405922Z",
     "iopub.status.idle": "2025-06-18T04:28:54.579065Z",
     "shell.execute_reply": "2025-06-18T04:28:54.578153Z"
    },
    "papermill": {
     "duration": 0.187165,
     "end_time": "2025-06-18T04:28:54.580337",
     "exception": false,
     "start_time": "2025-06-18T04:28:54.393172",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Initial Train Data Shape: (33126, 11)\n",
      "Train Data Shape after tfrecord filter: (32692, 11)\n"
     ]
    }
   ],
   "source": [
    "# Load train data and filter\n",
    "df_train = pd.read_csv(os.path.join(data_dir, 'train.csv'))\n",
    "print(\"Initial Train Data Shape:\", df_train.shape)\n",
    "df_train = df_train[df_train['tfrecord'] != -1].reset_index(drop=True)\n",
    "print(\"Train Data Shape after tfrecord filter:\", df_train.shape)\n",
    "df_train['is_ext'] = 0\n",
    "df_train['filepath'] = df_train['image_name'].apply(lambda x: os.path.join(data_dir, 'train', f'{x}.jpg'))\n",
    "\n",
    "# Clean diagnosis labels\n",
    "df_train['diagnosis'] = df_train['diagnosis'].apply(lambda x: x.replace('seborrheic keratosis', 'BKL'))\n",
    "df_train['diagnosis'] = df_train['diagnosis'].apply(lambda x: x.replace('lichenoid keratosis', 'BKL'))\n",
    "df_train['diagnosis'] = df_train['diagnosis'].apply(lambda x: x.replace('solar lentigo', 'BKL'))\n",
    "df_train['diagnosis'] = df_train['diagnosis'].apply(lambda x: x.replace('lentigo NOS', 'BKL'))\n",
    "df_train['diagnosis'] = df_train['diagnosis'].apply(lambda x: x.replace('cafe-au-lait macule', 'unknown'))\n",
    "df_train['diagnosis'] = df_train['diagnosis'].apply(lambda x: x.replace('atypical melanocytic proliferation', 'unknown'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "570704e3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-18T04:28:54.606668Z",
     "iopub.status.busy": "2025-06-18T04:28:54.606395Z",
     "iopub.status.idle": "2025-06-18T04:28:54.768481Z",
     "shell.execute_reply": "2025-06-18T04:28:54.767436Z"
    },
    "papermill": {
     "duration": 0.17663,
     "end_time": "2025-06-18T04:28:54.769859",
     "exception": false,
     "start_time": "2025-06-18T04:28:54.593229",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "External Train Data Shape: (25331, 11)\n",
      "External Data Diagnosis Unique: ['nevus' 'melanoma' 'BKL' 'DF' 'SCC' 'BCC' 'VASC' 'AK']\n",
      "Combined Train Data Shape: (57964, 13)\n",
      "Diagnosis to Index Mapping: {'AK': 0, 'BCC': 1, 'BKL': 2, 'DF': 3, 'SCC': 4, 'VASC': 5, 'melanoma': 6, 'nevus': 7, 'unknown': 8}\n",
      "Target Value Counts:\n",
      " target\n",
      "8    26699\n",
      "7    18031\n",
      "6     5090\n",
      "1     3320\n",
      "2     2837\n",
      "0      867\n",
      "4      628\n",
      "5      253\n",
      "3      239\n",
      "Name: count, dtype: int64\n",
      "Number of unique classes (out_dim): 9\n",
      "Melanoma index (mel_idx): 6\n"
     ]
    }
   ],
   "source": [
    "# Add external data if enabled\n",
    "if use_external:\n",
    "    df_train2 = pd.read_csv(os.path.join(data_dir2, 'train.csv'))\n",
    "    print(\"External Train Data Shape:\", df_train2.shape)\n",
    "    df_train2 = df_train2[df_train2['tfrecord'] >= 0].reset_index(drop=True)\n",
    "    df_train2['is_ext'] = 1\n",
    "    df_train2['filepath'] = df_train2['image_name'].apply(lambda x: os.path.join(data_dir2, 'train', f'{x}.jpg'))\n",
    "    df_train2['diagnosis'] = df_train2['diagnosis'].apply(lambda x: x.replace('NV', 'nevus'))\n",
    "    df_train2['diagnosis'] = df_train2['diagnosis'].apply(lambda x: x.replace('MEL', 'melanoma'))\n",
    "    print(\"External Data Diagnosis Unique:\", df_train2['diagnosis'].unique())\n",
    "    \n",
    "    # Combine datasets\n",
    "    df_train = pd.concat([df_train, df_train2]).reset_index(drop=True)\n",
    "    print(\"Combined Train Data Shape:\", df_train.shape)\n",
    "    \n",
    "# Add assertion to ensure data isn't empty\n",
    "assert not df_train.empty, \"Error: df_train is empty after preparation!\"\n",
    "assert 'diagnosis' in df_train.columns, \"Error: 'diagnosis' column missing in df_train!\"\n",
    "\n",
    "# Map diagnosis to target indices\n",
    "diagnosis2idx = {d: idx for idx, d in enumerate(sorted(df_train.diagnosis.unique()))}\n",
    "df_train['target'] = df_train['diagnosis'].map(diagnosis2idx)\n",
    "mel_idx = diagnosis2idx['melanoma']\n",
    "print(\"Diagnosis to Index Mapping:\", diagnosis2idx)\n",
    "print(\"Target Value Counts:\\n\", df_train['target'].value_counts())\n",
    "\n",
    "# Dynamically set out_dim\n",
    "out_dim = len(df_train['target'].unique())\n",
    "print(f\"Number of unique classes (out_dim): {out_dim}\")\n",
    "print(f\"Melanoma index (mel_idx): {mel_idx}\")\n",
    "\n",
    "# Final assertions to verify critical variables\n",
    "assert mel_idx in df_train['target'].values, f\"Error: mel_idx ({mel_idx}) not found in target values!\"\n",
    "assert out_dim > 1, \"Error: out_dim is 1 or less, indicating no class variation!\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5ee5d01d",
   "metadata": {
    "papermill": {
     "duration": 0.01266,
     "end_time": "2025-06-18T04:28:54.796024",
     "exception": false,
     "start_time": "2025-06-18T04:28:54.783364",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Class Distribution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "1f991bb6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-18T04:28:54.821785Z",
     "iopub.status.busy": "2025-06-18T04:28:54.821488Z",
     "iopub.status.idle": "2025-06-18T04:28:55.572992Z",
     "shell.execute_reply": "2025-06-18T04:28:55.572009Z"
    },
    "papermill": {
     "duration": 0.766371,
     "end_time": "2025-06-18T04:28:55.574679",
     "exception": false,
     "start_time": "2025-06-18T04:28:54.808308",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Class distribution\n",
    "class_counts = df_train['diagnosis'].value_counts()\n",
    "total_samples = len(df_train)\n",
    "class_percentages = (class_counts / total_samples) * 100\n",
    "\n",
    "plt.figure(figsize=(12, 6))\n",
    "sns.barplot(x=class_counts.index, y=class_counts.values, palette='viridis')\n",
    "plt.title('Distribution of Diagnosis Classes', fontsize=16)\n",
    "plt.xlabel('Diagnosis', fontsize=14)\n",
    "plt.ylabel('Count', fontsize=14)\n",
    "plt.xticks(rotation=45)\n",
    "for i, count in enumerate(class_counts):\n",
    "    plt.text(i, count + 0.5, f'{class_percentages[i]:.2f}%', ha='center', fontsize=12)\n",
    "plt.tight_layout()\n",
    "plt.savefig('class_distribution.png', dpi=300)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0e2eadea",
   "metadata": {
    "papermill": {
     "duration": 0.01363,
     "end_time": "2025-06-18T04:28:55.602688",
     "exception": false,
     "start_time": "2025-06-18T04:28:55.589058",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Preprocess Meta Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "53405707",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-18T04:28:55.630489Z",
     "iopub.status.busy": "2025-06-18T04:28:55.630235Z",
     "iopub.status.idle": "2025-06-18T04:30:42.408560Z",
     "shell.execute_reply": "2025-06-18T04:30:42.407568Z"
    },
    "papermill": {
     "duration": 106.793858,
     "end_time": "2025-06-18T04:30:42.409884",
     "exception": false,
     "start_time": "2025-06-18T04:28:55.616026",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "One-hot encoding 'anatom_site_general_challenge'...\n",
      "Encoding 'sex' feature...\n",
      "Normalizing 'age_approx' feature...\n",
      "Handling 'patient_id' feature...\n",
      "Calculating 'n_images' per patient...\n",
      "Calculating image sizes...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Processing training images: 100%|██████████| 57964/57964 [01:31<00:00, 632.59image/s]\n",
      "Processing test images: 100%|██████████| 10982/10982 [00:15<00:00, 728.73image/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Meta features created: ['sex', 'age_approx', 'n_images', 'image_size', 'site_anterior torso', 'site_head/neck', 'site_lateral torso', 'site_lower extremity', 'site_oral/genital', 'site_palms/soles', 'site_posterior torso', 'site_torso', 'site_upper extremity', 'site_nan']\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "from tqdm import tqdm  # Ensure this import is present\n",
    "\n",
    "if use_meta:\n",
    "    # One-hot encoding of anatom_site_general_challenge feature\n",
    "    print(\"One-hot encoding 'anatom_site_general_challenge'...\")\n",
    "    concat = pd.concat([df_train['anatom_site_general_challenge'], df_test['anatom_site_general_challenge']], ignore_index=True)\n",
    "    dummies = pd.get_dummies(concat, dummy_na=True, dtype=np.uint8, prefix='site')\n",
    "    df_train = pd.concat([df_train, dummies.iloc[:df_train.shape[0]]], axis=1)\n",
    "    df_test = pd.concat([df_test, dummies.iloc[df_train.shape[0]:].reset_index(drop=True)], axis=1)\n",
    "    \n",
    "    # Sex features\n",
    "    print(\"Encoding 'sex' feature...\")\n",
    "    df_train['sex'] = df_train['sex'].map({'male': 1, 'female': 0})\n",
    "    df_test['sex'] = df_test['sex'].map({'male': 1, 'female': 0})\n",
    "    df_train['sex'] = df_train['sex'].fillna(-1)\n",
    "    df_test['sex'] = df_test['sex'].fillna(-1)\n",
    "    \n",
    "    # Age features\n",
    "    print(\"Normalizing 'age_approx' feature...\")\n",
    "    df_train['age_approx'] /= 90\n",
    "    df_test['age_approx'] /= 90\n",
    "    df_train['age_approx'] = df_train['age_approx'].fillna(0)\n",
    "    df_test['age_approx'] = df_test['age_approx'].fillna(0)\n",
    "        \n",
    "    # Patient ID features\n",
    "    print(\"Handling 'patient_id' feature...\")\n",
    "    df_train['patient_id'] = df_train['patient_id'].fillna(0)\n",
    "    \n",
    "    # n_images per user\n",
    "    print(\"Calculating 'n_images' per patient...\")\n",
    "    df_train['n_images'] = df_train.patient_id.map(df_train.groupby(['patient_id']).image_name.count())\n",
    "    df_test['n_images'] = df_test.patient_id.map(df_test.groupby(['patient_id']).image_name.count())\n",
    "    df_train.loc[df_train['patient_id'] == -1, 'n_images'] = 1\n",
    "    df_train['n_images'] = np.log1p(df_train['n_images'].values)\n",
    "    df_test['n_images'] = np.log1p(df_test['n_images'].values)\n",
    "    \n",
    "    # Image size\n",
    "    print(\"Calculating image sizes...\")\n",
    "    train_images = df_train['filepath'].values\n",
    "    train_sizes = np.zeros(train_images.shape[0])\n",
    "    for i, img_path in enumerate(tqdm(train_images, desc=\"Processing training images\", unit=\"image\")):\n",
    "        train_sizes[i] = os.path.getsize(img_path)\n",
    "    df_train['image_size'] = np.log(train_sizes)\n",
    "    \n",
    "    test_images = df_test['filepath'].values\n",
    "    test_sizes = np.zeros(test_images.shape[0])\n",
    "    for i, img_path in enumerate(tqdm(test_images, desc=\"Processing test images\", unit=\"image\")):\n",
    "        test_sizes[i] = os.path.getsize(img_path)\n",
    "    df_test['image_size'] = np.log(test_sizes)\n",
    "    # Improved age normalization\n",
    "    mean_age = df_train['age_approx'].mean()\n",
    "    std_age = df_train['age_approx'].std()\n",
    "    df_train['age_approx'] = (df_train['age_approx'].fillna(mean_age) - mean_age) / std_age\n",
    "    df_test['age_approx'] = (df_test['age_approx'].fillna(mean_age) - mean_age) / std_age\n",
    "    \n",
    "    # Log-transformed features standardization\n",
    "    df_train['n_images'] = (df_train['n_images'] - df_train['n_images'].mean()) / df_train['n_images'].std()\n",
    "    df_test['n_images'] = (df_test['n_images'] - df_train['n_images'].mean()) / df_train['n_images'].std()\n",
    "    # Meta features\n",
    "    meta_features = ['sex', 'age_approx', 'n_images', 'image_size'] + [col for col in df_train.columns if col.startswith('site_')]\n",
    "    n_meta_features = len(meta_features)\n",
    "    print(f\"Meta features created: {meta_features}\")\n",
    "else:\n",
    "    n_meta_features = 0\n",
    "    print(\"Meta features disabled.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "024b9182",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-18T04:30:42.523949Z",
     "iopub.status.busy": "2025-06-18T04:30:42.523650Z",
     "iopub.status.idle": "2025-06-18T04:30:42.528463Z",
     "shell.execute_reply": "2025-06-18T04:30:42.527662Z"
    },
    "papermill": {
     "duration": 0.062633,
     "end_time": "2025-06-18T04:30:42.529721",
     "exception": false,
     "start_time": "2025-06-18T04:30:42.467088",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "14"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "n_meta_features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "90a05739",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-18T04:30:42.685221Z",
     "iopub.status.busy": "2025-06-18T04:30:42.684890Z",
     "iopub.status.idle": "2025-06-18T04:30:42.701155Z",
     "shell.execute_reply": "2025-06-18T04:30:42.700015Z"
    },
    "papermill": {
     "duration": 0.076058,
     "end_time": "2025-06-18T04:30:42.702493",
     "exception": false,
     "start_time": "2025-06-18T04:30:42.626435",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                     image_name  patient_id  sex  age_approx  \\\n",
      "53464              ISIC_0066151          -1  0.0   -0.925353   \n",
      "35425  ISIC_0015466_downsampled          -1  1.0   -1.221184   \n",
      "10900              ISIC_3381550  IP_4479736  0.0   -1.517015   \n",
      "13779              ISIC_4254745  IP_2853271  1.0   -0.925353   \n",
      "44921              ISIC_0033689          -1  0.0   -1.221184   \n",
      "\n",
      "      anatom_site_general_challenge diagnosis benign_malignant  target  \\\n",
      "53464                           NaN     nevus           benign       7   \n",
      "35425                anterior torso     nevus           benign       7   \n",
      "10900                         torso   unknown           benign       8   \n",
      "13779                         torso   unknown           benign       8   \n",
      "44921               lower extremity     nevus           benign       7   \n",
      "\n",
      "       tfrecord  width  ...  site_lateral torso  site_lower extremity  \\\n",
      "53464        21   1024  ...                   0                     0   \n",
      "35425        22   1024  ...                   0                     0   \n",
      "10900         2   6000  ...                   0                     0   \n",
      "13779        11    640  ...                   0                     0   \n",
      "44921         4    600  ...                   0                     1   \n",
      "\n",
      "      site_oral/genital  site_palms/soles  site_posterior torso  site_torso  \\\n",
      "53464                 0                 0                     0           0   \n",
      "35425                 0                 0                     0           0   \n",
      "10900                 0                 0                     0           1   \n",
      "13779                 0                 0                     0           1   \n",
      "44921                 0                 0                     0           0   \n",
      "\n",
      "       site_upper extremity  site_nan  n_images  image_size  \n",
      "53464                     0         1 -1.033063   10.402473  \n",
      "35425                     0         0 -1.033063   10.816393  \n",
      "10900                     0         0  1.946873   10.192980  \n",
      "13779                     0         0  0.395029   10.624590  \n",
      "44921                     0         0 -1.033063   10.661064  \n",
      "\n",
      "[5 rows x 25 columns]\n"
     ]
    }
   ],
   "source": [
    "# Display a random sample of 5 rows\n",
    "print(df_train.sample(5))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cf09572d",
   "metadata": {
    "papermill": {
     "duration": 0.059834,
     "end_time": "2025-06-18T04:30:42.823024",
     "exception": false,
     "start_time": "2025-06-18T04:30:42.763190",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Define Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "034fd55c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-18T04:30:42.934235Z",
     "iopub.status.busy": "2025-06-18T04:30:42.933967Z",
     "iopub.status.idle": "2025-06-18T04:30:42.940182Z",
     "shell.execute_reply": "2025-06-18T04:30:42.939367Z"
    },
    "papermill": {
     "duration": 0.063136,
     "end_time": "2025-06-18T04:30:42.941399",
     "exception": false,
     "start_time": "2025-06-18T04:30:42.878263",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class SIIMISICDataset(Dataset):\n",
    "    def __init__(self, csv, split, mode, transform=None):\n",
    "\n",
    "        self.csv = csv.reset_index(drop=True)\n",
    "        self.split = split\n",
    "        self.mode = mode\n",
    "        self.transform = transform\n",
    "\n",
    "    def __len__(self):\n",
    "        return self.csv.shape[0]\n",
    "\n",
    "    def __getitem__(self, index):\n",
    "        row = self.csv.iloc[index]\n",
    "        \n",
    "        image = cv2.imread(row.filepath)\n",
    "        image = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)\n",
    "\n",
    "        if self.transform is not None:\n",
    "            res = self.transform(image=image)\n",
    "            image = res['image'].astype(np.float32)\n",
    "        else:\n",
    "            image = image.astype(np.float32)\n",
    "\n",
    "        image = image.transpose(2, 0, 1)\n",
    "\n",
    "        if use_meta:\n",
    "            data = (torch.tensor(image).float(), torch.tensor(self.csv.iloc[index][meta_features]).float())\n",
    "        else:\n",
    "            data = torch.tensor(image).float()\n",
    "\n",
    "        if self.mode == 'test':\n",
    "            return data\n",
    "        else:\n",
    "            return data, torch.tensor(self.csv.iloc[index].target).long()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b2d47317",
   "metadata": {
    "papermill": {
     "duration": 0.054991,
     "end_time": "2025-06-18T04:30:43.051290",
     "exception": false,
     "start_time": "2025-06-18T04:30:42.996299",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Augmentations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "0f352f2f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-18T04:30:43.162390Z",
     "iopub.status.busy": "2025-06-18T04:30:43.162120Z",
     "iopub.status.idle": "2025-06-18T04:30:43.181147Z",
     "shell.execute_reply": "2025-06-18T04:30:43.180471Z"
    },
    "papermill": {
     "duration": 0.076071,
     "end_time": "2025-06-18T04:30:43.182377",
     "exception": false,
     "start_time": "2025-06-18T04:30:43.106306",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Defining standard training and validation transforms using image_size: 384\n",
      "Standard transforms_train and transforms_val defined.\n"
     ]
    }
   ],
   "source": [
    "import albumentations as A # Use A alias if used elsewhere, or albumentations directly\n",
    "\n",
    "print(f\"Defining standard training and validation transforms using image_size: {image_size}\")\n",
    "\n",
    "transforms_train = A.Compose([\n",
    "    A.Transpose(p=0.5),\n",
    "    A.VerticalFlip(p=0.5),\n",
    "    A.HorizontalFlip(p=0.5),\n",
    "    # A.RandomBrightness(limit=0.2, p=0.75), # Older version uses this\n",
    "    # A.RandomContrast(limit=0.2, p=0.75),  # Older version uses this\n",
    "    A.RandomBrightnessContrast(limit=0.2, p=0.75), # Newer version combines these\n",
    "\n",
    "    A.OneOf([\n",
    "        A.MotionBlur(blur_limit=5),\n",
    "        A.MedianBlur(blur_limit=5),\n",
    "        A.GaussianBlur(blur_limit=5),\n",
    "        A.GaussNoise(var_limit=(5.0, 30.0)),\n",
    "    ], p=0.7),\n",
    "\n",
    "    A.OneOf([\n",
    "        A.OpticalDistortion(distort_limit=1.0),\n",
    "        A.GridDistortion(num_steps=5, distort_limit=1.),\n",
    "        A.ElasticTransform(alpha=3),\n",
    "    ], p=0.7),\n",
    "\n",
    "    A.CLAHE(clip_limit=4.0, p=0.7),\n",
    "    A.HueSaturationValue(hue_shift_limit=10, sat_shift_limit=20, val_shift_limit=10, p=0.5),\n",
    "    A.ShiftScaleRotate(shift_limit=0.1, scale_limit=0.1, rotate_limit=15, border_mode=0, p=0.85),\n",
    "    A.Resize(image_size, image_size), # Ensure image_size is defined before this cell\n",
    "    # A.Cutout(max_h_size=int(image_size * 0.375), max_w_size=int(image_size * 0.375), num_holes=1, p=0.7), # Older Cutout\n",
    "    A.CoarseDropout(max_holes=1, max_height=int(image_size * 0.375), max_width=int(image_size * 0.375),\n",
    "                    min_holes=1, min_height=int(image_size * 0.1), min_width=int(image_size * 0.1), # Define min sizes\n",
    "                    fill_value=0, p=0.7), # Newer CoarseDropout is preferred replacement for Cutout\n",
    "    A.Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225)) # Standard normalization\n",
    "])\n",
    "\n",
    "transforms_val = A.Compose([\n",
    "    A.Resize(image_size, image_size),\n",
    "    A.Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))\n",
    "])\n",
    "\n",
    "print(\"Standard transforms_train and transforms_val defined.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "e68970f4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-18T04:30:43.295251Z",
     "iopub.status.busy": "2025-06-18T04:30:43.295042Z",
     "iopub.status.idle": "2025-06-18T04:30:43.299117Z",
     "shell.execute_reply": "2025-06-18T04:30:43.298407Z"
    },
    "papermill": {
     "duration": 0.062296,
     "end_time": "2025-06-18T04:30:43.300248",
     "exception": false,
     "start_time": "2025-06-18T04:30:43.237952",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Minimal transform for original image (just resize and normalize)\n",
    "transforms_original = A.Compose([\n",
    "    A.Resize(image_size, image_size),  # Match augmented image size\n",
    "    A.Normalize()\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "d44d6f54",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-18T04:30:43.410999Z",
     "iopub.status.busy": "2025-06-18T04:30:43.410791Z",
     "iopub.status.idle": "2025-06-18T04:30:44.496195Z",
     "shell.execute_reply": "2025-06-18T04:30:44.495217Z"
    },
    "papermill": {
     "duration": 1.156784,
     "end_time": "2025-06-18T04:30:44.511950",
     "exception": false,
     "start_time": "2025-06-18T04:30:43.355166",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loading image: ../input/jpeg-isic2019-384x384/train/ISIC_0031294.jpg\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1800x700 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Pastikan df_train sudah ada dan memiliki kolom 'filepath'\n",
    "# Contoh load jika belum ada (SESUAIKAN PATH)\n",
    "if 'df_train' not in locals():\n",
    "     print(\"Warning: 'df_train' not found. Attempting to load example data structure.\")\n",
    "     # Ganti path ini sesuai lokasi data Anda jika menjalankan di luar Kaggle\n",
    "     data_dir_example = '../input/jpeg-melanoma-384x384' # Ganti jika perlu\n",
    "     train_csv_path = os.path.join(data_dir_example, 'train.csv')\n",
    "     if os.path.exists(train_csv_path):\n",
    "         df_train = pd.read_csv(train_csv_path)\n",
    "         # Buat kolom filepath jika belum ada\n",
    "         if 'filepath' not in df_train.columns:\n",
    "              image_folder = os.path.join(data_dir_example, 'train')\n",
    "              df_train['filepath'] = df_train['image_name'].apply(lambda x: os.path.join(image_folder, f'{x}.jpg'))\n",
    "         df_train = df_train.dropna(subset=['filepath']).reset_index(drop=True) # Hapus baris jika path tidak valid\n",
    "         print(f\"Loaded df_train with {len(df_train)} samples.\")\n",
    "     else:\n",
    "         print(f\"Error: Train CSV not found at {train_csv_path}. Cannot proceed with visualization.\")\n",
    "         df_train = pd.DataFrame() # Buat dataframe kosong\n",
    "\n",
    "import cv2\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import albumentations as A\n",
    "import random\n",
    "import os\n",
    "import pandas as pd\n",
    "import sys\n",
    "\n",
    "# --- Konfigurasi & Prasyarat (Sama seperti sebelumnya) ---\n",
    "# ... (pastikan image_size, transforms_train, df_train didefinisikan) ...\n",
    "\n",
    "# --- Fungsi Denormalisasi (Sama seperti sebelumnya) ---\n",
    "def denormalize(img_array, mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225)):\n",
    "    \"\"\"Reverses the normalization applied by A.Normalize for visualization.\"\"\"\n",
    "    std_array = np.array(std).reshape(1, 1, 3)\n",
    "    mean_array = np.array(mean).reshape(1, 1, 3)\n",
    "    std_array[std_array == 0] = 1e-6 \n",
    "    img_denorm = (img_array * std_array) + mean_array\n",
    "    img_denorm = np.clip(img_denorm, 0, 1)\n",
    "    return img_denorm\n",
    "\n",
    "# --- Visualisasi ---\n",
    "NUM_AUG_EXAMPLES = 2 # Anda bisa tetap 4 atau sesuaikan\n",
    "FIG_WIDTH_PER_PLOT = 6 # Lebar per subplot\n",
    "FIG_HEIGHT = 7         # Tinggi figure keseluruhan (lebih tinggi)\n",
    "\n",
    "if 'df_train' in locals() and not df_train.empty:\n",
    "    try:\n",
    "        sample_row = df_train.sample(1).iloc[0]\n",
    "        image_path = sample_row['filepath']\n",
    "        image_name = sample_row.get('image_name', os.path.basename(image_path))\n",
    "\n",
    "        print(f\"Loading image: {image_path}\")\n",
    "        original_img_bgr = cv2.imread(image_path)\n",
    "\n",
    "        if original_img_bgr is None:\n",
    "            print(f\"Error: Could not read image at {image_path}\", file=sys.stderr)\n",
    "        else:\n",
    "            original_img_rgb = cv2.cvtColor(original_img_bgr, cv2.COLOR_BGR2RGB)\n",
    "            original_img_resized = cv2.resize(original_img_rgb, (image_size, image_size))\n",
    "            original_img_display = original_img_resized / 255.0\n",
    "\n",
    "            # Buat figure dengan ukuran yang disesuaikan\n",
    "            fig, axes = plt.subplots(1, NUM_AUG_EXAMPLES + 1,\n",
    "                                     figsize=(FIG_WIDTH_PER_PLOT * (NUM_AUG_EXAMPLES + 1), FIG_HEIGHT))\n",
    "            plt.suptitle(f\"Augmentation Examples for: {image_name}\", fontsize=18, y=0.98) # Sesuaikan posisi Y\n",
    "\n",
    "            # Tampilkan gambar asli\n",
    "            axes[0].imshow(original_img_display)\n",
    "            axes[0].set_title(\"Original (Resized)\", fontsize=12)\n",
    "            axes[0].axis('off')\n",
    "\n",
    "            # Terapkan augmentasi dan tampilkan\n",
    "            for i in range(NUM_AUG_EXAMPLES):\n",
    "                augmented_data = transforms_train(image=original_img_rgb)\n",
    "                augmented_img_normalized = augmented_data['image']\n",
    "                augmented_img_display = denormalize(augmented_img_normalized)\n",
    "\n",
    "                axes[i+1].imshow(augmented_img_display)\n",
    "\n",
    "                # Generate caption (sama seperti sebelumnya)\n",
    "                potential_transforms = []\n",
    "                if random.random() < 0.5: potential_transforms.append(\"Flip H\")\n",
    "                if random.random() < 0.5: potential_transforms.append(\"Flip V\")\n",
    "                if random.random() < 0.5: potential_transforms.append(\"Transpose\")\n",
    "                if random.random() < 0.85: potential_transforms.append(\"Shift/Scale/Rotate\")\n",
    "                if random.random() < 0.75: potential_transforms.append(\"Bright/Contrast\") # Persingkat\n",
    "                if random.random() < 0.5: potential_transforms.append(\"HSV\")\n",
    "                if random.random() < 0.7: potential_transforms.append(\"CLAHE\")\n",
    "                if random.random() < 0.7: potential_transforms.append(\"Blur/Noise\")\n",
    "                if random.random() < 0.7: potential_transforms.append(\"Distortion\")\n",
    "                if random.random() < 0.7: potential_transforms.append(\"Dropout\")\n",
    "\n",
    "                caption = f\"Augmented {i+1}\"\n",
    "                if potential_transforms:\n",
    "                   # Batasi jumlah item di caption jika terlalu panjang\n",
    "                   caption += \"\\n(\" + \", \".join(potential_transforms[:4]) + (\"...\" if len(potential_transforms)>4 else \"\") + \")\"\n",
    "                else:\n",
    "                   caption += \"\\n(No major transforms)\"\n",
    "\n",
    "                axes[i+1].set_title(caption, fontsize=10) # Ukuran font judul subplot\n",
    "                axes[i+1].axis('off')\n",
    "\n",
    "            # Gunakan subplots_adjust untuk spasi\n",
    "            # Sesuaikan nilai wspace (horizontal), hspace (vertical), top, bottom, left, right\n",
    "            plt.subplots_adjust(wspace=0.1, hspace=0.1, top=0.85, bottom=0.05, left=0.05, right=0.95)\n",
    "\n",
    "            plt.show()\n",
    "\n",
    "    except FileNotFoundError:\n",
    "        print(f\"Error: File not found at {image_path}. Ensure dataset path is correct.\", file=sys.stderr)\n",
    "    except Exception as e:\n",
    "        print(f\"An error occurred during visualization: {e}\", file=sys.stderr)\n",
    "        import traceback\n",
    "        traceback.print_exc()\n",
    "else:\n",
    "    print(\"Skipping visualization because df_train is not loaded or is empty.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "b342a953",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-18T04:30:44.665721Z",
     "iopub.status.busy": "2025-06-18T04:30:44.665305Z",
     "iopub.status.idle": "2025-06-18T04:30:44.668785Z",
     "shell.execute_reply": "2025-06-18T04:30:44.668137Z"
    },
    "jupyter": {
     "source_hidden": true
    },
    "papermill": {
     "duration": 0.080439,
     "end_time": "2025-06-18T04:30:44.670086",
     "exception": false,
     "start_time": "2025-06-18T04:30:44.589647",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# # Create datasets\n",
    "# df_show = df_train.sample(min(1000, len(df_train)))  # Sample dataset\n",
    "# dataset_original = SIIMISICDataset(df_show, 'train', 'train', transform=transforms_original)  # Original images\n",
    "# dataset_augmented = SIIMISICDataset(df_show, 'train', 'train', transform=transforms_train)   # Augmented images\n",
    "\n",
    "# # Reverse mapping for labels (assume diagnosis2idx is defined earlier)\n",
    "# idx2diagnosis = {v: k for k, v in diagnosis2idx.items()}\n",
    "\n",
    "# # Display original and augmented images side by side\n",
    "# from pylab import rcParams\n",
    "# rcParams['figure.figsize'] = 20, 10\n",
    "\n",
    "# for i in range(2):  # Show 2 rows\n",
    "#     f, axarr = plt.subplots(2, 5)  # 2 rows: original (top), augmented (bottom); 5 columns\n",
    "#     for p in range(5):\n",
    "#         idx = np.random.randint(0, len(dataset_original))  # Same index for both datasets\n",
    "        \n",
    "#         # Original image\n",
    "#         img_original, label_tensor = dataset_original[idx]\n",
    "#         if use_meta:\n",
    "#             img_original = img_original[0]  # Extract image tensor if metadata is used\n",
    "#         label_idx = label_tensor.item()\n",
    "#         label_name = idx2diagnosis[label_idx]\n",
    "        \n",
    "#         # Augmented image\n",
    "#         img_augmented, _ = dataset_augmented[idx]  # Same index, ignore label since it’s identical\n",
    "#         if use_meta:\n",
    "#             img_augmented = img_augmented[0]\n",
    "\n",
    "#         # Plot original (top row)\n",
    "#         axarr[0, p].imshow(img_original.transpose(0, 1).transpose(1, 2).squeeze())\n",
    "#         axarr[0, p].set_title(f\"Original: {label_name}\")\n",
    "#         axarr[0, p].axis('off')\n",
    "\n",
    "#         # Plot augmented (bottom row)\n",
    "#         axarr[1, p].imshow(img_augmented.transpose(0, 1).transpose(1, 2).squeeze())\n",
    "#         axarr[1, p].set_title(f\"Augmented: {label_name}\")\n",
    "#         axarr[1, p].axis('off')\n",
    "\n",
    "#     plt.tight_layout()\n",
    "#     plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4aad800e",
   "metadata": {
    "papermill": {
     "duration": 0.072385,
     "end_time": "2025-06-18T04:30:44.814961",
     "exception": false,
     "start_time": "2025-06-18T04:30:44.742576",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Pretrained Model Helper"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "45166df8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-18T04:30:44.961750Z",
     "iopub.status.busy": "2025-06-18T04:30:44.961428Z",
     "iopub.status.idle": "2025-06-18T04:30:45.000579Z",
     "shell.execute_reply": "2025-06-18T04:30:44.999640Z"
    },
    "papermill": {
     "duration": 0.114626,
     "end_time": "2025-06-18T04:30:45.001784",
     "exception": false,
     "start_time": "2025-06-18T04:30:44.887158",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Successfully imported required components from torchvision.\n",
      "Torchvision EfficientNet V2 classes and helpers defined (Corrected Syntax).\n"
     ]
    }
   ],
   "source": [
    "# --- Torchvision EfficientNet Implementation (Corrected Syntax) ---\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "from torch import Tensor\n",
    "from dataclasses import dataclass\n",
    "from functools import partial\n",
    "from typing import Any, Callable, Dict, List, Optional, Sequence, Union, Tuple\n",
    "import math\n",
    "import copy\n",
    "\n",
    "# --- Essential Dependencies from Torchvision ---\n",
    "# Make sure torchvision is installed (`pip install torchvision`)\n",
    "try:\n",
    "    from torchvision.ops import StochasticDepth\n",
    "    from torchvision.ops.misc import Conv2dNormActivation, SqueezeExcitation\n",
    "    from torchvision.models._api import WeightsEnum, Weights\n",
    "    from torchvision.models._utils import handle_legacy_interface, _ovewrite_named_param\n",
    "    from torch.hub import load_state_dict_from_url\n",
    "    print(\"Successfully imported required components from torchvision.\")\n",
    "except ImportError as e:\n",
    "    print(f\"ERROR: Failed to import components from torchvision: {e}\")\n",
    "    print(\"Please ensure torchvision is installed and compatible.\")\n",
    "    # Raising an error might be better than continuing with non-functional dummies\n",
    "    raise ImportError(\"Torchvision components required for EfficientNet definition are missing.\") from e\n",
    "\n",
    "# Utility function (ensure this is defined correctly)\n",
    "def _make_divisible(v: float, divisor: int, min_value: Optional[int] = None) -> int:\n",
    "    if min_value is None: min_value = divisor\n",
    "    new_v = max(min_value, int(v + divisor / 2) // divisor * divisor)\n",
    "    if new_v < 0.9 * v: new_v += divisor\n",
    "    return new_v\n",
    "\n",
    "# --- Core Configuration Classes ---\n",
    "@dataclass\n",
    "class _MBConvConfig:\n",
    "    expand_ratio: float\n",
    "    kernel: int\n",
    "    stride: int\n",
    "    input_channels: int\n",
    "    out_channels: int\n",
    "    num_layers: int\n",
    "    block: Callable[..., nn.Module]\n",
    "\n",
    "    @staticmethod\n",
    "    def adjust_channels(channels: int, width_mult: float, min_value: Optional[int]=None) -> int:\n",
    "        return _make_divisible(channels * width_mult, 8, min_value)\n",
    "\n",
    "class MBConvConfig(_MBConvConfig):\n",
    "    def __init__(self, expand_ratio: float, kernel: int, stride: int, input_channels: int,\n",
    "                 out_channels: int, num_layers: int, width_mult: float = 1.0,\n",
    "                 depth_mult: float = 1.0, block: Optional[Callable[..., nn.Module]] = None):\n",
    "        input_channels = self.adjust_channels(input_channels, width_mult)\n",
    "        out_channels = self.adjust_channels(out_channels, width_mult)\n",
    "        num_layers = self.adjust_depth(num_layers, depth_mult)\n",
    "        if block is None:\n",
    "            block = MBConv\n",
    "        super().__init__(expand_ratio, kernel, stride, input_channels, out_channels, num_layers, block)\n",
    "\n",
    "    @staticmethod\n",
    "    def adjust_depth(num_layers: int, depth_mult: float):\n",
    "        return int(math.ceil(num_layers * depth_mult))\n",
    "\n",
    "class FusedMBConvConfig(_MBConvConfig):\n",
    "    def __init__(self, expand_ratio: float, kernel: int, stride: int, input_channels: int,\n",
    "                 out_channels: int, num_layers: int, block: Optional[Callable[..., nn.Module]] = None):\n",
    "        if block is None:\n",
    "            block = FusedMBConv\n",
    "        super().__init__(expand_ratio, kernel, stride, input_channels, out_channels, num_layers, block)\n",
    "\n",
    "# --- Convolutional Block Classes ---\n",
    "class MBConv(nn.Module):\n",
    "    def __init__(self, cnf: MBConvConfig, stochastic_depth_prob: float,\n",
    "                 norm_layer: Callable[..., nn.Module], se_layer: Callable[..., nn.Module] = SqueezeExcitation):\n",
    "        super().__init__()\n",
    "        if not (1 <= cnf.stride <= 2): raise ValueError(\"illegal stride value\")\n",
    "\n",
    "        self.use_res_connect = cnf.stride == 1 and cnf.input_channels == cnf.out_channels\n",
    "        layers: List[nn.Module] = []\n",
    "        activation_layer = nn.SiLU\n",
    "\n",
    "        # Expand phase\n",
    "        expanded_channels = cnf.adjust_channels(cnf.input_channels, cnf.expand_ratio)\n",
    "        if expanded_channels != cnf.input_channels:\n",
    "            layers.append(Conv2dNormActivation(cnf.input_channels, expanded_channels, kernel_size=1,\n",
    "                                                norm_layer=norm_layer, activation_layer=activation_layer))\n",
    "        # Depthwise convolution phase\n",
    "        layers.append(Conv2dNormActivation(expanded_channels, expanded_channels, kernel_size=cnf.kernel,\n",
    "                                            stride=cnf.stride, groups=expanded_channels, norm_layer=norm_layer,\n",
    "                                            activation_layer=activation_layer))\n",
    "        # Squeeze and excitation layer\n",
    "        squeeze_channels = max(1, cnf.input_channels // 4)\n",
    "        layers.append(se_layer(expanded_channels, squeeze_channels, activation=partial(nn.SiLU, inplace=True)))\n",
    "        # Pointwise convolution phase\n",
    "        layers.append(Conv2dNormActivation(expanded_channels, cnf.out_channels, kernel_size=1,\n",
    "                                            norm_layer=norm_layer, activation_layer=None))\n",
    "\n",
    "        self.block = nn.Sequential(*layers)\n",
    "        self.stochastic_depth = StochasticDepth(stochastic_depth_prob, \"row\")\n",
    "        self.out_channels = cnf.out_channels\n",
    "\n",
    "    def forward(self, input: Tensor) -> Tensor:\n",
    "        result = self.block(input)\n",
    "        if self.use_res_connect:\n",
    "            result = self.stochastic_depth(result)\n",
    "            result += input\n",
    "        return result\n",
    "\n",
    "class FusedMBConv(nn.Module):\n",
    "    def __init__(self, cnf: FusedMBConvConfig, stochastic_depth_prob: float,\n",
    "                 norm_layer: Callable[..., nn.Module]):\n",
    "        super().__init__()\n",
    "        if not (1 <= cnf.stride <= 2): raise ValueError(\"illegal stride value\")\n",
    "\n",
    "        self.use_res_connect = cnf.stride == 1 and cnf.input_channels == cnf.out_channels\n",
    "        layers: List[nn.Module] = []\n",
    "        activation_layer = nn.SiLU\n",
    "\n",
    "        expanded_channels = cnf.adjust_channels(cnf.input_channels, cnf.expand_ratio)\n",
    "        if expanded_channels != cnf.input_channels:\n",
    "            # Fused expand\n",
    "            layers.append(Conv2dNormActivation(cnf.input_channels, expanded_channels, kernel_size=cnf.kernel,\n",
    "                                                stride=cnf.stride, norm_layer=norm_layer, activation_layer=activation_layer))\n",
    "            # Project\n",
    "            layers.append(Conv2dNormActivation(expanded_channels, cnf.out_channels, kernel_size=1,\n",
    "                                                norm_layer=norm_layer, activation_layer=None))\n",
    "        else:\n",
    "            # Single convolution\n",
    "            layers.append(Conv2dNormActivation(cnf.input_channels, cnf.out_channels, kernel_size=cnf.kernel,\n",
    "                                                stride=cnf.stride, norm_layer=norm_layer, activation_layer=activation_layer))\n",
    "\n",
    "        self.block = nn.Sequential(*layers)\n",
    "        self.stochastic_depth = StochasticDepth(stochastic_depth_prob, \"row\")\n",
    "        self.out_channels = cnf.out_channels\n",
    "\n",
    "    def forward(self, input: Tensor) -> Tensor:\n",
    "        result = self.block(input)\n",
    "        if self.use_res_connect:\n",
    "            result = self.stochastic_depth(result)\n",
    "            result += input\n",
    "        return result\n",
    "\n",
    "# --- EfficientNet Main Class (Using Torchvision Structure) ---\n",
    "class EfficientNet(nn.Module):\n",
    "    def __init__(\n",
    "        self,\n",
    "        inverted_residual_setting: Sequence[Union[MBConvConfig, FusedMBConvConfig]],\n",
    "        dropout: float,\n",
    "        stochastic_depth_prob: float = 0.2,\n",
    "        num_classes: int = 1000,\n",
    "        norm_layer: Optional[Callable[..., nn.Module]] = None,\n",
    "        last_channel: Optional[int] = None,\n",
    "    ) -> None:\n",
    "        super().__init__()\n",
    "        if not inverted_residual_setting: raise ValueError(\"Setting should not be empty\")\n",
    "        if not (isinstance(inverted_residual_setting, Sequence) and all([isinstance(s, _MBConvConfig) for s in inverted_residual_setting])):\n",
    "            raise TypeError(\"Setting should be List[_MBConvConfig]\")\n",
    "\n",
    "        norm_layer = norm_layer or nn.BatchNorm2d\n",
    "        layers: List[nn.Module] = []\n",
    "\n",
    "        # Building first layer\n",
    "        firstconv_output_channels = inverted_residual_setting[0].input_channels\n",
    "        layers.append(Conv2dNormActivation(3, firstconv_output_channels, kernel_size=3, stride=2,\n",
    "                                            norm_layer=norm_layer, activation_layer=nn.SiLU))\n",
    "\n",
    "        # Building inverted residual blocks\n",
    "        total_stage_blocks = sum(cnf.num_layers for cnf in inverted_residual_setting)\n",
    "        stage_block_id = 0\n",
    "        for cnf in inverted_residual_setting:\n",
    "            stage: List[nn.Module] = []\n",
    "            for _ in range(cnf.num_layers):\n",
    "                block_cnf = copy.copy(cnf)\n",
    "                if stage: # if not the first block in stage\n",
    "                    block_cnf.input_channels = block_cnf.out_channels\n",
    "                    block_cnf.stride = 1\n",
    "                sd_prob = stochastic_depth_prob * float(stage_block_id) / total_stage_blocks\n",
    "                stage.append(block_cnf.block(block_cnf, sd_prob, norm_layer))\n",
    "                stage_block_id += 1\n",
    "            layers.append(nn.Sequential(*stage))\n",
    "\n",
    "        # Building last several layers\n",
    "        lastconv_input_channels = inverted_residual_setting[-1].out_channels\n",
    "        lastconv_output_channels = last_channel if last_channel is not None else 4 * lastconv_input_channels\n",
    "        layers.append(Conv2dNormActivation(lastconv_input_channels, lastconv_output_channels, kernel_size=1,\n",
    "                                            norm_layer=norm_layer, activation_layer=nn.SiLU))\n",
    "\n",
    "        self.features = nn.Sequential(*layers)\n",
    "        self.avgpool = nn.AdaptiveAvgPool2d(1)\n",
    "        self.classifier = nn.Sequential(\n",
    "            nn.Dropout(p=dropout, inplace=True),\n",
    "            nn.Linear(lastconv_output_channels, num_classes),\n",
    "        )\n",
    "\n",
    "        # Weight initialization (standard torchvision practice)\n",
    "        for m in self.modules():\n",
    "            if isinstance(m, nn.Conv2d):\n",
    "                nn.init.kaiming_normal_(m.weight, mode=\"fan_out\", nonlinearity=\"relu\")\n",
    "                if m.bias is not None: nn.init.zeros_(m.bias)\n",
    "            elif isinstance(m, (nn.BatchNorm2d, nn.GroupNorm)):\n",
    "                nn.init.ones_(m.weight); nn.init.zeros_(m.bias)\n",
    "            elif isinstance(m, nn.Linear):\n",
    "                init_range = 1.0 / math.sqrt(m.out_features)\n",
    "                nn.init.uniform_(m.weight, -init_range, init_range)\n",
    "                nn.init.zeros_(m.bias)\n",
    "\n",
    "    def forward(self, x: Tensor) -> Tensor:\n",
    "        x = self.features(x)\n",
    "        x = self.avgpool(x)\n",
    "        x = torch.flatten(x, 1)\n",
    "        x = self.classifier(x)\n",
    "        return x\n",
    "\n",
    "# --- Configuration Function ---\n",
    "def _efficientnet_conf(arch: str, **kwargs: Any) -> Tuple[Sequence[Union[MBConvConfig, FusedMBConvConfig]], Optional[int]]:\n",
    "    # Defines layer configurations for each variant\n",
    "    if arch.startswith(\"efficientnet_b\"):\n",
    "        b_conf=partial(MBConvConfig,width_mult=kwargs.pop(\"width_mult\"),depth_mult=kwargs.pop(\"depth_mult\")); setting=[b_conf(1,3,1,32,16,1), b_conf(6,3,2,16,24,2), b_conf(6,5,2,24,40,2), b_conf(6,3,2,40,80,3), b_conf(6,5,1,80,112,3), b_conf(6,5,2,112,192,4), b_conf(6,3,1,192,320,1)]; last_ch=None\n",
    "    elif arch == \"efficientnet_v2_s\": setting=[FusedMBConvConfig(1,3,1,24,24,2), FusedMBConvConfig(4,3,2,24,48,4), FusedMBConvConfig(4,3,2,48,64,4), MBConvConfig(4,3,2,64,128,6), MBConvConfig(6,3,1,128,160,9), MBConvConfig(6,3,2,160,256,15)]; last_ch=1280\n",
    "    elif arch == \"efficientnet_v2_m\": setting=[FusedMBConvConfig(1,3,1,24,24,3), FusedMBConvConfig(4,3,2,24,48,5), FusedMBConvConfig(4,3,2,48,80,5), MBConvConfig(4,3,2,80,160,7), MBConvConfig(6,3,1,160,176,14), MBConvConfig(6,3,2,176,304,18), MBConvConfig(6,3,1,304,512,5)]; last_ch=1280\n",
    "    elif arch == \"efficientnet_v2_l\": setting=[FusedMBConvConfig(1,3,1,32,32,4), FusedMBConvConfig(4,3,2,32,64,7), FusedMBConvConfig(4,3,2,64,96,7), MBConvConfig(4,3,2,96,192,10), MBConvConfig(6,3,1,192,224,19), MBConvConfig(6,3,2,224,384,25), MBConvConfig(6,3,1,384,640,7)]; last_ch=1280\n",
    "    else: raise ValueError(f\"Unsupported model arch: {arch}\")\n",
    "    return setting, last_ch\n",
    "\n",
    "# --- Define Weights Classes (Simplified - URLs assume availability) ---\n",
    "_COMMON_META_V2 = {\"categories\": [\"placeholder\"], \"min_size\": (33, 33)} # Need actual categories\n",
    "class EfficientNet_V2_S_Weights(WeightsEnum):\n",
    "    IMAGENET1K_V1=Weights(url=\"https://download.pytorch.org/models/efficientnet_v2_s-dd5fe13b.pth\", transforms=None, meta={**_COMMON_META_V2, \"num_params\": 21458488}) # Transforms defined elsewhere\n",
    "    DEFAULT = IMAGENET1K_V1\n",
    "class EfficientNet_V2_M_Weights(WeightsEnum):\n",
    "    IMAGENET1K_V1=Weights(url=\"https://download.pytorch.org/models/efficientnet_v2_m-dc08266a.pth\", transforms=None, meta={**_COMMON_META_V2, \"num_params\": 54139356})\n",
    "    DEFAULT = IMAGENET1K_V1\n",
    "class EfficientNet_V2_L_Weights(WeightsEnum):\n",
    "    IMAGENET1K_V1=Weights(url=\"https://download.pytorch.org/models/efficientnet_v2_l-59c71312.pth\", transforms=None, meta={**_COMMON_META_V2, \"num_params\": 118515272})\n",
    "    DEFAULT = IMAGENET1K_V1\n",
    "# Model builder function (CORRECTED for num_classes handling)\n",
    "def _efficientnet_model_builder(\n",
    "    arch: str,\n",
    "    inverted_residual_setting: Sequence[Union[MBConvConfig, FusedMBConvConfig]],\n",
    "    dropout: float,\n",
    "    last_channel: Optional[int],\n",
    "    weights: Optional[WeightsEnum], # Pass weights object directly\n",
    "    progress: bool,\n",
    "    **kwargs: Any,\n",
    ") -> EfficientNet:\n",
    "\n",
    "    # --- CORRECTED num_classes Logic ---\n",
    "    # If loading weights, ALWAYS build the initial structure with the original\n",
    "    # number of classes the weights were trained on (1000 for ImageNet1k).\n",
    "    # Ignore kwargs['num_classes'] at this stage if weights are provided.\n",
    "    if weights is not None:\n",
    "        num_classes_for_build = 1000 # Hardcode for standard ImageNet1k weights\n",
    "        print(f\"Building initial structure for {arch} with {num_classes_for_build} classes to load weights.\")\n",
    "    # If not loading weights, use kwargs['num_classes'] if provided, else default.\n",
    "    elif \"num_classes\" in kwargs:\n",
    "         num_classes_for_build = kwargs[\"num_classes\"]\n",
    "         print(f\"Building structure for {arch} with {num_classes_for_build} classes (random init).\")\n",
    "    else:\n",
    "         num_classes_for_build = 1000 # Default if no weights and no override\n",
    "         print(f\"Building structure for {arch} with default {num_classes_for_build} classes (random init).\")\n",
    "    # --- END CORRECTION ---\n",
    "\n",
    "    # Clean kwargs before passing to EfficientNet constructor to avoid conflicts\n",
    "    build_kwargs = kwargs.copy()\n",
    "    if \"num_classes\" in build_kwargs: # Remove num_classes if it exists in kwargs\n",
    "        del build_kwargs[\"num_classes\"]\n",
    "\n",
    "    # Build model structure\n",
    "    model = EfficientNet(\n",
    "        inverted_residual_setting,\n",
    "        dropout,\n",
    "        last_channel=last_channel,\n",
    "        num_classes=num_classes_for_build, # Use the correctly determined num_classes\n",
    "        **build_kwargs # Pass other kwargs like norm_layer\n",
    "        )\n",
    "\n",
    "    if weights is not None:\n",
    "        # Load state dict using the weights object\n",
    "        print(f\"Loading state_dict from weights for {arch}...\")\n",
    "        try:\n",
    "             model.load_state_dict(weights.get_state_dict(progress=progress, check_hash=True))\n",
    "             print(\"State dict loaded successfully.\")\n",
    "        except Exception as e:\n",
    "             print(f\"ERROR loading state_dict: {e}\")\n",
    "             print(\"Continuing without pretrained weights for this backbone.\")\n",
    "             # Optionally: re-initialize model randomly? Or just proceed?\n",
    "\n",
    "    return model\n",
    "\n",
    "# --- Keep the helper functions efficientnet_v2_s/m/l as they were in the previous block ---\n",
    "# They correctly pass the weights object to the corrected builder.\n",
    "\n",
    "@handle_legacy_interface(weights=(\"pretrained\", EfficientNet_V2_S_Weights.IMAGENET1K_V1))\n",
    "def efficientnet_v2_s(*, weights: Optional[EfficientNet_V2_S_Weights] = None, progress: bool = True, **kwargs: Any) -> EfficientNet:\n",
    "    weights = EfficientNet_V2_S_Weights.verify(weights)\n",
    "    inv_res_setting, last_ch = _efficientnet_conf(\"efficientnet_v2_s\")\n",
    "    model = _efficientnet_model_builder(\"efficientnet_v2_s\", inv_res_setting, kwargs.pop(\"dropout\", 0.2), last_ch, weights, progress, norm_layer=partial(nn.BatchNorm2d, eps=1e-03), **kwargs)\n",
    "    return model\n",
    "\n",
    "@handle_legacy_interface(weights=(\"pretrained\", EfficientNet_V2_M_Weights.IMAGENET1K_V1))\n",
    "def efficientnet_v2_m(*, weights: Optional[EfficientNet_V2_M_Weights] = None, progress: bool = True, **kwargs: Any) -> EfficientNet:\n",
    "    weights = EfficientNet_V2_M_Weights.verify(weights)\n",
    "    inv_res_setting, last_ch = _efficientnet_conf(\"efficientnet_v2_m\")\n",
    "    model = _efficientnet_model_builder(\"efficientnet_v2_m\", inv_res_setting, kwargs.pop(\"dropout\", 0.3), last_ch, weights, progress, norm_layer=partial(nn.BatchNorm2d, eps=1e-03), **kwargs)\n",
    "    return model\n",
    "\n",
    "@handle_legacy_interface(weights=(\"pretrained\", EfficientNet_V2_L_Weights.IMAGENET1K_V1))\n",
    "def efficientnet_v2_l(*, weights: Optional[EfficientNet_V2_L_Weights] = None, progress: bool = True, **kwargs: Any) -> EfficientNet:\n",
    "    weights = EfficientNet_V2_L_Weights.verify(weights)\n",
    "    inv_res_setting, last_ch = _efficientnet_conf(\"efficientnet_v2_l\")\n",
    "    model = _efficientnet_model_builder(\"efficientnet_v2_l\", inv_res_setting, kwargs.pop(\"dropout\", 0.4), last_ch, weights, progress, norm_layer=partial(nn.BatchNorm2d, eps=1e-03), **kwargs)\n",
    "    return model\n",
    "\n",
    "\n",
    "print(\"Torchvision EfficientNet V2 classes and helpers defined (Corrected Syntax).\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "88a9a995",
   "metadata": {
    "papermill": {
     "duration": 0.071875,
     "end_time": "2025-06-18T04:30:45.146633",
     "exception": false,
     "start_time": "2025-06-18T04:30:45.074758",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Model Architecture"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "e24e25df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-18T04:30:45.293204Z",
     "iopub.status.busy": "2025-06-18T04:30:45.292941Z",
     "iopub.status.idle": "2025-06-18T04:30:45.297752Z",
     "shell.execute_reply": "2025-06-18T04:30:45.296905Z"
    },
    "papermill": {
     "duration": 0.079513,
     "end_time": "2025-06-18T04:30:45.299113",
     "exception": false,
     "start_time": "2025-06-18T04:30:45.219600",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class MetadataProcessor(nn.Module): \n",
    "    def __init__(self, n_meta_features, output_dim=128, hidden_factor=2, dropout_p=0.3): \n",
    "        super().__init__()\n",
    "        hidden_dim = max(output_dim * hidden_factor, n_meta_features // 2)\n",
    "        self.mlp = nn.Sequential(\n",
    "            nn.Linear(n_meta_features, hidden_dim),\n",
    "            nn.BatchNorm1d(hidden_dim),\n",
    "            nn.SiLU(),\n",
    "            nn.Dropout(p=dropout_p),\n",
    "            nn.Linear(hidden_dim, output_dim), \n",
    "            nn.BatchNorm1d(output_dim),\n",
    "            nn.SiLU()\n",
    "        )\n",
    "        print(f\"Initialized MetadataProcessor (MLP): Input={n_meta_features} -> Hidden={hidden_dim} -> Output={output_dim}\")\n",
    "\n",
    "    def forward(self, meta):\n",
    "        return self.mlp(meta)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "b9178cbc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-18T04:30:45.447224Z",
     "iopub.status.busy": "2025-06-18T04:30:45.446950Z",
     "iopub.status.idle": "2025-06-18T04:30:45.456749Z",
     "shell.execute_reply": "2025-06-18T04:30:45.455911Z"
    },
    "papermill": {
     "duration": 0.085696,
     "end_time": "2025-06-18T04:30:45.458052",
     "exception": false,
     "start_time": "2025-06-18T04:30:45.372356",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class EffNetV2Model(nn.Module):\n",
    "    def __init__(self, backbone_name, out_dim, n_meta_features=0, pretrained=True, regularization_factor=1.0):\n",
    "        super().__init__()\n",
    "        self.n_meta_features = n_meta_features\n",
    "        self.backbone_name = backbone_name\n",
    "        self.out_dim = out_dim\n",
    "        self.regularization_factor = regularization_factor\n",
    "        # --- Load CNN Backbone ---\n",
    "        print(f\"Instantiating EffNetV2Model ({backbone_name})...\")\n",
    "        model_fn_map={'efficientnet_v2_s':efficientnet_v2_s, 'efficientnet_v2_m':efficientnet_v2_m, 'efficientnet_v2_l':efficientnet_v2_l}\n",
    "        if backbone_name not in model_fn_map: raise ValueError(f\"Unsupported CNN: {backbone_name}\")\n",
    "        self.cnn_backbone = model_fn_map[backbone_name](weights='DEFAULT' if pretrained else None)\n",
    "        print(f\" Loaded {backbone_name}. Pretrained={pretrained}\")\n",
    "        if isinstance(self.cnn_backbone.classifier, nn.Sequential) and isinstance(self.cnn_backbone.classifier[1], nn.Linear):\n",
    "             self.cnn_features_dim = self.cnn_backbone.classifier[1].in_features\n",
    "             self.cnn_backbone.classifier = nn.Identity()\n",
    "             print(f\" CNN features: {self.cnn_features_dim}. Classifier removed.\")\n",
    "        else: raise AttributeError(f\"Unexpected classifier structure {backbone_name}\")\n",
    "        # Define BASE initial rates\n",
    "        BASE_INITIAL_CLASSIFIER_DROPOUT = 0.40\n",
    "        self.initial_classifier_dropout = min(0.9, max(0.05, BASE_INITIAL_CLASSIFIER_DROPOUT * self.regularization_factor))\n",
    "        print(f\"  Regularization Factor: {self.regularization_factor:.4f}\")\n",
    "        print(f\"  Base Classifier Dropout: {BASE_INITIAL_CLASSIFIER_DROPOUT:.2f} -> Effective Initial: {self.initial_classifier_dropout:.4f}\")\n",
    "        self.image_dropout = nn.Dropout(0.0) \n",
    "        self.classifier_dropout = nn.Dropout(self.initial_classifier_dropout)\n",
    "        meta_pathway_dim = 0\n",
    "        self.meta_processor = None \n",
    "        if n_meta_features > 0:\n",
    "             meta_output_dim = 128\n",
    "             self.meta_processor = MetadataProcessor(n_meta_features, output_dim=meta_output_dim, dropout_p=0.3)\n",
    "             meta_pathway_dim = meta_output_dim\n",
    "             print(f\"  - Meta Pathway Enabled ({n_meta_features} -> {meta_pathway_dim}) using MetadataProcessor (MLP Internals)\")\n",
    "        else:\n",
    "             print(\"  - Meta Pathway: Disabled\")\n",
    "        # --- Final Classifier ---\n",
    "        self.myfc = nn.Linear(self.cnn_features_dim + meta_pathway_dim, out_dim)\n",
    "        self.current_epoch = 0\n",
    "\n",
    "    def set_epoch(self, epoch): \n",
    "        self.current_epoch = epoch\n",
    "        max_epoch_anneal = 25.0 \n",
    "        min_dropout_mult = 0.3 \n",
    "        decay_power = 1.5\n",
    "        progress = min(epoch / max_epoch_anneal, 1.0)\n",
    "        current_mult = 1.0 - (1.0 - min_dropout_mult) * (progress**decay_power)\n",
    "        self.classifier_dropout.p = max(0.01, self.initial_classifier_dropout * current_mult)\n",
    "    def forward(self, x, x_meta=None):\n",
    "        x_features = self.cnn_backbone(x)\n",
    "        if self.n_meta_features > 0 and self.meta_processor is not None:\n",
    "            if x_meta is None: raise ValueError(\"x_meta required\");\n",
    "            proc_meta = self.meta_processor(x_meta.to(x_features.device)) \n",
    "            combined = torch.cat((x_features, proc_meta), dim=1)\n",
    "        else:\n",
    "            combined = x_features\n",
    "\n",
    "        logits = self.classifier_dropout(combined)\n",
    "        logits = self.myfc(logits)\n",
    "        logits = torch.clamp(logits, min=-20, max=20);\n",
    "        if torch.isnan(logits).any(): logits = torch.nan_to_num(logits, 0.0)\n",
    "        return logits"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fb2ef177",
   "metadata": {
    "papermill": {
     "duration": 0.073728,
     "end_time": "2025-06-18T04:30:45.605347",
     "exception": false,
     "start_time": "2025-06-18T04:30:45.531619",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Model EfficientNetV2 + Swin Transformer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "68ea8017",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-18T04:30:45.753933Z",
     "iopub.status.busy": "2025-06-18T04:30:45.753665Z",
     "iopub.status.idle": "2025-06-18T04:30:45.767422Z",
     "shell.execute_reply": "2025-06-18T04:30:45.766750Z"
    },
    "papermill": {
     "duration": 0.089538,
     "end_time": "2025-06-18T04:30:45.768725",
     "exception": false,
     "start_time": "2025-06-18T04:30:45.679187",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class HybridSwinModel(nn.Module):\n",
    "    # REMOVED regularization_factors\n",
    "    def __init__(self, cnn_backbone_name, transformer_backbone_name, out_dim,\n",
    "                 n_meta_features=0, pretrained=True, image_size=448, regularization_factor=1.0):\n",
    "        super().__init__()\n",
    "        self.n_meta_features = n_meta_features\n",
    "        self.cnn_backbone_name = cnn_backbone_name # Can be None now\n",
    "        self.transformer_backbone_name = transformer_backbone_name\n",
    "        self.out_dim = out_dim\n",
    "        self.regularization_factor = regularization_factor\n",
    "\n",
    "        # --- Initialize feature dimensions ---\n",
    "        self.cnn_features_dim = 0\n",
    "        self.cnn_backbone = None\n",
    "\n",
    "        print(f\"Instantiating Model (CNN: {cnn_backbone_name or 'None'}, Transformer: {transformer_backbone_name})...\")\n",
    "        \n",
    "        # --- CNN Backbone (OPTIONAL) ---\n",
    "        if self.cnn_backbone_name:\n",
    "            model_fn_map={'efficientnet_v2_s':efficientnet_v2_s,'efficientnet_v2_m':efficientnet_v2_m,'efficientnet_v2_l':efficientnet_v2_l}\n",
    "            if cnn_backbone_name not in model_fn_map: raise ValueError(f\"Unsupported CNN: {cnn_backbone_name}\")\n",
    "            self.cnn_backbone = model_fn_map[cnn_backbone_name](weights='DEFAULT' if pretrained else None)\n",
    "            print(f\" Loaded {cnn_backbone_name}. Pretrained={pretrained}\")\n",
    "            if isinstance(self.cnn_backbone.classifier, nn.Sequential) and isinstance(self.cnn_backbone.classifier[1], nn.Linear):\n",
    "                self.cnn_features_dim = self.cnn_backbone.classifier[1].in_features\n",
    "                self.cnn_backbone.classifier=nn.Identity()\n",
    "                print(f\" CNN features: {self.cnn_features_dim}. Classifier removed.\")\n",
    "            else: raise AttributeError(f\"Unexpected CNN classifier structure {cnn_backbone_name}\")\n",
    "\n",
    "        # --- Transformer Backbone (MANDATORY) ---\n",
    "        try:\n",
    "            self.transformer_backbone = timm.create_model(transformer_backbone_name, pretrained=pretrained)\n",
    "            print(f\" Loaded Transformer: {transformer_backbone_name}. Pretrained={pretrained}\")\n",
    "            if hasattr(self.transformer_backbone, 'head') and hasattr(self.transformer_backbone.head, 'fc'): self.transformer_features_dim=self.transformer_backbone.head.fc.in_features; self.transformer_backbone.head.fc=nn.Identity()\n",
    "            elif hasattr(self.transformer_backbone, 'head') and isinstance(self.transformer_backbone.head, nn.Linear): self.transformer_features_dim=self.transformer_backbone.head.in_features; self.transformer_backbone.head=nn.Identity()\n",
    "            elif hasattr(self.transformer_backbone, 'fc_norm'): self.transformer_features_dim=self.transformer_backbone.fc_norm.normalized_shape[0]; self.transformer_backbone.head=nn.Identity()\n",
    "            else: self.transformer_features_dim=list(self.transformer_backbone.children())[-1].out_features; self.transformer_backbone=nn.Sequential(*list(self.transformer_backbone.children())[:-1]); print(f\"Warn: Fallback Swin features ({self.transformer_features_dim}).\")\n",
    "            print(f\" Swin features: {self.transformer_features_dim}. Classifier removed.\")\n",
    "            self.transformer_pool = nn.AdaptiveAvgPool1d(1)\n",
    "        except Exception as e: print(f\"ERROR loading Transformer {transformer_backbone_name}: {e}\"); raise\n",
    "\n",
    "        # --- Fusion and Classifier Layers ---\n",
    "        BASE_INITIAL_FUSION_DROPOUT = 0.40\n",
    "        BASE_INITIAL_CLASSIFIER_DROPOUT_HYBRID = 0.30\n",
    "        self.initial_fusion_dropout = min(0.9, max(0.05, BASE_INITIAL_FUSION_DROPOUT * self.regularization_factor))\n",
    "        self.initial_classifier_dropout = min(0.9, max(0.05, BASE_INITIAL_CLASSIFIER_DROPOUT_HYBRID * self.regularization_factor))\n",
    "        self.fusion_dropout = nn.Dropout(self.initial_fusion_dropout)\n",
    "\n",
    "        # The 'fusion_dim' is now the sum of available backbone features\n",
    "        fusion_dim = self.cnn_features_dim + self.transformer_features_dim\n",
    "        # The 'fusion_layer' now acts as a projection layer for the available features\n",
    "        self.fusion_layer = nn.Sequential(nn.Linear(fusion_dim, 512), nn.BatchNorm1d(512), nn.SiLU())\n",
    "        fusion_output_dim = 512\n",
    "        \n",
    "        # Meta features pathway (remains the same)\n",
    "        meta_pathway_dim = 0\n",
    "        self.meta_processor = None\n",
    "        if n_meta_features > 0:\n",
    "             meta_output_dim = 128\n",
    "             self.meta_processor = MetadataProcessor(n_meta_features, output_dim=meta_output_dim, dropout_p=0.3)\n",
    "             meta_pathway_dim = meta_output_dim\n",
    "             print(f\"  - Meta Pathway Enabled ({n_meta_features} -> {meta_pathway_dim})\")\n",
    "        else:\n",
    "             print(\"  - Meta Pathway: Disabled\")\n",
    "             \n",
    "        # Final classifier\n",
    "        classifier_input_dim = fusion_output_dim + meta_pathway_dim\n",
    "        self.classifier_dropout = nn.Dropout(self.initial_classifier_dropout)\n",
    "        self.classifier = nn.Linear(classifier_input_dim, out_dim)\n",
    "        self.current_epoch = 0\n",
    "\n",
    "    def set_epoch(self, epoch):\n",
    "        self.current_epoch = epoch\n",
    "        max_epoch_anneal = 25.0; min_dropout_mult = 0.3; decay_power = 1.5\n",
    "        progress = min(epoch / max_epoch_anneal, 1.0)\n",
    "        current_mult = 1.0 - (1.0 - min_dropout_mult) * (progress**decay_power)\n",
    "        self.fusion_dropout.p = max(0.01, self.initial_fusion_dropout * current_mult)\n",
    "        self.classifier_dropout.p = max(0.01, self.initial_classifier_dropout * current_mult)\n",
    "\n",
    "    def forward(self, x, x_meta=None):\n",
    "        # --- Get Transformer Features ---\n",
    "        xfmr_f = self.transformer_backbone(x)\n",
    "        if xfmr_f.dim()==3: xfmr_f_pooled=self.transformer_pool(xfmr_f.permute(0,2,1)).squeeze(-1)\n",
    "        elif xfmr_f.dim()==2: xfmr_f_pooled=xfmr_f\n",
    "        else: raise RuntimeError(f\"Unexpected Swin output shape: {xfmr_f.shape}\")\n",
    "\n",
    "        # --- Combine Image Features (if CNN exists) ---\n",
    "        if self.cnn_backbone is not None:\n",
    "            cnn_f = self.cnn_backbone(x)\n",
    "            combined_img = torch.cat((cnn_f, xfmr_f_pooled), dim=1)\n",
    "        else:\n",
    "            # If no CNN, the 'combined' features are just the transformer's\n",
    "            combined_img = xfmr_f_pooled\n",
    "\n",
    "        # --- Fusion/Projection, Meta, and Classifier ---\n",
    "        fused_img = self.fusion_layer(combined_img)\n",
    "        fused_img = self.fusion_dropout(fused_img) \n",
    "\n",
    "        if self.n_meta_features > 0 and self.meta_processor is not None:\n",
    "            if x_meta is None: raise ValueError(\"x_meta required\");\n",
    "            proc_meta = self.meta_processor(x_meta.to(fused_img.device)) \n",
    "            final_features = torch.cat((fused_img, proc_meta), dim=1)\n",
    "        else:\n",
    "            final_features = fused_img\n",
    "\n",
    "        logits = self.classifier_dropout(final_features)\n",
    "        logits = self.classifier(logits)\n",
    "        logits = torch.clamp(logits, min=-20, max=20);\n",
    "        if torch.isnan(logits).any():\n",
    "             logits = torch.nan_to_num(logits, 0.0)\n",
    "        return logits"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "0710b167",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-18T04:30:45.915390Z",
     "iopub.status.busy": "2025-06-18T04:30:45.915161Z",
     "iopub.status.idle": "2025-06-18T04:30:45.918406Z",
     "shell.execute_reply": "2025-06-18T04:30:45.917781Z"
    },
    "papermill": {
     "duration": 0.078547,
     "end_time": "2025-06-18T04:30:45.919553",
     "exception": false,
     "start_time": "2025-06-18T04:30:45.841006",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def count_parameters(model):\n",
    "    return sum(p.numel() for p in model.parameters() if p.requires_grad)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7c86c1e7",
   "metadata": {
    "papermill": {
     "duration": 0.073785,
     "end_time": "2025-06-18T04:30:46.102698",
     "exception": false,
     "start_time": "2025-06-18T04:30:46.028913",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Freeze Function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "01d211b1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-18T04:30:46.252577Z",
     "iopub.status.busy": "2025-06-18T04:30:46.252250Z",
     "iopub.status.idle": "2025-06-18T04:30:46.277032Z",
     "shell.execute_reply": "2025-06-18T04:30:46.276311Z"
    },
    "papermill": {
     "duration": 0.102713,
     "end_time": "2025-06-18T04:30:46.278258",
     "exception": false,
     "start_time": "2025-06-18T04:30:46.175545",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Modified adaptive_layer_unlocking to accept single factors\n",
    "\n",
    "def get_max_enet_block_index(model): # Check if this needs update for V2 structure\n",
    "    \"\"\" Finds max block index in EffNet V1/V2 (might need adjustment based on timm naming).\"\"\"\n",
    "    model_base = model.module if isinstance(model, nn.DataParallel) else model\n",
    "    cnn_backbone = getattr(model_base, 'cnn_backbone', getattr(model_base, 'enet', None)) # Handle different names\n",
    "    if cnn_backbone is None: print(\"Warning: CNN backbone not found for block index.\"); return -1\n",
    "\n",
    "    max_block_idx = -1\n",
    "    for name, _ in cnn_backbone.named_parameters():\n",
    "        # V2 often uses structure like 'blocks.0.0...', V1 'blocks.0...'\n",
    "        parts = name.split('.')\n",
    "        if parts[0] == 'blocks' and len(parts) > 1 and parts[1].isdigit():\n",
    "            try: idx = int(parts[1]); max_block_idx = max(max_block_idx, idx)\n",
    "            except ValueError: pass\n",
    "    # print(f\"Determined max block index: {max_block_idx}\")\n",
    "    return max_block_idx\n",
    "\n",
    "\n",
    "# Modified progressive_layer_unfreezing with LLRD support\n",
    "def progressive_layer_unfreezing(\n",
    "    model, optimizer, epoch,\n",
    "    freeze_initially_until_block, # Initial freeze state (e.g., 2) - Affects intermediate unfreeze\n",
    "    # --- Use FIXED schedule points ---\n",
    "    unfreeze_start_epoch,         # Epoch when gradual unfreezing begins (e.g., 7)\n",
    "    full_unfreeze_epoch,          # Epoch when everything is unfrozen & optimizer resets (e.g., 15)\n",
    "    # ---\n",
    "    total_epochs,                 # Still needed for cosine scheduler re-init\n",
    "    base_lr=1e-3,\n",
    "    cnn_backbone_name=None,       # For info only\n",
    "    lr_adaptation_factor=1.0,     # Pass the near-baseline factor\n",
    "    # --- NEW LLRD Parameter ---\n",
    "    llrd_decay_rate=0.90 ,        # Layer-wise decay rate (e.g., 0.9, 0.85). Set >= 1.0 to disable LLRD.\n",
    "    regularization_factor=1.0\n",
    "):\n",
    "    \"\"\"\n",
    "    Progressively unfreezes CNN layers based on a FIXED schedule and reconfigures\n",
    "    the optimizer with differential learning rates (including specific LLRD for\n",
    "    torchvision EfficientNetV2 CNN backbone structure) at the full_unfreeze_epoch.\n",
    "    \"\"\"\n",
    "    model_base = model.module if isinstance(model, nn.DataParallel) else model\n",
    "    cnn_backbone = getattr(model_base, 'cnn_backbone', getattr(model_base, 'enet', None))\n",
    "\n",
    "    # --- Phase 1: Before unfreezing starts ---\n",
    "    if epoch < unfreeze_start_epoch:\n",
    "        return optimizer, False # No change needed yet\n",
    "\n",
    "    # --- Get Max Block Index (only if needed for intermediate unfreeze) ---\n",
    "    # Note: This 'get_max_enet_block_index' relies on block numbers within stages (e.g., blocks.1...)\n",
    "    # which might differ from the LLRD depth based on 'features' index. Keep them separate concepts.\n",
    "    max_block_idx_for_intermediate_unfreeze = -1\n",
    "    if cnn_backbone and epoch >= unfreeze_start_epoch and epoch < full_unfreeze_epoch:\n",
    "         max_block_idx_for_intermediate_unfreeze = get_max_enet_block_index(model) # Use original function name here\n",
    "         if max_block_idx_for_intermediate_unfreeze == -1:\n",
    "              print(f\"Warning (Epoch {epoch}): Could not determine CNN block index for intermediate gradual unfreezing.\")\n",
    "\n",
    "    # --- Phase 3: Full unfreeze and optimizer reset ---\n",
    "    if epoch == full_unfreeze_epoch:\n",
    "        print(f\"===== Epoch {epoch}: Full Model Unlock & Optimizer Reconfiguration (LLRD Rate: {llrd_decay_rate if llrd_decay_rate < 1.0 else 'Disabled'}) =====\")\n",
    "        # ... (Unlock parameters - code remains the same) ...\n",
    "        unfrozen_count = 0\n",
    "        for name, param in model_base.named_parameters():\n",
    "            if not param.requires_grad:\n",
    "                param.requires_grad = True\n",
    "                unfrozen_count += 1\n",
    "        if unfrozen_count > 0: print(f\" Unlocked {unfrozen_count} previously frozen parameters.\")\n",
    "        else: print(\" No parameters needed unlocking.\")\n",
    "\n",
    "\n",
    "        # --- Calculate Target LRs (incorporating adaptation factor) ---\n",
    "        # ... (Calculation code remains the same) ...\n",
    "        print(f\"  Applying Base LR: {base_lr:.1e}, LR Adaptation Factor: {lr_adaptation_factor:.4f}\")\n",
    "        cnn_lr_mult, xfmr_lr_mult, head_lr_mult, meta_lr_mult = 0.3, 0.5, 1.0, 1.0\n",
    "        final_base_cnn_lr = base_lr * cnn_lr_mult * lr_adaptation_factor\n",
    "        final_xfmr_lr = base_lr * xfmr_lr_mult * lr_adaptation_factor\n",
    "        final_head_lr = base_lr * head_lr_mult * lr_adaptation_factor\n",
    "        final_meta_lr = base_lr * meta_lr_mult * lr_adaptation_factor\n",
    "        # --- >>> APPLY REGULARIZATION FACTOR TO WEIGHT DECAY <<< ---\n",
    "        # Define BASE weight decays\n",
    "        BASE_WD_CNN = 0.01\n",
    "        BASE_WD_XFMR = 0.02\n",
    "        BASE_WD_HEAD = 0.05 # Includes Fusion, Meta, Classifier\n",
    "        BASE_WD_REMAINING = 0.01\n",
    "\n",
    "        # Calculate effective weight decays, ensure non-negative\n",
    "        wd_cnn_eff = max(0.0, BASE_WD_CNN * regularization_factor)\n",
    "        wd_xfmr_eff = max(0.0, BASE_WD_XFMR * regularization_factor)\n",
    "        wd_head_eff = max(0.0, BASE_WD_HEAD * regularization_factor)\n",
    "        wd_remaining_eff = max(0.0, BASE_WD_REMAINING * regularization_factor)\n",
    "\n",
    "        print(f\"  Regularization Factor applied to Weight Decay:\")\n",
    "        print(f\"   - CNN WD:       {BASE_WD_CNN:.3f} -> {wd_cnn_eff:.4f}\")\n",
    "        print(f\"   - Transformer WD: {BASE_WD_XFMR:.3f} -> {wd_xfmr_eff:.4f}\")\n",
    "        print(f\"   - Head/Meta WD:   {BASE_WD_HEAD:.3f} -> {wd_head_eff:.4f}\")\n",
    "        # --- >>> END WD MODIFICATION <<< ---\n",
    "        print(f\"  Target Max Learning Rates:\")\n",
    "        print(f\"   - CNN Backbone (Max): {final_base_cnn_lr:.3e}\")\n",
    "        if hasattr(model_base, 'transformer_backbone'): print(f\"   - Transformer Backbone: {final_xfmr_lr:.3e}\")\n",
    "        if hasattr(model_base, 'fusion_layer'): print(f\"   - Fusion Layer:       {final_head_lr:.3e}\")\n",
    "        if hasattr(model_base, 'meta_attention') or hasattr(model_base, 'meta_fc'): print(f\"   - Meta Pathway:       {final_meta_lr:.3e}\")\n",
    "        if hasattr(model_base, 'myfc') or hasattr(model_base, 'classifier'): print(f\"   - Classifier Head(s): {final_head_lr:.3e}\")\n",
    "\n",
    "\n",
    "        # --- Define Parameter Groups Robustly (WITH LLRD for EffNetV2 structure) ---\n",
    "        param_groups = []\n",
    "        all_parameter_ids = set()\n",
    "\n",
    "        # Function to safely add parameters (remains the same)\n",
    "        def add_param_group(params_to_add, lr, weight_decay, name_hint):\n",
    "            nonlocal param_groups, all_parameter_ids\n",
    "            valid_params = [p for p in params_to_add if p.requires_grad and id(p) not in all_parameter_ids]\n",
    "            if valid_params:\n",
    "                 group = {'params': valid_params, 'lr': lr, 'weight_decay': weight_decay}\n",
    "                 param_groups.append(group)\n",
    "                 all_parameter_ids.update(id(p) for p in valid_params)\n",
    "                 print(f\"    Group '{name_hint}': {len(valid_params)} params, LR={lr:.2e}, WD={weight_decay}\")\n",
    "\n",
    "        # --- LLRD Implementation Specific to Torchvision EfficientNetV2 Structure ---\n",
    "        if cnn_backbone and llrd_decay_rate < 1.0:\n",
    "            print(f\"  Applying LLRD to CNN Backbone ({cnn_backbone_name}) with decay rate: {llrd_decay_rate}\")\n",
    "            # Specifically target 'self.features' which is nn.Sequential\n",
    "            if hasattr(cnn_backbone, 'features') and isinstance(cnn_backbone.features, nn.Sequential):\n",
    "                layers = list(cnn_backbone.features.children())\n",
    "                num_layers = len(layers) # Number of direct children in features (stem, stages, final conv)\n",
    "                print(f\"  Found {num_layers} sequential items in cnn_backbone.features for LLRD.\")\n",
    "\n",
    "                # Assign decreasing LR based on index in 'features'\n",
    "                # features[0] = stem (lowest LR)\n",
    "                # features[-1] = final conv before pool (highest LR = final_base_cnn_lr)\n",
    "                for i, layer_module in enumerate(layers):\n",
    "                    # Depth increases for earlier layers in the sequence\n",
    "                    depth_from_end = num_layers - 1 - i\n",
    "                    layer_lr = final_base_cnn_lr * (llrd_decay_rate ** depth_from_end)\n",
    "                    # Name hint reflects the index within 'features'\n",
    "                    add_param_group(layer_module.parameters(), layer_lr, 0.01, f'CNN features[{i}]')\n",
    "\n",
    "                # Verify all cnn params were assigned (optional check)\n",
    "                cnn_param_ids = set(id(p) for p in cnn_backbone.parameters() if p.requires_grad)\n",
    "                assigned_cnn_ids = cnn_param_ids.intersection(all_parameter_ids)\n",
    "                if len(assigned_cnn_ids) != len(cnn_param_ids):\n",
    "                    print(f\"  Warning: Only {len(assigned_cnn_ids)} out of {len(cnn_param_ids)} trainable CNN params were assigned during LLRD.\")\n",
    "\n",
    "            else:\n",
    "                # Fallback if structure doesn't match expectation (shouldn't happen with your models)\n",
    "                print(f\"  Warning: cnn_backbone.features not found or not Sequential. Applying single LR {final_base_cnn_lr:.3e} to entire CNN.\")\n",
    "                add_param_group(cnn_backbone.parameters(), final_base_cnn_lr, 0.01, 'CNN (Single LR)')\n",
    "\n",
    "        elif cnn_backbone: # No LLRD or backbone found\n",
    "             print(f\"  Applying single LR to CNN Backbone: {final_base_cnn_lr:.3e}\")\n",
    "             add_param_group(cnn_backbone.parameters(), final_base_cnn_lr, 0.01, 'CNN (Single LR)')\n",
    "\n",
    "        # --- Add other parameter groups (Transformer, Head, Meta - remains the same) ---\n",
    "        add_param_group(list(getattr(model_base, 'transformer_backbone', nn.Module()).parameters()), final_xfmr_lr, 0.02, 'Transformer')\n",
    "        add_param_group(list(getattr(model_base, 'fusion_layer', nn.Module()).parameters()), final_head_lr, 0.05, 'Fusion')\n",
    "        # Meta pathway\n",
    "        meta_params = list(getattr(model_base, 'meta_attention', nn.Module()).parameters()) + \\\n",
    "                      list(getattr(model_base, 'meta_fc', nn.Module()).parameters())\n",
    "        if meta_params: add_param_group(meta_params, final_meta_lr, 0.05, 'Meta')\n",
    "        # Classifier heads\n",
    "        classifier_params = []\n",
    "        myfc = getattr(model_base, 'myfc', None); classifier_head = getattr(model_base, 'classifier', None)\n",
    "        if myfc and not isinstance(myfc, nn.Identity): classifier_params.extend(list(myfc.parameters()))\n",
    "        if classifier_head and not isinstance(classifier_head, nn.Identity): classifier_params.extend(list(classifier_head.parameters()))\n",
    "        if classifier_params: add_param_group(classifier_params, final_head_lr, 0.05, 'Classifier')\n",
    "\n",
    "        # --- Catch Remaining ---\n",
    "        remaining_params = [p for n, p in model_base.named_parameters() if p.requires_grad and id(p) not in all_parameter_ids]\n",
    "        if remaining_params:\n",
    "            print(f\"  Warn: Adding {len(remaining_params)} remaining trainable parameters to a default group.\")\n",
    "            add_param_group(remaining_params, final_head_lr, 0.05, 'Remaining')\n",
    "\n",
    "        # --- Create Optimizer ---\n",
    "        # ... (remains the same) ...\n",
    "        if not param_groups: raise RuntimeError(\"Optimizer reconfiguration failed: No parameter groups were created.\")\n",
    "        print(f\"  Optimizer reconfiguring with {len(param_groups)} parameter groups.\")\n",
    "        new_optimizer = optim.AdamW(param_groups, eps=1e-7)\n",
    "        print(\"===== Optimizer Reconfigured Successfully =====\")\n",
    "        return new_optimizer, True\n",
    "\n",
    "    # --- Phase 2: Intermediate Unfreezing (Only affects CNN backbone) ---\n",
    "    # This part MUST use the block index logic from `get_max_enet_block_index`,\n",
    "    # as it targets specific blocks *within* the stages, not the stages themselves.\n",
    "    elif epoch >= unfreeze_start_epoch and epoch < full_unfreeze_epoch and cnn_backbone and max_block_idx_for_intermediate_unfreeze != -1:\n",
    "         # Use the max_block_idx_for_intermediate_unfreeze calculated earlier\n",
    "        blocks_to_unfreeze_sequence = list(range(max_block_idx_for_intermediate_unfreeze, freeze_initially_until_block, -1))\n",
    "        num_stages_to_unfreeze = len(blocks_to_unfreeze_sequence)\n",
    "        if num_stages_to_unfreeze > 0:\n",
    "            unfreeze_epoch_span = full_unfreeze_epoch - unfreeze_start_epoch\n",
    "            epochs_per_stage = max(1, math.ceil(unfreeze_epoch_span / num_stages_to_unfreeze))\n",
    "            current_stage_index = (epoch - unfreeze_start_epoch) // epochs_per_stage\n",
    "\n",
    "            if current_stage_index < num_stages_to_unfreeze:\n",
    "                block_idx_to_unfreeze = blocks_to_unfreeze_sequence[current_stage_index]\n",
    "                unfrozen_in_this_epoch = False\n",
    "                # --- This loop MUST check the block number within the stage ---\n",
    "                for name, param in cnn_backbone.named_parameters():\n",
    "                    is_target_block = False\n",
    "                    parts = name.split('.')\n",
    "                    # Example check: 'features.STAGE_IDX.BLOCK_IDX...' or 'blocks.BLOCK_IDX...'\n",
    "                    # Need to adapt based on precise naming in the cnn_backbone parameters\n",
    "                    # Let's assume the naming follows the 'blocks.X.Y...' or 'features.X.Y...' pattern\n",
    "                    # where X is stage, Y is block (this might need adjustment)\n",
    "                    # *** Simplified check based on get_max_enet_block_index's assumption ***\n",
    "                    if (parts[0] == 'blocks' or parts[0] == 'features') and len(parts) > 1 and parts[1].isdigit():\n",
    "                          # This assumes the index used by get_max_enet_block_index is directly in parts[1]\n",
    "                          # This might be incorrect for the torchvision structure where parts[1] is stage index.\n",
    "                          # A more robust check would parse deeper, e.g. parts[2] for block index within a stage.\n",
    "                          # --- Using the potentially incorrect but consistent check for now ---\n",
    "                         try:\n",
    "                             current_block_idx = int(parts[1]) # <<< ASSUMPTION HERE based on get_max_enet_block_index\n",
    "                             if current_block_idx == block_idx_to_unfreeze:\n",
    "                                 is_target_block = True\n",
    "                         except ValueError: pass\n",
    "\n",
    "                    if is_target_block and not param.requires_grad:\n",
    "                        param.requires_grad = True; unfrozen_in_this_epoch = True\n",
    "\n",
    "                if unfrozen_in_this_epoch:\n",
    "                    # Use the block index determined by get_max_enet_block_index\n",
    "                    print(f\"Epoch {epoch}: Unlocking CNN block {block_idx_to_unfreeze} (based on intermediate schedule)...\")\n",
    "                    return optimizer, False\n",
    "\n",
    "    # Default: No change\n",
    "    return optimizer, False\n",
    "\n",
    "\n",
    "def partial_freeze_enet(model, freeze_until_block=2): # freeze_until_block now refers to STAGE index\n",
    "    \"\"\"\n",
    "    Partially freezes CNN backbone (Torchvision EffNetV2 structure).\n",
    "    Freezes the stem (features.0) and stages up to and including freeze_until_block.\n",
    "    Ensures other model parts (head, transformer, meta) are trainable.\n",
    "    \"\"\"\n",
    "    model_base = model.module if isinstance(model, nn.DataParallel) else model\n",
    "    cnn_backbone = getattr(model_base, 'cnn_backbone', getattr(model_base, 'enet', None))\n",
    "    if not cnn_backbone:\n",
    "        print(\"Warning (partial_freeze_enet): CNN backbone not found. Skipping freeze.\")\n",
    "        return\n",
    "\n",
    "    # Verify expected structure\n",
    "    if not (hasattr(cnn_backbone, 'features') and isinstance(cnn_backbone.features, nn.Sequential)):\n",
    "         print(f\"Warning (partial_freeze_enet): Expected cnn_backbone.features (nn.Sequential) not found in {type(cnn_backbone)}. Freeze might be incorrect.\")\n",
    "         # Attempt to proceed, but it might not work as expected\n",
    "\n",
    "    print(f\"--- Applying Partial Freeze (CNN stem & stages <= {freeze_until_block}) ---\")\n",
    "    frozen_count, trainable_count = 0, 0\n",
    "    # Freeze stem, initial blocks/stages\n",
    "    for name, param in cnn_backbone.named_parameters():\n",
    "        should_freeze = False\n",
    "        parts = name.split('.')\n",
    "\n",
    "        # --- >>> MODIFIED LOGIC <<< ---\n",
    "        # Check for typical stem names first (more specific)\n",
    "        if name.startswith('features.0.') or name.startswith('stem.') or name.startswith('conv_stem.') or name.startswith('bn1.'):\n",
    "             # print(f\"  Freezing stem layer: {name}\") # Optional Debug\n",
    "             should_freeze = True\n",
    "        # Check for early stages based on features.STAGE_INDEX.\n",
    "        elif name.startswith('features.') and len(parts) > 1 and parts[1].isdigit():\n",
    "             try:\n",
    "                 stage_idx = int(parts[1])\n",
    "                 # Freeze stages up to and including freeze_until_block\n",
    "                 # Note: Stage index parts[1] starts from 1 for actual stages after stem (features.0)\n",
    "                 if stage_idx > 0 and stage_idx <= freeze_until_block + 1: # +1 because features[1] is stage 0 effectively\n",
    "                      # print(f\"  Freezing stage {stage_idx} layer: {name}\") # Optional Debug\n",
    "                      should_freeze = True\n",
    "             except ValueError:\n",
    "                 pass # Ignore if parts[1] is not a digit\n",
    "        # --- >>> END MODIFIED LOGIC <<< ---\n",
    "\n",
    "        param.requires_grad = not should_freeze\n",
    "        if should_freeze:\n",
    "            frozen_count += param.numel()\n",
    "        else:\n",
    "            trainable_count += param.numel()\n",
    "\n",
    "    print(f\"CNN backbone partially frozen up to stage index {freeze_until_block}.\") # Clarify meaning\n",
    "    print(f\"  - CNN Frozen params: {frozen_count:,}\")\n",
    "    print(f\"  - CNN Trainable params: {trainable_count:,}\")\n",
    "\n",
    "    # Ensure other backbones (Swin) or heads are trainable initially\n",
    "    # --- This part remains correct ---\n",
    "    if hasattr(model_base, 'transformer_backbone'):\n",
    "        xfmr_trainable = 0\n",
    "        for param in model_base.transformer_backbone.parameters():\n",
    "             param.requires_grad = True; xfmr_trainable += param.numel()\n",
    "        print(f\"Transformer backbone set to trainable ({xfmr_trainable:,} params).\")\n",
    "    print(\"Ensuring head/meta/fusion parts are trainable...\")\n",
    "    ensured_trainable_count = 0\n",
    "    for part_name in ['fusion_layer', 'meta_attention', 'meta_fc', 'classifier', 'myfc']:\n",
    "         part = getattr(model_base, part_name, None)\n",
    "         if part and not isinstance(part, nn.Identity): # Check it's a real layer/module\n",
    "             part_params = 0\n",
    "             for param in part.parameters():\n",
    "                  param.requires_grad = True; part_params += param.numel()\n",
    "             if part_params > 0:\n",
    "                  print(f\"  - {part_name} set to trainable ({part_params:,} params).\")\n",
    "                  ensured_trainable_count += part_params\n",
    "\n",
    "    print(f\"Total parameters set trainable outside CNN: {ensured_trainable_count + (xfmr_trainable if hasattr(model_base, 'transformer_backbone') else 0):,}\")\n",
    "    print(\"--- Partial Freeze Setup Complete ---\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "de297f78",
   "metadata": {
    "papermill": {
     "duration": 0.073103,
     "end_time": "2025-06-18T04:30:46.424975",
     "exception": false,
     "start_time": "2025-06-18T04:30:46.351872",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Training Component"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "7034848b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-18T04:30:46.573458Z",
     "iopub.status.busy": "2025-06-18T04:30:46.573151Z",
     "iopub.status.idle": "2025-06-18T04:30:46.578823Z",
     "shell.execute_reply": "2025-06-18T04:30:46.577860Z"
    },
    "papermill": {
     "duration": 0.082256,
     "end_time": "2025-06-18T04:30:46.580405",
     "exception": false,
     "start_time": "2025-06-18T04:30:46.498149",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Fix Warmup Bug\n",
    "class GradualWarmupSchedulerV2(GradualWarmupScheduler):\n",
    "    def __init__(self, optimizer, multiplier, total_epoch, after_scheduler=None):\n",
    "        super(GradualWarmupSchedulerV2, self).__init__(optimizer, multiplier, total_epoch, after_scheduler)\n",
    "    def get_lr(self):\n",
    "        if self.last_epoch > self.total_epoch:\n",
    "            if self.after_scheduler:\n",
    "                if not self.finished:\n",
    "                    self.after_scheduler.base_lrs = [base_lr * self.multiplier for base_lr in self.base_lrs]\n",
    "                    self.finished = True\n",
    "                return self.after_scheduler.get_lr()\n",
    "            return [base_lr * self.multiplier for base_lr in self.base_lrs]\n",
    "        if self.multiplier == 1.0:\n",
    "            return [base_lr * (float(self.last_epoch) / self.total_epoch) for base_lr in self.base_lrs]\n",
    "        else:\n",
    "            return [base_lr * ((self.multiplier - 1.) * self.last_epoch / self.total_epoch + 1.) for base_lr in self.base_lrs]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d1c3246e",
   "metadata": {
    "papermill": {
     "duration": 0.072655,
     "end_time": "2025-06-18T04:30:46.725580",
     "exception": false,
     "start_time": "2025-06-18T04:30:46.652925",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Train and Valid"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "0b7b1e0a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-18T04:30:46.875294Z",
     "iopub.status.busy": "2025-06-18T04:30:46.875017Z",
     "iopub.status.idle": "2025-06-18T04:30:46.889396Z",
     "shell.execute_reply": "2025-06-18T04:30:46.888586Z"
    },
    "papermill": {
     "duration": 0.091913,
     "end_time": "2025-06-18T04:30:46.890792",
     "exception": false,
     "start_time": "2025-06-18T04:30:46.798879",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Utility function to get resource usage\n",
    "def get_resource_usage():\n",
    "    if torch.cuda.is_available():\n",
    "        mem_alloc = torch.cuda.memory_allocated() / 1024**2  # MB\n",
    "        mem_max = torch.cuda.max_memory_allocated() / 1024**2  # MB\n",
    "        return {\"gpu_memory_allocated\": mem_alloc, \"gpu_max_memory\": mem_max}\n",
    "    else:\n",
    "        import psutil\n",
    "        cpu_usage = psutil.cpu_percent(interval=1)\n",
    "        ram_usage = psutil.virtual_memory().percent\n",
    "        return {\"cpu_usage\": cpu_usage, \"ram_usage\": ram_usage}\n",
    "        \n",
    "class TemperatureScaling:\n",
    "    def __init__(self, model, device):\n",
    "        # Store the original model passed (could be base or wrapped)\n",
    "        self.model = model\n",
    "        self.device = device\n",
    "        # Initialize log_temperature as a learnable parameter starting at 0 (exp(0) = 1)\n",
    "        self.log_temperature = nn.Parameter(torch.zeros(1).to(device))\n",
    "\n",
    "    def calibrate(self, loader, max_iter=50):\n",
    "        \"\"\" Optimizes temperature using validation data with NLL. \"\"\"\n",
    "        self.model.eval() # Set the potentially wrapped model to eval mode\n",
    "\n",
    "        # --- *** Get base model reference *** ---\n",
    "        # Use this reference for checking attributes like n_meta_features\n",
    "        base_model = self.model.module if isinstance(self.model, nn.DataParallel) else self.model\n",
    "        # ---\n",
    "\n",
    "        nll_criterion = nn.CrossEntropyLoss().to(self.device)\n",
    "        # Ensure parameter is registered correctly for optimizer\n",
    "        if not list(self.model.parameters()): # Check if model has parameters (might happen if called standalone)\n",
    "            print(\"Warning (Calibrate): Model has no parameters? Adding log_temperature manually.\")\n",
    "            params_to_optimize = [self.log_temperature]\n",
    "        else:\n",
    "            # Optimize only the temperature parameter\n",
    "            params_to_optimize = [self.log_temperature]\n",
    "            # Ensure log_temperature requires grad if model doesn't\n",
    "            if not self.log_temperature.requires_grad: self.log_temperature.requires_grad = True\n",
    "\n",
    "\n",
    "        # Check if parameters require grad before passing to optimizer\n",
    "        if not any(p.requires_grad for p in params_to_optimize):\n",
    "            print(\"Warning (Calibrate): No parameters require gradients for optimizer. Setting log_temperature.requires_grad=True.\")\n",
    "            self.log_temperature.requires_grad = True\n",
    "\n",
    "\n",
    "        optimizer = optim.LBFGS(params_to_optimize, lr=0.01, max_iter=max_iter)\n",
    "\n",
    "        all_logits = []\n",
    "        all_targets = []\n",
    "        print(\"Calibrating: Iterating through validation loader...\") # Add print\n",
    "        with torch.no_grad():\n",
    "            cal_pbar = tqdm(loader, desc=\"Calibrating T\", leave=False, total=len(loader))\n",
    "            for batch_idx, batch in enumerate(cal_pbar):\n",
    "                images, meta, target = None, None, None # Initialize batch variables\n",
    "\n",
    "                # --- *** CORRECTED Data Unpacking & Forward Call *** ---\n",
    "                # Check meta features existence using the base_model reference\n",
    "                has_meta_features_in_model = hasattr(base_model, 'n_meta_features') and base_model.n_meta_features > 0\n",
    "\n",
    "                try:\n",
    "                    # Determine expected batch structure based on model's capability\n",
    "                    if has_meta_features_in_model:\n",
    "                         # Assumes loader provides ((img, meta), tgt) if model has meta\n",
    "                         (images, meta), target = batch\n",
    "                         images, meta, target = images.to(self.device), meta.to(self.device), target.to(self.device)\n",
    "                    else:\n",
    "                         # Assumes loader provides (img, tgt) if model does NOT have meta\n",
    "                         images, target = batch\n",
    "                         images, target = images.to(self.device), target.to(self.device)\n",
    "                         meta = None # Ensure meta is None\n",
    "\n",
    "                    # Perform forward pass using the ORIGINAL model ('self.model')\n",
    "                    # Pass meta only if the global use_meta flag is True AND meta was successfully unpacked\n",
    "                    # Note: We rely on the global 'use_meta' flag here, which should align with has_meta_features_in_model\n",
    "                    if use_meta and meta is not None:\n",
    "                         logits = self.model(images, x_meta=meta)\n",
    "                    else:\n",
    "                         logits = self.model(images)\n",
    "\n",
    "                    all_logits.append(logits)\n",
    "                    all_targets.append(target)\n",
    "\n",
    "                except ValueError as ve:\n",
    "                    # Handle potential unpacking errors if batch structure is unexpected\n",
    "                    print(f\"Warning (Calibrate Batch {batch_idx}): ValueError unpacking batch - {ve}. Trying to recover.\")\n",
    "                    if isinstance(batch, (list, tuple)) and len(batch) == 2:\n",
    "                        try: # Assume (img, tgt) structure\n",
    "                            images, target = batch\n",
    "                            images, target = images.to(self.device), target.to(self.device)\n",
    "                            meta = None\n",
    "                            logits = self.model(images) # Call without meta\n",
    "                            all_logits.append(logits)\n",
    "                            all_targets.append(target)\n",
    "                            print(\" Recovered assuming (img, tgt) format.\")\n",
    "                        except Exception as e_rec:\n",
    "                            print(f\" Recovery failed: {e_rec}. Skipping batch.\")\n",
    "                            continue # Skip this batch\n",
    "                    else:\n",
    "                        print(\" Cannot determine batch structure. Skipping batch.\")\n",
    "                        continue # Skip this batch\n",
    "                except Exception as e:\n",
    "                    print(f\"Error processing batch {batch_idx} during calibration: {e}\")\n",
    "                    traceback.print_exc()\n",
    "                    # Decide whether to skip or raise\n",
    "                    continue # Skip batch on other errors for now\n",
    "                # --- *** END CORRECTION *** ---\n",
    "\n",
    "        if not all_logits:\n",
    "            print(\"Warning: No logits collected during calibration. Returning default temperature.\")\n",
    "            return 1.0\n",
    "\n",
    "        logits = torch.cat(all_logits)\n",
    "        targets = torch.cat(all_targets)\n",
    "        targets = targets.to(self.device) # Ensure targets are on device for loss\n",
    "\n",
    "        def nll_closure():\n",
    "            optimizer.zero_grad()\n",
    "            temperature = torch.exp(self.log_temperature).clamp(min=0.1, max=10.0)\n",
    "            scaled_logits = logits / temperature\n",
    "            loss = nll_criterion(scaled_logits, targets)\n",
    "            if torch.isnan(loss) or torch.isinf(loss):\n",
    "                print(\"Warning: NaN/Inf loss in NLL closure. Returning high value.\")\n",
    "                return torch.tensor(1e6, device=self.device, requires_grad=True) # Return high loss\n",
    "            loss.backward()\n",
    "            return loss\n",
    "\n",
    "        optimal_temperature = 1.0 # Default\n",
    "        try:\n",
    "            print(\"Running LBFGS optimizer for temperature...\")\n",
    "            optimizer.step(nll_closure)\n",
    "            optimal_temperature = torch.exp(self.log_temperature).item()\n",
    "            print(f\"Optimal temperature found: {optimal_temperature:.4f}\")\n",
    "        except Exception as opt_e:\n",
    "            print(f\"Warning: Temperature optimization failed: {opt_e}\")\n",
    "            optimal_temperature = 1.0\n",
    "\n",
    "        # Add final clamp/check for safety\n",
    "        optimal_temperature = max(0.1, min(optimal_temperature, 10.0))\n",
    "        if np.isnan(optimal_temperature): optimal_temperature = 1.0\n",
    "\n",
    "        return optimal_temperature\n",
    "\n",
    "    # --- forward method remains the same ---\n",
    "    def forward(self, logits):\n",
    "        temperature = torch.exp(self.log_temperature).item()\n",
    "        temperature = max(0.1, min(temperature, 10.0)) # Clamp temperature\n",
    "        return torch.softmax(logits / temperature, dim=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "891363f4",
   "metadata": {
    "papermill": {
     "duration": 0.074052,
     "end_time": "2025-06-18T04:30:47.036975",
     "exception": false,
     "start_time": "2025-06-18T04:30:46.962923",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Early Stopping Mechanism"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "0952bb5f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-18T04:30:47.184705Z",
     "iopub.status.busy": "2025-06-18T04:30:47.184418Z",
     "iopub.status.idle": "2025-06-18T04:30:47.198108Z",
     "shell.execute_reply": "2025-06-18T04:30:47.197405Z"
    },
    "papermill": {
     "duration": 0.089213,
     "end_time": "2025-06-18T04:30:47.199345",
     "exception": false,
     "start_time": "2025-06-18T04:30:47.110132",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# --- REVISED EarlyStopping Class ---\n",
    "class EarlyStopping:\n",
    "    def __init__(\n",
    "        self,\n",
    "        patience: int = 10,\n",
    "        mode: str = 'max',\n",
    "        delta: float = 0.005,\n",
    "        relative_delta: bool = True,\n",
    "        warm_up: int = 9,\n",
    "        verbose: bool = True,\n",
    "        checkpoint_path: str = 'best_model.pth',\n",
    "        score_weights: Optional[Dict[str, float]] = None\n",
    "    ):\n",
    "        if mode not in ['min', 'max']:\n",
    "            raise ValueError(\"mode must be 'min' or 'max'\")\n",
    "        self.patience = patience\n",
    "        self.mode = mode\n",
    "        self.delta = delta\n",
    "        self.relative_delta = relative_delta\n",
    "        self.warm_up = warm_up\n",
    "        self.verbose = verbose\n",
    "        self.checkpoint_path = checkpoint_path\n",
    "        self.counters: Dict[str, int] = {}\n",
    "        self.best_scores: Dict[str, float] = {}\n",
    "        self.best_epoch: Dict[str, int] = {}\n",
    "        self.early_stop = False\n",
    "        self._is_first = True\n",
    "        self.score_weights = score_weights or {\n",
    "            'binary_auc': 0.5, 'binary_recall': 0.2,\n",
    "            'multiclass_auc': 0.2, 'val_loss': 0.1 # Example weights\n",
    "        }\n",
    "        # Validate and normalize score_weights\n",
    "        if self.score_weights:\n",
    "            total_weight = sum(v for v in self.score_weights.values() if isinstance(v, (int, float)))\n",
    "            if total_weight <= 0:\n",
    "                raise ValueError(\"Total weight must be positive.\")\n",
    "            # Normalize\n",
    "            self.score_weights = {k: v / total_weight for k, v in self.score_weights.items()}\n",
    "\n",
    "    def reset(self):\n",
    "        self.counters = {}; self.best_scores = {}; self.best_epoch = {}\n",
    "        self.early_stop = False; self._is_first = True\n",
    "\n",
    "    def __call__(\n",
    "        self,\n",
    "        metrics: Union[Dict[str, float], float],\n",
    "        model: Optional[torch.nn.Module] = None, # Receives the potentially wrapped model\n",
    "        epoch: Optional[int] = None\n",
    "    ):\n",
    "        if epoch is None: raise ValueError(\"epoch must be provided.\")\n",
    "        if epoch <= self.warm_up:\n",
    "            if self.verbose: print(f\"Epoch {epoch}: Warm-up period, skipping ES.\")\n",
    "            return\n",
    "\n",
    "        if isinstance(metrics, (int, float)): metrics = {'val_metric': metrics}\n",
    "\n",
    "        # Compute composite score\n",
    "        score = 0.0\n",
    "        for name, val in metrics.items():\n",
    "            if not isinstance(val, (int, float)): continue # Skip non-numeric\n",
    "            weight = self.score_weights.get(name, 0)\n",
    "            if weight > 0:\n",
    "                adj_score = -val if name == 'val_loss' else val # Invert loss for maximization\n",
    "                score += adj_score * weight\n",
    "\n",
    "        current_delta = self.delta if not self.relative_delta else self.delta * abs(self.best_scores.get('composite', 0))\n",
    "\n",
    "        # --- CORRECTED model state saving ---\n",
    "        # Get base model for saving state_dict ONLY if saving is needed\n",
    "        model_state_to_save = None\n",
    "        if model is not None:\n",
    "            # Get the underlying model state if wrapped in DataParallel\n",
    "            model_to_save = model.module if isinstance(model, nn.DataParallel) else model\n",
    "            try:\n",
    "                 # Attempt to get state_dict - might fail if model has issues\n",
    "                 model_state_to_save = model_to_save.state_dict()\n",
    "            except Exception as e:\n",
    "                 print(f\"Warning: Could not get model state_dict for saving. Error: {e}\")\n",
    "                 model_state_to_save = None # Ensure it's None if state_dict fails\n",
    "        # --- END CORRECTION ---\n",
    "\n",
    "        save_model = False\n",
    "        if self._is_first or self.best_scores.get('composite') is None:\n",
    "            self.best_scores['composite'] = score\n",
    "            self.best_epoch['composite'] = epoch\n",
    "            self.counters['composite'] = 0\n",
    "            self._is_first = False\n",
    "            save_model = True # Save on first valid epoch\n",
    "            if self.verbose: print(f\"Initial best score: {score:.6f} @ E{epoch}\", end=\"\")\n",
    "        elif score > self.best_scores['composite'] + current_delta:\n",
    "            self.best_scores['composite'] = score\n",
    "            self.best_epoch['composite'] = epoch\n",
    "            self.counters['composite'] = 0\n",
    "            save_model = True # Save if improved\n",
    "            if self.verbose: print(f\"New best score: {score:.6f} @ E{epoch}\", end=\"\")\n",
    "        else:\n",
    "            self.counters['composite'] = self.counters.get('composite', 0) + 1\n",
    "            if self.verbose: print(f\"No improvement. Counter: {self.counters['composite']}/{self.patience}\")\n",
    "            if self.counters['composite'] >= self.patience:\n",
    "                self.early_stop = True\n",
    "                if self.verbose: print(f\"Early stopping triggered @ E{epoch}.\")\n",
    "\n",
    "        # Save checkpoint only if required and state is available\n",
    "        if save_model and model_state_to_save is not None and self.checkpoint_path:\n",
    "            try:\n",
    "                torch.save({\n",
    "                    'epoch': epoch,\n",
    "                    'model_state_dict': model_state_to_save, # Save the potentially unwrapped state\n",
    "                    'best_scores': self.best_scores, # Log best scores so far\n",
    "                    'best_epoch': self.best_epoch # Log best epoch so far\n",
    "                }, self.checkpoint_path)\n",
    "                if self.verbose: print(f\", model saved to {self.checkpoint_path}\")\n",
    "            except Exception as e:\n",
    "                 print(f\"\\nERROR saving checkpoint: {e}\")\n",
    "        elif save_model and self.verbose:\n",
    "             print(\" (checkpoint not saved - model state unavailable or no path)\")\n",
    "        elif save_model: # If verbose is false but save failed\n",
    "             print(f\"Warning: Failed to save best model at epoch {epoch}.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2e530ded",
   "metadata": {
    "papermill": {
     "duration": 0.072664,
     "end_time": "2025-06-18T04:30:47.344529",
     "exception": false,
     "start_time": "2025-06-18T04:30:47.271865",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Training Epoch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "218a2ca5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-18T04:30:47.492951Z",
     "iopub.status.busy": "2025-06-18T04:30:47.492650Z",
     "iopub.status.idle": "2025-06-18T04:30:47.508497Z",
     "shell.execute_reply": "2025-06-18T04:30:47.507321Z"
    },
    "papermill": {
     "duration": 0.091728,
     "end_time": "2025-06-18T04:30:47.509723",
     "exception": false,
     "start_time": "2025-06-18T04:30:47.417995",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import time\n",
    "import torch\n",
    "import torch.nn.functional as F\n",
    "import numpy as np\n",
    "from tqdm import tqdm\n",
    "# Make sure get_resource_usage is defined elsewhere or remove the call\n",
    "\n",
    "def train_epoch(model, loader, optimizer, experiment, epoch, scaler=None, accum_steps=1, criterion_multi=None, mel_idx=None, lambda_binary=0.75, device=None):\n",
    "    \"\"\"\n",
    "    Training epoch function.\n",
    "    \"\"\"\n",
    "    # --- Initial Checks & Setup ---\n",
    "    if criterion_multi is None or mel_idx is None:\n",
    "        raise ValueError(\"criterion_multi and mel_idx must be provided to train_epoch\")\n",
    "    if device is None:\n",
    "        # print(\"Warning: No device provided; defaulting to 'cuda' if available\") # Less verbose\n",
    "        device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
    "\n",
    "    model.train() # Set model to training mode\n",
    "\n",
    "    # --- GET BASE MODEL REFERENCE ---\n",
    "    # Determine if the model is wrapped and get the underlying module if necessary\n",
    "    base_model = model.module if isinstance(model, nn.DataParallel) else model\n",
    "    # ------------------------------\n",
    "\n",
    "    # --- Initialize metrics and timers ---\n",
    "    train_loss_list = []\n",
    "    train_correct = 0\n",
    "    train_total = 0\n",
    "    start_time = time.time()\n",
    "    optimizer.zero_grad() # Zero gradients at the start\n",
    "\n",
    "    # --- Initialize Progress Bar ---\n",
    "    pbar = tqdm(loader, desc=f\"Epoch {epoch} - Loss: N/A, Acc: N/A\", total=len(loader), leave=False)\n",
    "    for batch_idx, batch in enumerate(pbar):\n",
    "        try: # <--- ADD TRY BLOCK HERE ---\n",
    "            # --- Data Handling ---\n",
    "            if hasattr(base_model, 'n_meta_features') and base_model.n_meta_features > 0:\n",
    "                (images, meta), target = batch\n",
    "                images, meta, target = images.to(device), meta.to(device), target.to(device)\n",
    "            else:\n",
    "                images, target = batch\n",
    "                images, target = images.to(device), target.to(device)\n",
    "                meta = None # Ensure meta is None if not used\n",
    "\n",
    "            # --- Forward Pass ---\n",
    "            if scaler:\n",
    "                with torch.cuda.amp.autocast():\n",
    "                    # Use model() call directly, forward method handles meta internally\n",
    "                    logits = model(images, meta) if meta is not None else model(images)\n",
    "\n",
    "                    # --- Loss Calculation ---\n",
    "                    multiclass_loss = criterion_multi(logits, target)\n",
    "                    binary_target = (target == mel_idx).float()\n",
    "                    binary_logits = logits[:, mel_idx] # Use mel_idx defined globally or passed\n",
    "                    binary_loss = F.binary_cross_entropy_with_logits(binary_logits, binary_target)\n",
    "                    total_loss_unscaled = multiclass_loss + lambda_binary * binary_loss\n",
    "                    total_loss = total_loss_unscaled / accum_steps\n",
    "                # --- Backward Pass (AMP) ---\n",
    "                scaler.scale(total_loss).backward()\n",
    "            else: # Not using AMP\n",
    "                # Use model() call directly\n",
    "                logits = model(images, meta) if meta is not None else model(images)\n",
    "\n",
    "                # --- Loss Calculation ---\n",
    "                multiclass_loss = criterion_multi(logits, target)\n",
    "                binary_target = (target == mel_idx).float()\n",
    "                binary_logits = logits[:, mel_idx]\n",
    "                binary_loss = F.binary_cross_entropy_with_logits(binary_logits, binary_target)\n",
    "                total_loss_unscaled = multiclass_loss + lambda_binary * binary_loss\n",
    "                total_loss = total_loss_unscaled / accum_steps\n",
    "                # --- Backward Pass ---\n",
    "                total_loss.backward()\n",
    "\n",
    "            train_loss_list.append(total_loss_unscaled.item())\n",
    "\n",
    "            # --- Accuracy Tracking ---\n",
    "            with torch.no_grad():\n",
    "                 preds = logits.argmax(dim=1)\n",
    "                 batch_correct = (preds == target).sum().item()\n",
    "                 batch_total = target.size(0)\n",
    "                 train_correct += batch_correct\n",
    "                 train_total += batch_total\n",
    "\n",
    "            # --- Optimization Step ---\n",
    "            if (batch_idx + 1) % accum_steps == 0 or (batch_idx + 1) == len(loader):\n",
    "                if scaler:\n",
    "                    scaler.step(optimizer)\n",
    "                    scaler.update()\n",
    "                else:\n",
    "                    optimizer.step()\n",
    "                optimizer.zero_grad()\n",
    "\n",
    "            # --- Update Progress Bar ---\n",
    "            avg_loss_so_far = np.mean(train_loss_list) if train_loss_list else 0.0\n",
    "            acc_so_far = (train_correct / train_total) * 100.0 if train_total > 0 else 0.0\n",
    "            pbar.set_description(f\"Epoch {epoch} - Loss: {avg_loss_so_far:.4f}, Acc: {acc_so_far:.2f}%\")\n",
    "\n",
    "        # --- ADD EXCEPT BLOCK HERE ---\n",
    "        except AttributeError as ae:\n",
    "            print(f\"\\n\\n!!! AttributeError caught in train_epoch loop (batch {batch_idx}) !!!\")\n",
    "            print(f\"Error message: {ae}\")\n",
    "            print(\"Model type:\", type(model))\n",
    "            print(\"Is model DataParallel?\", isinstance(model, nn.DataParallel))\n",
    "            print(\"--- Traceback ---\")\n",
    "            traceback.print_exc() # Print the exact line causing the error\n",
    "            print(\"-----------------\")\n",
    "            raise ae # Re-raise the error to stop execution\n",
    "        except Exception as e:\n",
    "             print(f\"\\n\\n!!! Non-AttributeError caught in train_epoch loop (batch {batch_idx}) !!!\")\n",
    "             print(f\"Error type: {type(e)}\")\n",
    "             print(f\"Error message: {e}\")\n",
    "             traceback.print_exc()\n",
    "             raise e\n",
    "        # --- END TRY/EXCEPT ---\n",
    "\n",
    "    # --- End of Epoch ---\n",
    "    pbar.close()\n",
    "    avg_train_loss = np.mean(train_loss_list) if train_loss_list else 0.0 # Final average loss for the epoch\n",
    "    train_acc = (train_correct / train_total) * 100.0 if train_total > 0 else 0.0\n",
    "    epoch_time = time.time() - start_time\n",
    "\n",
    "    # --- Resource Usage ---\n",
    "    try:\n",
    "        resources = get_resource_usage()\n",
    "    except NameError:\n",
    "        resources = {} # Handle if function not defined\n",
    "        print(\"Warning: get_resource_usage() not defined.\")\n",
    "\n",
    "    # --- Print Epoch Summary ---\n",
    "    print(\n",
    "        f\"Epoch {epoch} - Training Time: {epoch_time:.2f}s, Avg Loss: {avg_train_loss:.5f}, \"\n",
    "        f\"Acc: {train_acc:.2f}%, Resources: {resources}\"\n",
    "    )\n",
    "\n",
    "    # --- Logging to W&B ---\n",
    "    if experiment:\n",
    "        log_data = {\n",
    "            \"train_loss\": avg_train_loss,\n",
    "            \"train_acc\": train_acc,\n",
    "            \"train_epoch_time_seconds\": epoch_time,\n",
    "        }\n",
    "        # Add resource usage if available and it's a dictionary\n",
    "        if isinstance(resources, dict):\n",
    "             log_data.update({f\"train_{k}\": v for k, v in resources.items()})\n",
    "        experiment.log(log_data, step=epoch)\n",
    "\n",
    "    # --- Return average loss for the epoch ---\n",
    "    return avg_train_loss"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f649d4b6",
   "metadata": {
    "papermill": {
     "duration": 0.074497,
     "end_time": "2025-06-18T04:30:47.661775",
     "exception": false,
     "start_time": "2025-06-18T04:30:47.587278",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Validation Epoch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "93d7ce6e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-18T04:30:47.811000Z",
     "iopub.status.busy": "2025-06-18T04:30:47.810724Z",
     "iopub.status.idle": "2025-06-18T04:30:47.835797Z",
     "shell.execute_reply": "2025-06-18T04:30:47.835181Z"
    },
    "papermill": {
     "duration": 0.099525,
     "end_time": "2025-06-18T04:30:47.836997",
     "exception": false,
     "start_time": "2025-06-18T04:30:47.737472",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def val_epoch(model, loader, experiment, epoch, n_test=1, recalib_interval=5, criterion_multi=None, mel_idx=None, lambda_binary=0.5, device=None, use_amp=True):\n",
    "    if criterion_multi is None or mel_idx is None: raise ValueError(\"criterion/mel_idx needed\")\n",
    "    if device is None: device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
    "\n",
    "    model.eval()\n",
    "    base_model = model.module if isinstance(model, nn.DataParallel) else model\n",
    "    out_dim = base_model.out_dim\n",
    "\n",
    "    val_loss_batch_list = [] ; PROBS_ALL = []; TARGETS = []\n",
    "    start_time = time.time()\n",
    "\n",
    "    # --- Temperature Scaling ---\n",
    "    # print(\"DEBUG val_epoch: Initializing TemperatureScaling...\") # DEBUG\n",
    "    temp_scaler = TemperatureScaling(model, device) # Pass original model\n",
    "    optimal_temp = None\n",
    "    if epoch > 1 and epoch % recalib_interval == 1:\n",
    "        # print(f\"DEBUG val_epoch: Calling temp_scaler.calibrate for Epoch {epoch}...\") # DEBUG\n",
    "        try: optimal_temp = temp_scaler.calibrate(loader)\n",
    "        except Exception as cal_e: print(f\" T-Scaling calibration failed: {cal_e}\")\n",
    "        if experiment and optimal_temp is not None: experiment.log({\"optimal_temperature\": optimal_temp}, step=epoch)\n",
    "    current_temp = optimal_temp if optimal_temp is not None else (torch.exp(temp_scaler.log_temperature).item() if hasattr(temp_scaler, 'log_temperature') else 1.0)\n",
    "    print(f\"Using temperature: {current_temp:.4f} for validation epoch {epoch}\")\n",
    "\n",
    "    # --- Init Metrics ---\n",
    "    mc_acc = MulticlassAccuracy(num_classes=out_dim, average='macro').to(device)\n",
    "    mc_f1 = MulticlassF1Score(num_classes=out_dim, average='macro').to(device)\n",
    "    mc_auc = MulticlassAUROC(num_classes=out_dim, average='macro', thresholds=None).to(device)\n",
    "    mc_cm = MulticlassConfusionMatrix(num_classes=out_dim).to(device)\n",
    "    bin_auc = BinaryAUROC(thresholds=None).to(device)\n",
    "    # print(\"DEBUG val_epoch: Metrics initialized.\") # DEBUG\n",
    "\n",
    "    with torch.no_grad():\n",
    "        pbar = tqdm(loader, desc=f\"Validating Epoch {epoch}\", total=len(loader), leave=False)\n",
    "        for batch_idx, batch in enumerate(pbar):\n",
    "            # --- DEBUG PRINT ---\n",
    "            # print(f\"\\nDEBUG val_epoch: Starting batch {batch_idx}. Model type: {type(model)}, DP: {isinstance(model, nn.DataParallel)}\")\n",
    "            # ---\n",
    "            try:\n",
    "                # --- Unpack Batch ---\n",
    "                images, meta, target = None, None, None # Initialize\n",
    "                if hasattr(base_model, 'n_meta_features') and base_model.n_meta_features > 0:\n",
    "                    try: (images, meta), target = batch; images, meta, target = images.to(device), meta.to(device), target.to(device)\n",
    "                    except ValueError: images, target = batch; images, target = images.to(device), target.to(device); meta = None; print(f\"Warn val B{batch_idx}: Unpack assuming (img,tgt)\")\n",
    "                else:\n",
    "                    images, target = batch; images, target = images.to(device), target.to(device); meta = None\n",
    "\n",
    "                # --- Inference ---\n",
    "                # --- DEBUG PRINT ---\n",
    "                # print(f\"DEBUG val_epoch B{batch_idx}: Before forward pass. Use meta: {use_meta}, Meta is None: {meta is None}\")\n",
    "                # ---\n",
    "                with torch.cuda.amp.autocast(enabled=use_amp):\n",
    "                    logits = model(images, x_meta=meta) if use_meta and meta is not None else model(images)\n",
    "                    # --- DEBUG PRINT ---\n",
    "                    # print(f\"DEBUG val_epoch B{batch_idx}: After forward pass. Logits shape: {logits.shape}\")\n",
    "                    # ---\n",
    "                    logits = torch.clamp(logits, min=-20, max=20); # Clamp logits\n",
    "                    if torch.isnan(logits).any(): logits = torch.nan_to_num(logits, 0.0)\n",
    "\n",
    "                    # --- Loss ---\n",
    "                    # --- DEBUG PRINT ---\n",
    "                    # print(f\"DEBUG val_epoch B{batch_idx}: Before loss calculation.\")\n",
    "                    # ---\n",
    "                    multiclass_loss = criterion_multi(logits, target)\n",
    "                    binary_target = (target == mel_idx).float(); binary_logits = logits[:, mel_idx]\n",
    "                    binary_loss = F.binary_cross_entropy_with_logits(torch.clamp(binary_logits, -10, 10), binary_target)\n",
    "                    total_loss = multiclass_loss + lambda_binary * binary_loss\n",
    "\n",
    "                    # --- Probabilities ---\n",
    "                    current_probs = torch.softmax(logits / current_temp, dim=1)\n",
    "                    current_probs = torch.clamp(current_probs, 1e-6, 1.0 - 1e-6); # Clamp probs\n",
    "                    if torch.isnan(current_probs).any(): current_probs = torch.nan_to_num(current_probs, 0.5)\n",
    "\n",
    "                # Store results\n",
    "                if not (torch.isnan(total_loss) or torch.isinf(total_loss)): val_loss_batch_list.append(total_loss.item())\n",
    "                PROBS_ALL.append(current_probs); TARGETS.append(target)\n",
    "\n",
    "                # --- Update Metrics ---\n",
    "                # --- DEBUG PRINT ---\n",
    "                # print(f\"DEBUG val_epoch B{batch_idx}: Before metric update.\")\n",
    "                # ---\n",
    "                mc_acc.update(current_probs, target); mc_f1.update(current_probs, target)\n",
    "                mc_auc.update(current_probs, target); mc_cm.update(current_probs.argmax(dim=1), target)\n",
    "                bin_auc.update(current_probs[:, mel_idx], (target == mel_idx).int())\n",
    "                # --- DEBUG PRINT ---\n",
    "                # print(f\"DEBUG val_epoch B{batch_idx}: After metric update.\")\n",
    "                # ---\n",
    "\n",
    "                pbar.set_postfix(loss=total_loss.item())\n",
    "\n",
    "            except AttributeError as ae: # Catch specific error if needed again\n",
    "                 print(f\"\\n\\n!!! AttributeError caught in val_epoch loop (batch {batch_idx}) !!!\"); print(f\"Error: {ae}\")\n",
    "                 print(f\"Model type: {type(model)}, DP: {isinstance(model, nn.DataParallel)}\")\n",
    "                 traceback.print_exc(); raise ae\n",
    "            except Exception as e:\n",
    "                 print(f\"\\n\\n!!! Error in val_epoch loop (batch {batch_idx}) !!!\"); print(f\"Type: {type(e)}, Error: {e}\")\n",
    "                 traceback.print_exc(); raise e # Re-raise to stop run\n",
    "\n",
    "        pbar.close()\n",
    "\n",
    "    # --- Aggregate & Calculate Final Metrics ---\n",
    "    # print(\"DEBUG val_epoch: Finished validation loop, starting aggregation.\")\n",
    "    if not val_loss_batch_list: return (0.0,0.5,0.5,np.array([]),np.array([]),0,0,0,0,0,0,0,[],[],1.0,None)\n",
    "\n",
    "    val_loss_avg = np.mean(val_loss_batch_list)\n",
    "    epoch_time = time.time() - start_time\n",
    "    try: resources = get_resource_usage()\n",
    "    except NameError: resources = {}\n",
    "\n",
    "    PROBS = torch.cat(PROBS_ALL, dim=0).cpu().numpy()\n",
    "    TARGETS = torch.cat(TARGETS, dim=0).cpu().numpy()\n",
    "    print(f\"Epoch {epoch} Valid Aggregated: PROBS={PROBS.shape}, TARGETS={TARGETS.shape}\")\n",
    "    if PROBS.shape[0] == 0: return (val_loss_avg,0.5,0.5,PROBS,TARGETS,0,0,0,0,0,0,0,[],[],current_temp,None)\n",
    "\n",
    "    # --- *** FINAL CORRECTION for .compute() calls *** ---\n",
    "    # Use the variables defined earlier: mc_acc, mc_f1, mc_auc, mc_cm, bin_auc\n",
    "    mc_acc_val = mc_acc.compute().item() * 100.0\n",
    "    mc_f1_val = mc_f1.compute().item()\n",
    "    mc_auc_val = mc_auc.compute().item()\n",
    "    mc_cm_val = mc_cm.compute().cpu().numpy().tolist()\n",
    "    bin_auc_val = bin_auc.compute().item()\n",
    "    # --- *** END CORRECTION *** ---\n",
    "\n",
    "    # --- Calculate binary threshold & metrics (remains the same) ---\n",
    "    binary_targets_np=(TARGETS == mel_idx).astype(np.float32); binary_probs_np=PROBS[:, mel_idx]\n",
    "    best_threshold=0.5; best_f1=0.0; f1_hist=[]\n",
    "    try:\n",
    "        prec, rec, pr_thresh = precision_recall_curve(binary_targets_np, np.minimum(binary_probs_np*1.1, 1.0))\n",
    "        if len(prec) > 1 and len(rec) > 1:\n",
    "            f1s=2*(prec[:-1]*rec[:-1])/(prec[:-1]+rec[:-1]+1e-6); opt_idx=np.argmax(f1s); best_f1=f1s[opt_idx]; best_threshold=pr_thresh[opt_idx]\n",
    "            f1_hist = list(zip(pr_thresh, f1s)) # Store history only if calculated\n",
    "        print(f\" Best F1 Threshold (PR): {best_threshold:.4f}, F1={best_f1:.4f}\")\n",
    "    except Exception as thresh_e: print(f\"Warn: Threshold opt failed: {thresh_e}\")\n",
    "    # --- CORRECTED Binary Metric Calculation Block ---\n",
    "    binary_preds_best=(binary_probs_np > best_threshold).astype(np.float32)\n",
    "    bin_cm_best=[[0,0],[0,0]]; # Default CM\n",
    "    # Initialize all metrics to default values\n",
    "    bin_spec_best,bin_prec_best,bin_rec_best,bin_f1_best,bin_acc_best = 0.0, 0.0, 0.0, 0.0, 0.0\n",
    "\n",
    "    if len(binary_targets_np) > 0:\n",
    "        try: # Start try block for ALL binary metric calculations\n",
    "            bin_cm_best=confusion_matrix(binary_targets_np, binary_preds_best).tolist()\n",
    "\n",
    "            # Calculate specificity only if CM is 2x2\n",
    "            if len(np.array(bin_cm_best).ravel())==4:\n",
    "                tn,fp,fn,tp=np.array(bin_cm_best).ravel()\n",
    "                bin_spec_best=tn/(tn+fp) if (tn+fp)>0 else 0.0\n",
    "            # else: specificity remains 0.0\n",
    "\n",
    "            # Calculate other metrics INSIDE the try block\n",
    "            bin_prec_best=precision_score(binary_targets_np,binary_preds_best,zero_division=0)\n",
    "            bin_rec_best=recall_score(binary_targets_np,binary_preds_best,zero_division=0)\n",
    "            bin_f1_best=f1_score(binary_targets_np,binary_preds_best,zero_division=0) # This should match best_f1 found earlier\n",
    "            bin_acc_best=accuracy_score(binary_targets_np,binary_preds_best)*100\n",
    "\n",
    "        except Exception as bin_metric_e:\n",
    "            # If any calculation fails, metrics keep their default values (0.0)\n",
    "            print(f\"Warn: Binary metric calculation failed: {bin_metric_e}\")\n",
    "            # bin_cm_best remains default [[0,0],[0,0]]\n",
    "    # --- END CORRECTION ---\n",
    "\n",
    "    # --- Print & Log (uses potentially updated variables) ---\n",
    "    print(\n",
    "         f\"Epoch {epoch} - Val Loss: {val_loss_avg:.5f}, \"\n",
    "         f\"Bin AUC: {bin_auc_val:.4f}, F1(T={best_threshold:.2f}): {bin_f1_best:.4f}, \"\n",
    "         f\"MC AUC: {mc_auc_val:.4f}, MC Acc: {mc_acc_val:.2f}%, MC F1: {mc_f1_val:.4f}, \"\n",
    "         f\"Val Time: {epoch_time:.2f}s\"\n",
    "    )\n",
    "    metrics_log = {\n",
    "         \"val_loss\": val_loss_avg, \"binary_auc\": bin_auc_val, \"multiclass_auc\": mc_auc_val if not np.isnan(mc_auc_val) else 0.5,\n",
    "         \"binary_acc\": bin_acc_best, \"binary_precision\": bin_prec_best, \"binary_recall\": bin_rec_best,\n",
    "         \"binary_specificity\": bin_spec_best, \"binary_f1\": bin_f1_best,\n",
    "         \"multiclass_acc\": mc_acc_val, \"multiclass_f1\": mc_f1_val, # Use mc_..._val\n",
    "         \"val_epoch_time_seconds\": epoch_time, **{f\"val_{k}\": v for k, v in resources.items()}\n",
    "    }\n",
    "    if experiment: # Check if wandb run object exists\n",
    "         try:\n",
    "             experiment.log(metrics_log, step=epoch)\n",
    "             cls_nms = [k for k,v in sorted(globals().get('diagnosis2idx',{}).items(),key=lambda i:i[1])] or [str(i) for i in range(globals().get('out_dim',0))]\n",
    "             if len(binary_targets_np)>0:\n",
    "                 experiment.log({\"bin_cm_best_f1\": wandb.plot.confusion_matrix(y_true=binary_targets_np.astype(int), preds=binary_preds_best, class_names=['non-mel','mel'])}, step=epoch)\n",
    "                 experiment.log({\"mc_cm\": wandb.plot.confusion_matrix(y_true=TARGETS.astype(int), preds=PROBS.argmax(axis=1), class_names=cls_nms)}, step=epoch)\n",
    "                 if bin_cm_best: experiment.log({\"bin_cm_table\": wandb.Table(columns=['Pred Non-Mel','Pred Mel'], data=bin_cm_best)}, step=epoch)\n",
    "                 if mc_cm_val: experiment.log({\"mc_cm_table\": wandb.Table(columns=[f\"Pred {n}\" for n in cls_nms], data=mc_cm_val)}, step=epoch) # Use mc_cm_val\n",
    "             if f1_hist: experiment.log({\"f1_thresh_hist\": wandb.Table(columns=[\"thresh\",\"f1\"], data=f1_hist)}, step=epoch)\n",
    "         except Exception as log_e: print(f\"Wandb val log failed: {log_e}\")\n",
    "\n",
    "    # --- ROC Data ---\n",
    "    roc_data = None # Initialize roc_data to None\n",
    "    # --- CORRECTED SYNTAX ---\n",
    "    if len(binary_targets_np) > 0 :\n",
    "        try:\n",
    "            fpr, tpr, roc_thresholds = roc_curve(binary_targets_np, binary_probs_np) # Use adjusted probs? Maybe not needed for roc_curve\n",
    "            # Check if roc_curve returned valid data (at least two points needed)\n",
    "            if len(fpr) > 1 and len(tpr) > 1:\n",
    "                roc_data = (fpr, tpr, roc_thresholds)\n",
    "            else:\n",
    "                 print(\"Warning: ROC curve calculation returned insufficient points.\")\n",
    "        except ValueError as roc_e:\n",
    "             print(f\"Warning: Could not compute ROC curve: {roc_e}\")\n",
    "        except Exception as e: # Catch other potential errors\n",
    "             print(f\"Warning: Unexpected error during ROC curve calculation: {e}\")\n",
    "    # --- END CORRECTION ---\n",
    "\n",
    "    # --- Return ---\n",
    "    # The return statement should be correct from the previous fix\n",
    "    return (val_loss_avg, bin_auc_val, mc_auc_val, PROBS, TARGETS,\n",
    "            bin_acc_best, bin_prec_best, bin_rec_best, bin_f1_best, bin_spec_best,\n",
    "            mc_acc_val, mc_f1_val, mc_cm_val, bin_cm_best,\n",
    "            current_temp, roc_data)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a12e727f",
   "metadata": {
    "papermill": {
     "duration": 0.073539,
     "end_time": "2025-06-18T04:30:47.982584",
     "exception": false,
     "start_time": "2025-06-18T04:30:47.909045",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Grad-Cam type shit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "1103f89d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-18T04:30:48.129940Z",
     "iopub.status.busy": "2025-06-18T04:30:48.129674Z",
     "iopub.status.idle": "2025-06-18T04:30:48.135360Z",
     "shell.execute_reply": "2025-06-18T04:30:48.134587Z"
    },
    "papermill": {
     "duration": 0.080282,
     "end_time": "2025-06-18T04:30:48.136470",
     "exception": false,
     "start_time": "2025-06-18T04:30:48.056188",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Defined load_and_preprocess_for_gradcam function.\n"
     ]
    }
   ],
   "source": [
    "def load_and_preprocess_for_gradcam(image_path, target_size):\n",
    "    \"\"\"Loads an image, resizes it, and returns both normalized tensor and unnormalized numpy array.\"\"\"\n",
    "    img = cv2.imread(image_path)\n",
    "    if img is None:\n",
    "        raise FileNotFoundError(f\"Could not read image: {image_path}\")\n",
    "    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB) # Convert to RGB\n",
    "\n",
    "    # Resize\n",
    "    img_resized = cv2.resize(img, (target_size, target_size))\n",
    "\n",
    "    # --- Prepare image for visualization (unnormalized) ---\n",
    "    # Needs to be float32 between 0 and 1\n",
    "    img_for_display = np.float32(img_resized) / 255.0\n",
    "\n",
    "    # --- Prepare image for model (normalized) ---\n",
    "    # Apply normalization matching your transforms_val/transforms_train\n",
    "    normalize_transform = A.Compose([\n",
    "        A.Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))\n",
    "    ])\n",
    "    normalized_img_data = normalize_transform(image=img_resized)\n",
    "    normalized_img_np = normalized_img_data['image']\n",
    "\n",
    "    # Convert to tensor, add batch dimension, move channel first\n",
    "    # (B, C, H, W) expected by model\n",
    "    input_tensor = torch.tensor(normalized_img_np).permute(2, 0, 1).unsqueeze(0).float()\n",
    "\n",
    "    return input_tensor, img_for_display\n",
    "\n",
    "print(\"Defined load_and_preprocess_for_gradcam function.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "e3f14588",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-18T04:30:48.284350Z",
     "iopub.status.busy": "2025-06-18T04:30:48.284107Z",
     "iopub.status.idle": "2025-06-18T04:30:48.293486Z",
     "shell.execute_reply": "2025-06-18T04:30:48.292803Z"
    },
    "papermill": {
     "duration": 0.084444,
     "end_time": "2025-06-18T04:30:48.294795",
     "exception": false,
     "start_time": "2025-06-18T04:30:48.210351",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# --- Robust generate_gradcam function ---\n",
    "def generate_gradcam(model, target_layer, input_tensor, original_image,\n",
    "                     target_class_idx, device, meta_tensor=None):\n",
    "    \"\"\"Generates Grad-CAM heatmap, handling metadata and potential issues.\"\"\"\n",
    "    print(\"--- Executing generate_gradcam ---\")\n",
    "\n",
    "    model.to(device); model.eval()\n",
    "    # Ensure target_class_idx is an int\n",
    "    if not isinstance(target_class_idx, int):\n",
    "         print(f\"  Warning: target_class_idx is not int ({type(target_class_idx)}), attempting cast.\")\n",
    "         try: target_class_idx = int(target_class_idx)\n",
    "         except ValueError: print(\"  ERROR: Cannot cast target_class_idx to int.\"); return None, None\n",
    "\n",
    "    targets = [ClassifierOutputTarget(target_class_idx)]\n",
    "    model_wrapper = model\n",
    "\n",
    "    if meta_tensor is not None:\n",
    "        meta_tensor = meta_tensor.to(device)\n",
    "        class ModelWrapper(torch.nn.Module):\n",
    "            def __init__(self, model, meta_data): super().__init__(); self.model=model; self.meta_data=meta_data\n",
    "            def forward(self, x): return self.model(x, x_meta=self.meta_data) # Assumes forward(img, meta)\n",
    "        model_wrapper = ModelWrapper(model, meta_tensor)\n",
    "        print(\"  Using ModelWrapper.\")\n",
    "\n",
    "    grayscale_cam = None; visualization = None\n",
    "\n",
    "    try:\n",
    "        print(f\"  Initializing GradCAM with target layer: {type(target_layer)}\")\n",
    "        # Ensure target_layers is a list\n",
    "        if not isinstance(target_layer, list): target_layers = [target_layer]\n",
    "        else: target_layers = target_layer # Assume it's already a list if passed as one\n",
    "        grad_cam_instance = GradCAM(model=model_wrapper, target_layers=target_layers)\n",
    "\n",
    "        print(f\"  Generating raw CAM for target class: {target_class_idx}\")\n",
    "        _raw_cam = grad_cam_instance(input_tensor=input_tensor, targets=targets)\n",
    "\n",
    "        if _raw_cam is None: print(\"  ERROR: grad_cam_instance returned None.\"); return None, None\n",
    "        if not isinstance(_raw_cam, np.ndarray): print(f\"  ERROR: grad_cam_instance returned type: {type(_raw_cam)}\"); return None, None\n",
    "        if _raw_cam.size == 0 or _raw_cam.shape[0] == 0: print(\"  ERROR: grad_cam_instance returned empty array.\"); return None, None\n",
    "        print(f\"  _raw_cam generated - Shape: {_raw_cam.shape}, Min: {np.min(_raw_cam):.4f}, Max: {np.max(_raw_cam):.4f}\")\n",
    "\n",
    "        grayscale_cam = _raw_cam[0, :]\n",
    "        print(f\"  grayscale_cam extracted - Shape: {grayscale_cam.shape}, Min: {np.min(grayscale_cam):.4f}, Max: {np.max(grayscale_cam):.4f}\")\n",
    "\n",
    "        if np.isnan(grayscale_cam).any(): print(\"  ERROR: grayscale_cam contains NaNs.\"); return None, grayscale_cam\n",
    "\n",
    "        cam_min = np.min(grayscale_cam); cam_max = np.max(grayscale_cam)\n",
    "        if cam_max <= cam_min or abs(cam_max - cam_min) < 1e-6 : # Check for constant value robustly\n",
    "            print(f\"  Warning: grayscale_cam has no significant variation (min={cam_min:.4f}, max={cam_max:.4f}). Visualization may fail.\")\n",
    "            # Attempt visualization anyway\n",
    "\n",
    "        print(\"  Attempting show_cam_on_image...\")\n",
    "        if not (isinstance(original_image, np.ndarray) and original_image.ndim == 3 and original_image.shape[2] == 3 and np.min(original_image) >= 0 and np.max(original_image) <= 1.0):\n",
    "             print(f\"  ERROR: original_image format/range invalid. Type: {type(original_image)}, Shape: {original_image.shape}, Range: [{np.min(original_image)}, {np.max(original_image)}]\")\n",
    "             return None, grayscale_cam\n",
    "\n",
    "        visualization = show_cam_on_image(original_image, grayscale_cam, use_rgb=True, colormap=cv2.COLORMAP_HOT)\n",
    "\n",
    "        if visualization is None: print(\"  ERROR: show_cam_on_image returned None.\")\n",
    "        else: print(f\"  Visualization created - Shape: {visualization.shape}\")\n",
    "\n",
    "    except Exception as e_cam_gen:\n",
    "        print(f\"  ERROR during Grad-CAM generation steps: {e_cam_gen}\"); traceback.print_exc()\n",
    "        visualization = None; grayscale_cam = None # Ensure None on error\n",
    "\n",
    "    print(f\"  Returning visualization (is None: {visualization is None}), grayscale_cam (is None: {grayscale_cam is None})\")\n",
    "    return visualization, grayscale_cam\n",
    "# --- End generate_gradcam function ---"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "912acd5e",
   "metadata": {
    "papermill": {
     "duration": 0.072939,
     "end_time": "2025-06-18T04:30:48.441232",
     "exception": false,
     "start_time": "2025-06-18T04:30:48.368293",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Main training function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "021ede2a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-18T04:30:48.591961Z",
     "iopub.status.busy": "2025-06-18T04:30:48.591673Z",
     "iopub.status.idle": "2025-06-18T04:30:48.673717Z",
     "shell.execute_reply": "2025-06-18T04:30:48.672564Z"
    },
    "papermill": {
     "duration": 0.161192,
     "end_time": "2025-06-18T04:30:48.675838",
     "exception": false,
     "start_time": "2025-06-18T04:30:48.514646",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def run_single_model(model_type='efficientnetv2',\n",
    "                     cnn_backbone_name='efficientnetv2_m',\n",
    "                     transformer_backbone_name=None,\n",
    "                     use_meta_flag=True,\n",
    "                     use_external_flag=True,\n",
    "                     target_total_epochs=40): # Keep target epochs\n",
    "    \"\"\"\n",
    "    Main training function adapted for EffNetV2 / Swin Hybrid models.\n",
    "    Uses PLAUSIBLE adaptive settings based on configuration, NO forced bias.\n",
    "    Uses CONSISTENT augmentation and training schedules.\n",
    "    \"\"\"\n",
    "    global use_meta, use_external, NOTEBOOK_START_TIME, MAX_RUNTIME_SECONDS\n",
    "    use_meta = use_meta_flag\n",
    "    use_external = use_external_flag\n",
    "\n",
    "    print(f\"--- Starting Plausible Training Run ---\") # Changed title\n",
    "    print(f\"Model Type: {model_type}, CNN: {cnn_backbone_name}\" + (f\", TF: {transformer_backbone_name}\" if transformer_backbone_name else \"\"))\n",
    "    print(f\"Using Meta: {use_meta}, Using External: {use_external}\")\n",
    "\n",
    "    # --- 1. Configuration & Parameter Adaptation ---\n",
    "    print(\"\\n--- 1. Configuring Run Parameters ---\")\n",
    "    device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu'); print(f\"Device: {device}\")\n",
    "    if torch.cuda.device_count() > 1: print(f\"GPUs available: {torch.cuda.device_count()}\")\n",
    "\n",
    "    cnn_size_tag = get_v2_size_map(cnn_backbone_name)\n",
    "    # *** Unpack only TWO values ***\n",
    "    lr_adaptation_factor, regularization_factor = configure_dynamic_parameters(\n",
    "        model_type, cnn_backbone_name, use_meta, use_external\n",
    "    )\n",
    "\n",
    "    # Batch Size / Accumulation (Keep adaptive based on CNN size)\n",
    "    _batch_config = {'s': {'bs': 24, 'acc': 3}, 'm': {'bs': 18, 'acc': 4}, 'l': {'bs': 12, 'acc': 5}} # Adjusted for V2+SwinBase\n",
    "    _current_bs_cfg = _batch_config.get(cnn_size_tag, _batch_config['m'])\n",
    "    batch_size, accum_steps = _current_bs_cfg['bs'], _current_bs_cfg['acc']\n",
    "    effective_bs = batch_size * accum_steps\n",
    "    print(f\"Batch Config ({cnn_size_tag}): BS={batch_size}, Accum={accum_steps} (Eff={effective_bs})\")\n",
    "\n",
    "    # --- *** Use CONSISTENT Training Schedule *** ---\n",
    "    n_epochs = target_total_epochs # Total loop iterations\n",
    "\n",
    "    # --- <<< START DEBUG MODIFICATION >>> ---\n",
    "    debug_epochs = 25 # Set the number of epochs for DEBUG mode\n",
    "    if DEBUG:\n",
    "        print(f\"\\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\")\n",
    "        print(f\"!!! DEBUG MODE ACTIVE: Overriding epochs to {debug_epochs} !!!\")\n",
    "        print(f\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\\n\")\n",
    "        n_epochs = debug_epochs\n",
    "    # --- <<< END DEBUG MODIFICATION >>> ---\n",
    "\n",
    "    \n",
    "\n",
    "    # --- Calculate phase durations relative to n_epochs ---\n",
    "    # Aim for roughly: 20% freeze, 30% warmup, 50% cosine\n",
    "    # Ensure minimums and that phases fit within n_epochs\n",
    "    freeze_epo = min(n_epochs - 2, max(1, round(n_epochs * 0.20))) if n_epochs > 1 else 0\n",
    "    warmup_epo = min(n_epochs - freeze_epo - 1, max(1, round(n_epochs * 0.30))) if (n_epochs - freeze_epo) > 1 else 0\n",
    "    cosine_epo = n_epochs - freeze_epo - warmup_epo\n",
    "    cosine_epo = max(0, cosine_epo) # Ensure non-negative\n",
    "    # Simplified adjustment for DEBUG:\n",
    "    if DEBUG and n_epochs <= 5 : # Very short runs\n",
    "        freeze_epo = 1\n",
    "        warmup_epo = max(0, n_epochs - 2) # Warmup for remaining epochs except last\n",
    "        cosine_epo = max(0, n_epochs - freeze_epo - warmup_epo) # Likely 0 or 1\n",
    "        print(f\"DEBUG Schedule Adjustment: F={freeze_epo}, W={warmup_epo}, C={cosine_epo}\")\n",
    "    # --- Calculate unfreeze points relative to n_epochs ---\n",
    "    # Start unfreezing shortly after the initial freeze ends\n",
    "    unfreeze_start_epoch = freeze_epo + 1 # Start right after freeze\n",
    "    # Full unfreeze happens partway through the warmup phase (e.g., ~60% into warmup)\n",
    "    # Ensure it happens after start and before cosine starts\n",
    "    unfreeze_point_in_warmup = max(1, round(warmup_epo * 0.60))\n",
    "    full_unfreeze_epoch = min(freeze_epo + warmup_epo, freeze_epo + unfreeze_point_in_warmup)\n",
    "    # Make sure full unfreeze epoch is at least one after start epoch\n",
    "    full_unfreeze_epoch = max(unfreeze_start_epoch + 1, full_unfreeze_epoch)\n",
    "    # Guard against n_epochs being too small\n",
    "    if n_epochs <= freeze_epo + 1: full_unfreeze_epoch = n_epochs + 1 # Prevent unfreeze if only freeze exists\n",
    "\n",
    "    freeze_duration, warmup_duration, cosine_duration = freeze_epo, warmup_epo, cosine_epo\n",
    "\n",
    "    print(f\"Using Training Schedule: Freeze={freeze_duration}, Warmup={warmup_duration}, Cosine={cosine_duration} (Total={n_epochs})\")\n",
    "    print(f\"Unfreezing Schedule Points (Dynamic): Start E{unfreeze_start_epoch}, Full E{full_unfreeze_epoch}\")\n",
    "    \n",
    "    # Image Size & Data Directories\n",
    "    target_image_sizes = {'s': 384, 'm': 448, 'l': 480}\n",
    "    image_size = 384\n",
    "    data_dir_size = 384 if image_size <= 384 else 512\n",
    "    data_dir_comp = f'../input/jpeg-melanoma-{data_dir_size}x{data_dir_size}'\n",
    "    data_dir_ext = f'../input/jpeg-isic2019-{data_dir_size}x{data_dir_size}' if use_external else None\n",
    "    print(f\"Target Image Size: {image_size}, Data Dir Size: {data_dir_size}\")\n",
    "    print(f\"Competition Data: {data_dir_comp}\")\n",
    "    if data_dir_ext: print(f\"External Data: {data_dir_ext}\")\n",
    "\n",
    "    # Kernel Type String for Logging/Saving\n",
    "    kb = f\"{cnn_backbone_name.replace('efficientnet','effnet')}\"\n",
    "    if model_type == 'hybrid_swin': kb += \"_swin\"\n",
    "    kernel_type = f\"{kb}_{image_size}{'_ext' if use_external else ''}{'_meta' if use_meta else ''}\"\n",
    "    print(f\"Generated kernel_type: {kernel_type}\")\n",
    "    # --- Define hyperparameters USED LATER here ---\n",
    "    debug_sample_size = 1000\n",
    "    split_random_state = 42\n",
    "    llrd_decay_rate = 0.90 # Fixed choice for this implementation\n",
    "    lambda_binary = 0.5    # Fixed choice\n",
    "    loss_label_smoothing = 0.1 # Fixed choice\n",
    "    warmup_multiplier = 10    # Fixed choice\n",
    "    plateau_factor = 0.5      # Fixed choice\n",
    "    plateau_patience = 5       # Fixed choice\n",
    "    es_patience = 20          # Fixed choice\n",
    "    es_delta = 0.003          # Fixed choice\n",
    "    es_relative_delta = True  # Fixed choice\n",
    "    val_split_ratio = 0.2\n",
    "    es_score_weights = {'binary_auc': 0.5, 'binary_recall': 0.2, 'multiclass_auc': 0.2, 'val_loss': 0.1} # Fixed choice\n",
    "\n",
    "    # --- WandB Initialization ---\n",
    "    print(\"\\n--- WandB Initialization ---\")\n",
    "    wandb_run = None\n",
    "    try:\n",
    "        wandb_config = {\n",
    "            \"kernel_type\": kernel_type, \"model_type\": model_type, \"cnn_backbone\": cnn_backbone_name,\n",
    "            \"transformer_backbone\": transformer_backbone_name, \n",
    "            \"cnn_size_tag\": cnn_size_tag,\n",
    "            \"use_external\": use_external, \"use_meta\": use_meta, \"image_size\": image_size,\n",
    "            \"DEBUG\": DEBUG,\n",
    "            \"target_total_epochs\": n_epochs, \n",
    "            \"batch_size\": batch_size, \"accum_steps\": accum_steps, \"effective_bs\": effective_bs,\n",
    "            \"use_amp\": use_amp, \"init_lr\": init_lr,\n",
    "            \"lr_adaptation_factor\": lr_adaptation_factor, \n",
    "            \"regularization_factor\": regularization_factor, \n",
    "            \"llrd_decay_rate\": llrd_decay_rate, \n",
    "            \"lambda_binary_loss_weight\": lambda_binary, \n",
    "            \"loss_label_smoothing\": loss_label_smoothing, \n",
    "            \"freeze_epochs\": freeze_duration, \"warmup_epochs\": warmup_duration, \n",
    "            \"cosine_epochs\": cosine_duration, \n",
    "            \"unfreeze_start\": unfreeze_start_epoch, \"unfreeze_full\": full_unfreeze_epoch,\n",
    "            \"warmup_multiplier\": warmup_multiplier, \n",
    "            \"plateau_factor\": plateau_factor, \"plateau_patience\": plateau_patience, \n",
    "            \"es_patience\": es_patience, \"es_delta\": es_delta, \"es_relative_delta\": es_relative_delta, \n",
    "            \"es_warm_up\": freeze_duration, \n",
    "            \"es_score_weights\": es_score_weights, \n",
    "            \"num_workers\": num_workers, \"split_random_state\": split_random_state\n",
    "        }\n",
    "        tz = pytz.timezone('Asia/Jakarta'); run_name = f\"{kernel_type}_{datetime.now(tz).strftime('%y%m%d_%H%M')}\"\n",
    "        wandb_run = wandb.init(project=\"SKRIPSI GACOR\", entity=\"arveda-ava86-universitas-gadjah-mada-library\", config=wandb_config, name=run_name, tags=[cnn_size_tag, model_type, kernel_type])\n",
    "        print(f\"WandB run initialized: {run_name} (ID: {wandb_run.id if wandb_run else 'N/A'})\")\n",
    "    except Exception as e: print(f\"Error initializing WandB: {e}\"); traceback.print_exc(); wandb_run = None\n",
    "    torch.cuda.empty_cache()\n",
    "\n",
    "    \n",
    "    # --- 2. Data Sampling & Splitting ---\n",
    "    print(\"\\n--- 2. Data Sampling & Splitting ---\")\n",
    "    df_train_to_split = None # DataFrame to use for train/val split\n",
    "    # --- >>> ADD THIS PRINT STATEMENT <<< ---\n",
    "    print(f\"DEBUG CHECK: Type of split_random_state before sampling: {type(split_random_state)}, Value: {split_random_state}\")\n",
    "    # --- >>> END ADD <<< ---\n",
    "    if DEBUG:\n",
    "        # --- >>> ADD TYPE CHECK AND CORRECTION <<< ---\n",
    "        if isinstance(debug_sample_size, tuple):\n",
    "            print(f\"Warning: debug_sample_size was a tuple {debug_sample_size}. Taking the first element.\")\n",
    "            if len(debug_sample_size) > 0 and isinstance(debug_sample_size[0], int):\n",
    "                debug_sample_size = debug_sample_size[0]\n",
    "            else:\n",
    "                print(\"Error: Cannot correct debug_sample_size tuple. Reverting to default 200.\")\n",
    "                debug_sample_size = 200 # Fallback default\n",
    "        elif not isinstance(debug_sample_size, int):\n",
    "             print(f\"Warning: debug_sample_size was not an int ({type(debug_sample_size)}). Reverting to default 200.\")\n",
    "             debug_sample_size = 200 # Fallback default\n",
    "        # --- >>> END TYPE CHECK <<< ---\n",
    "\n",
    "        print(f\"\\n!!! DEBUG MODE: Sampling up to {debug_sample_size} instances from df_train !!!\") # Changed wording slightly\n",
    "\n",
    "        # Now the comparison should work\n",
    "        if len(df_train) <= debug_sample_size:\n",
    "             print(f\" Original df_train ({len(df_train)}) smaller than/equal to debug sample size. Using all.\")\n",
    "             df_train_to_split = df_train.copy()\n",
    "        elif len(df_train['target'].unique()) > 1:\n",
    "             try:\n",
    "                 # Try stratified sampling first\n",
    "                 required_frac = debug_sample_size / len(df_train)\n",
    "                 df_train_to_split = df_train.groupby('target', group_keys=False).apply(lambda x: x.sample(n=max(1, int(len(x) * required_frac)), random_state=split_random_state))\n",
    "\n",
    "                 # If oversampled due to rounding up in apply, sample down\n",
    "                 if len(df_train_to_split) > debug_sample_size:\n",
    "                      df_train_to_split = df_train_to_split.sample(debug_sample_size, random_state=split_random_state)\n",
    "                 # If undersampled (e.g., tiny classes), top up with random sample if needed (less critical for debug)\n",
    "                 # elif len(df_train_to_split) < debug_sample_size * 0.8:\n",
    "                 #    print(\" Stratified fraction resulted in fewer samples than expected, taking random sample instead.\")\n",
    "                 #    df_train_to_split = df_train.sample(debug_sample_size, random_state=split_random_state)\n",
    "\n",
    "\n",
    "                 print(f\" Stratified sampling successful for DEBUG (Target: {debug_sample_size}, Actual: {len(df_train_to_split)}).\")\n",
    "             except Exception as e:\n",
    "                 print(f\" Warning: Stratified sampling for DEBUG failed ({e}). Falling back to random sampling.\")\n",
    "                 df_train_to_split = df_train.sample(debug_sample_size, random_state=split_random_state)\n",
    "        else:\n",
    "             # Cannot stratify\n",
    "             print(\"Warning: Only one class present in df_train target for DEBUG. Performing random sampling.\")\n",
    "             df_train_to_split = df_train.sample(min(debug_sample_size, len(df_train)), random_state=split_random_state)\n",
    "\n",
    "        print(f\" DEBUG Sampled df_train shape: {df_train_to_split.shape}\")\n",
    "        if not df_train_to_split.empty:\n",
    "            print(f\" DEBUG Sampled target distribution:\\n{df_train_to_split['target'].value_counts(normalize=True).sort_index()}\")\n",
    "            \n",
    "    else: # Not DEBUG mode\n",
    "        # --- <<< CHANGE THIS BLOCK >>> ---\n",
    "        # if len(df_train) > production_sample_size: # REMOVE or comment out this check\n",
    "        #     print(f\"\\n!!! PRODUCTION MODE: Undersampling df_train...\")\n",
    "        #     # ... (undersampling code) ...\n",
    "        # else:\n",
    "        #     print(f\"\\n--- PRODUCTION MODE: Using full df_train ({len(df_train)} instances, <= {production_sample_size}) ---\")\n",
    "        #     df_train_to_split = df_train.copy()\n",
    "    \n",
    "        # --- Replace with ---\n",
    "        print(f\"\\n--- PRODUCTION MODE: Using full df_train ({len(df_train)} instances) ---\")\n",
    "        df_train_to_split = df_train.copy()\n",
    "        # --- <<< END CHANGE >>> ---\n",
    "\n",
    "\n",
    "\n",
    "    # --- Perform Train/Validation Split on the (potentially sampled) data ---\n",
    "    print(f\"\\nSplitting data (shape: {df_train_to_split.shape}) with val ratio {val_split_ratio}...\")\n",
    "    df_train_set = None\n",
    "    df_valid_set = None\n",
    "    if df_train_to_split.empty:\n",
    "        print(\"Warning: DataFrame to split is empty. Creating empty train/valid sets.\")\n",
    "        df_train_set = pd.DataFrame(columns=df_train.columns)\n",
    "        df_valid_set = pd.DataFrame(columns=df_train.columns)\n",
    "    elif val_split_ratio > 0 and val_split_ratio < 1:\n",
    "        # Check stratification possibility again on the sampled data\n",
    "        if len(df_train_to_split['target'].unique()) > 1:\n",
    "            try:\n",
    "                df_train_set, df_valid_set = train_test_split(\n",
    "                    df_train_to_split,\n",
    "                    test_size=val_split_ratio,\n",
    "                    random_state=split_random_state,\n",
    "                    stratify=df_train_to_split['target'] # Stratify on the sampled data\n",
    "                )\n",
    "                print(\" Stratified split successful.\")\n",
    "            except ValueError as e:\n",
    "                 print(f\" Warning: Stratified split on sampled data failed ({e}). Falling back to non-stratified split.\")\n",
    "                 df_train_set, df_valid_set = train_test_split(\n",
    "                     df_train_to_split,\n",
    "                     test_size=val_split_ratio,\n",
    "                     random_state=split_random_state\n",
    "                 )\n",
    "        else:\n",
    "             print(\"Warning: Only one class present in sampled df_train target. Performing non-stratified split.\")\n",
    "             df_train_set, df_valid_set = train_test_split(\n",
    "                 df_train_to_split,\n",
    "                 test_size=val_split_ratio,\n",
    "                 random_state=split_random_state\n",
    "             )\n",
    "    elif val_split_ratio == 0:\n",
    "         print(\"Validation split ratio is 0. Using all sampled data for training.\")\n",
    "         df_train_set = df_train_to_split.copy()\n",
    "         df_valid_set = pd.DataFrame(columns=df_train.columns)\n",
    "    else: # val_split_ratio >= 1\n",
    "         print(\"Validation split ratio is >= 1. Using all sampled data for validation.\")\n",
    "         df_valid_set = df_train_to_split.copy()\n",
    "         df_train_set = pd.DataFrame(columns=df_train.columns)\n",
    "\n",
    "    # Reset index after final split\n",
    "    if df_train_set is not None: df_train_set = df_train_set.reset_index(drop=True)\n",
    "    if df_valid_set is not None: df_valid_set = df_valid_set.reset_index(drop=True)\n",
    "\n",
    "    print(f\" Final Train set shape: {df_train_set.shape}, Final Validation set shape: {df_valid_set.shape}\")\n",
    "    if not df_train_set.empty: print(f\" Final Train set target distribution:\\n{df_train_set['target'].value_counts(normalize=True).sort_index()}\")\n",
    "    if not df_valid_set.empty: print(f\" Final Valid set target distribution:\\n{df_valid_set['target'].value_counts(normalize=True).sort_index()}\")\n",
    "\n",
    "    # --- Update WandB Config with final data counts ---\n",
    "    if wandb_run:\n",
    "        try: # Add try-except around wandb calls\n",
    "            wandb_run.config.update({\n",
    "                \"n_samples_total_before_split\": len(df_train_to_split),\n",
    "                \"n_samples_train\": len(df_train_set),\n",
    "                \"n_samples_valid\": len(df_valid_set),\n",
    "                \"out_dim\": out_dim,\n",
    "                \"mel_idx\": mel_idx\n",
    "            }, allow_val_change=True) # Allow changes post-init\n",
    "        except Exception as e: print(f\"Wandb config update failed (data counts): {e}\")\n",
    "\n",
    "\n",
    "    # --- Augmentations & DataLoaders ---\n",
    "    print(\"\\nSetting Augmentations & Creating DataLoaders...\")\n",
    "    transforms_val = A.Compose([\n",
    "        A.Resize(image_size, image_size),\n",
    "        A.Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))\n",
    "    ])\n",
    "    if 'transforms_train' not in globals(): raise NameError(\"Global 'transforms_train' not defined.\")\n",
    "\n",
    "    dataset_train = SIIMISICDataset(df_train_set, 'train', 'train', transform=transforms_train)\n",
    "    dataset_valid = SIIMISICDataset(df_valid_set, 'train', 'val', transform=transforms_val)\n",
    "\n",
    "    # --- Weighted Sampler Logic ---\n",
    "    train_sampler = None\n",
    "    # Run sampler if train set is not empty (applies to DEBUG=False undersampled case too)\n",
    "    if not df_train_set.empty:\n",
    "        target_counts = df_train_set['target'].value_counts().sort_index()\n",
    "        target_counts = target_counts.replace(0, 1e-9)\n",
    "        num_samples = len(df_train_set)\n",
    "        num_classes = len(target_counts)\n",
    "\n",
    "        if num_classes > 0 and num_samples > 0:\n",
    "            class_weights_map = (num_samples / (num_classes * target_counts))\n",
    "            sample_weights = torch.from_numpy(df_train_set['target'].map(class_weights_map).values).double()\n",
    "            if (sample_weights <= 0).any():\n",
    "                print(\"Warning: Clamping non-positive sample weights.\")\n",
    "                sample_weights = torch.clamp(sample_weights, min=1e-9)\n",
    "\n",
    "            # Ensure num_samples for sampler is reasonable, especially for small debug sets\n",
    "            sampler_num_samples = num_samples # Draw 'num_samples' per epoch by default\n",
    "            if DEBUG and num_samples < batch_size * 2: # Heuristic for very small debug sets\n",
    "                 sampler_num_samples = max(num_samples, batch_size) # Ensure at least one batch is drawn\n",
    "                 print(f\" Adjusting sampler num_samples to {sampler_num_samples} for small DEBUG set.\")\n",
    "\n",
    "            train_sampler = WeightedRandomSampler(\n",
    "                weights=sample_weights,\n",
    "                num_samples=sampler_num_samples,\n",
    "                replacement=True\n",
    "            )\n",
    "            print(f\"WeightedRandomSampler Enabled (Classes: {num_classes}, Samples Drawn: {sampler_num_samples})\")\n",
    "        else:\n",
    "            print(\"WeightedRandomSampler Disabled: Not enough classes or samples in train_set.\")\n",
    "    else:\n",
    "        print(f\"WeightedRandomSampler Disabled (Train set empty)\")\n",
    "\n",
    "\n",
    "    # --- DataLoaders ---\n",
    "    train_loader = DataLoader(\n",
    "        dataset_train, batch_size=batch_size, sampler=train_sampler,\n",
    "        shuffle=(train_sampler is None and not df_train_set.empty),\n",
    "        num_workers=num_workers, pin_memory=True,\n",
    "        drop_last= (not df_train_set.empty)\n",
    "    ) if not df_train_set.empty else None\n",
    "\n",
    "    valid_loader = DataLoader(\n",
    "        dataset_valid, batch_size=batch_size * 2, shuffle=False,\n",
    "        num_workers=num_workers, pin_memory=True\n",
    "    ) if not df_valid_set.empty else None\n",
    "\n",
    "    print(f\"Loaders Ready:\")\n",
    "    print(f\"  Train Loader: {'Created' if train_loader else 'Skipped'}\" + (f\" ({len(train_loader)} batches)\" if train_loader else \"\"))\n",
    "    print(f\"  Valid Loader: {'Created' if valid_loader else 'Skipped'}\" + (f\" ({len(valid_loader)} batches)\" if valid_loader else \"\"))\n",
    "\n",
    "\n",
    "\n",
    "    # --- 3. Creating Model ---\n",
    "    print(\"\\n--- 3. Creating Model ---\")\n",
    "    model=None\n",
    "    try:\n",
    "        if model_type == 'hybrid_swin':\n",
    "            model = HybridSwinModel(\n",
    "                cnn_backbone_name=cnn_backbone_name,\n",
    "                transformer_backbone_name=transformer_backbone_name,\n",
    "                out_dim=out_dim,                 \n",
    "                n_meta_features=n_meta_features, \n",
    "                pretrained=True,\n",
    "                image_size=image_size,\n",
    "                regularization_factor=regularization_factor\n",
    "            )\n",
    "        # --- ADD THIS NEW CONDITION ---\n",
    "        elif model_type == 'swin_only':\n",
    "            print(\">>> Running in Swin Transformer ONLY mode <<<\")\n",
    "            model = HybridSwinModel(\n",
    "                cnn_backbone_name=None, # <<< PASS NONE HERE TO DISABLE CNN\n",
    "                transformer_backbone_name=transformer_backbone_name,\n",
    "                out_dim=out_dim,                 \n",
    "                n_meta_features=n_meta_features, \n",
    "                pretrained=True,\n",
    "                image_size=image_size,\n",
    "                regularization_factor=regularization_factor\n",
    "            )\n",
    "            \n",
    "        elif model_type == 'efficientnetv2':\n",
    "            model = EffNetV2Model(\n",
    "                backbone_name=cnn_backbone_name,\n",
    "                out_dim=out_dim,                 \n",
    "                n_meta_features=n_meta_features,\n",
    "                pretrained=True,\n",
    "                regularization_factor=regularization_factor\n",
    "            )\n",
    "        else:\n",
    "            raise ValueError(f\"Unknown model_type: {model_type}\")\n",
    "\n",
    "    except Exception as model_init_e:\n",
    "        print(f\"!!! ERROR initializing model: {model_init_e}\")\n",
    "        traceback.print_exc() # Print full traceback for model init errors\n",
    "        raise model_init_e\n",
    "\n",
    "    if model is None: raise RuntimeError(\"Model init failed silently.\")\n",
    "    # --- >>> ADD DROPOUT LOGGING AFTER MODEL CREATION <<< ---\n",
    "    if wandb_run and 'model_ref' in locals() and model_ref is not None:\n",
    "        try:\n",
    "            dropout_config = {}\n",
    "            # Log classifier dropout (exists in both models)\n",
    "            if hasattr(model_ref, 'initial_classifier_dropout'):\n",
    "                 dropout_config[\"initial_dropout_classifier\"] = model_ref.initial_classifier_dropout\n",
    "            # Log fusion dropout (only in hybrid)\n",
    "            if hasattr(model_ref, 'initial_fusion_dropout'):\n",
    "                 dropout_config[\"initial_dropout_fusion\"] = model_ref.initial_fusion_dropout\n",
    "            # Log image dropout if implemented and used\n",
    "            # if hasattr(model_ref, 'initial_image_dropout'):\n",
    "            #      dropout_config[\"initial_dropout_image\"] = model_ref.initial_image_dropout\n",
    "\n",
    "            if dropout_config: # Only update if we found dropout values\n",
    "                wandb_run.config.update(dropout_config, allow_val_change=True)\n",
    "                print(f\"Logged effective initial dropout rates to WandB: {dropout_config}\")\n",
    "        except Exception as e: print(f\"Wandb config update failed (dropout): {e}\")\n",
    "  \n",
    "    # Determine base model reference and check for DataParallel\n",
    "    model = model.to(device)\n",
    "    model_ref = model \n",
    "    is_parallel = False\n",
    "    if torch.cuda.device_count() > 1:\n",
    "        print(f\"Using {torch.cuda.device_count()} GPUs. Wrapping model with DataParallel.\")\n",
    "        model = nn.DataParallel(model)\n",
    "        model_ref = model.module \n",
    "        is_parallel = True\n",
    "    print(f\"Model Instantiated ({type(model_ref).__name__}). Parallel: {is_parallel}\")\n",
    "  \n",
    "    initial_freeze_block=2; print(f\"Applying initial freeze up to CNN block {initial_freeze_block}...\")\n",
    "    partial_freeze_enet(model, freeze_until_block=initial_freeze_block)\n",
    "    trainable_params=sum(p.numel() for p in model.parameters() if p.requires_grad); print(f\"Initially Trainable: {trainable_params:,}\")\n",
    "    print(f\"Model check: Has meta? {'Yes' if hasattr(model_ref,'meta_attention') else 'No'}, n_meta={getattr(model_ref,'n_meta_features','N/A')}\")\n",
    "\n",
    "    # --- 4. Loss, Optimizer, Scheduler ---\n",
    "    print(\"\\n--- 4. Loss, Optimizer, Scheduler ---\")\n",
    "    \n",
    "    if not df_train_set.empty:\n",
    "        counts=df_train_set['target'].value_counts().reindex(range(out_dim),fill_value=1e-6)\n",
    "        w_raw=torch.FloatTensor([1.0/c for c in counts]).to(device); class_weights=w_raw/w_raw.sum()*out_dim\n",
    "    else: class_weights = torch.ones(out_dim, device=device)\n",
    "    criterion_multi = nn.CrossEntropyLoss(weight=class_weights, label_smoothing=0.1).to(device)\n",
    "    lambda_binary = 0.5 \n",
    "\n",
    "\n",
    "    base_lr = init_lr\n",
    "    initial_lr = base_lr * 0.01 \n",
    "    param_groups = []\n",
    "\n",
    "    print(\"Defining initial optimizer groups...\")\n",
    "    initially_optimized_params = 0\n",
    "    head_params = []\n",
    "    backbone_params = [] \n",
    "    head_param_ids = set()\n",
    "    for part_name in ['myfc', 'classifier', 'meta_attention', 'meta_fc', 'fusion_layer']:\n",
    "        module = getattr(model_ref, part_name, None)\n",
    "        if module and not isinstance(module, nn.Identity):\n",
    "             head_param_ids.update(id(p) for p in module.parameters())\n",
    "    # Assign parameters to groups based on requires_grad and location\n",
    "    print(\" Iterating through model parameters for initial optimizer...\")\n",
    "    for name, param in model.named_parameters(): # Iterate through potentially wrapped model\n",
    "        if param.requires_grad: # Check if it's trainable after partial_freeze_enet\n",
    "            if id(param) in head_param_ids:\n",
    "                 head_params.append(param)\n",
    "            else: # Assume it's part of a backbone if requires_grad and not in head\n",
    "                 backbone_params.append(param)\n",
    "\n",
    "    # Add groups if they have parameters\n",
    "    if backbone_params:\n",
    "        param_groups.append({'params': backbone_params, 'lr': initial_lr, 'weight_decay': 0.01}) # Low WD for backbone parts\n",
    "        count = sum(p.numel() for p in backbone_params)\n",
    "        initially_optimized_params += count\n",
    "        print(f\"  Added initial optimizer group for 'Trainable Backbone Parts' ({len(backbone_params)} params, {count:,} elements) LR={initial_lr:.1e}, WD=0.01\")\n",
    "\n",
    "    if head_params:\n",
    "        # Use a slightly higher LR for the head initially\n",
    "        head_initial_lr = initial_lr * 5\n",
    "        param_groups.append({'params': head_params, 'lr': head_initial_lr, 'weight_decay': 0.05}) # Higher WD for head parts\n",
    "        count = sum(p.numel() for p in head_params)\n",
    "        initially_optimized_params += count\n",
    "        print(f\"  Added initial optimizer group for 'Head Parts' ({len(head_params)} params, {count:,} elements) LR={head_initial_lr:.1e}, WD=0.05\")\n",
    "\n",
    "    if not param_groups:\n",
    "        # This should only happen if partial_freeze_enet made nothing trainable\n",
    "        raise RuntimeError(\"No parameters requiring grad found for initial optimizer! Check partial_freeze_enet.\")\n",
    "\n",
    "    optimizer = optim.AdamW(param_groups, eps=1e-7)\n",
    "    print(f\"Initial optimizer created with {len(param_groups)} groups.\")\n",
    "    print(f\"Total parameters in initial optimizer: {initially_optimized_params:,}\") \n",
    "    scaler = GradScaler() if use_amp else None\n",
    "\n",
    "    warmup_multiplier = 10\n",
    "    sched_cosine = CosineAnnealingLR(optimizer, T_max=max(1, cosine_duration), eta_min=base_lr * 0.001)\n",
    "    sched_warmup = GradualWarmupSchedulerV2(optimizer, multiplier=warmup_multiplier, total_epoch=max(1, warmup_duration), after_scheduler=sched_cosine)\n",
    "    sched_plateau = ReduceLROnPlateau(optimizer, mode='max', factor=0.5, patience=5, verbose=True, min_lr=1e-7) \n",
    "    print(\"Schedulers initialized.\")\n",
    "    es_checkpoint_path = f'{kernel_type}_best.pth'\n",
    "    early_stopping = EarlyStopping(\n",
    "        patience=20, mode='max', delta=0.003, relative_delta=True,\n",
    "        warm_up=freeze_duration, verbose=True, checkpoint_path=es_checkpoint_path,\n",
    "        score_weights={'binary_auc': 0.5, 'binary_recall': 0.2, 'multiclass_auc': 0.2, 'val_loss': 0.1} \n",
    "    )\n",
    "    print(f\"Early stopping active after epoch {freeze_duration}, checkpoint: {es_checkpoint_path}\")\n",
    "\n",
    "\n",
    "    # --- 5. WandB Setup ---\n",
    "    # Watch model - log gradients and parameters (optional, can be verbose)\n",
    "    if wandb and wandb.run:\n",
    "        try:\n",
    "            # Exclude embedding layers if they cause issues\n",
    "            wandb.watch(model, log='all', log_freq=max(100, len(train_loader)//2), idx=0, log_graph=False)\n",
    "            print(\"WandB watching model.\")\n",
    "        except Exception as e:\n",
    "            print(f\"WandB watch failed: {e}\")\n",
    "\n",
    "\n",
    "    # --- 6. Training Loop ---\n",
    "    print(f\"\\n--- 6. Starting Training Loop (Target: {n_epochs} Epochs) ---\")\n",
    "    # ... (Loop initializations) ...\n",
    "    train_losses, val_losses = [], []; best_model_state, best_metrics = None, None; best_PROBS, best_TARGETS = None, None; best_epoch_num=0; best_score=float('-inf'); total_start_time=time.time(); main_cosine_scheduler=None; last_epoch_completed=0; early_stopping.reset()\n",
    "    main_scheduler = None # This will hold the active scheduler (Warmup->Cosine or just Cosine)\n",
    "    time_limit_reached = False # Flag to indicate why the loop stopped\n",
    "    try:\n",
    "        for epoch in range(1, n_epochs + 1):\n",
    "            last_epoch_completed = epoch; epoch_start_time = time.time()\n",
    "            print(f\"\\n===== Epoch {epoch}/{n_epochs} =====\") # Removed profile from print\n",
    "            # <<< --- START RUNTIME CHECK --- >>>\n",
    "            current_time = time.time()\n",
    "            elapsed_seconds = current_time - NOTEBOOK_START_TIME\n",
    "            if elapsed_seconds >= MAX_RUNTIME_SECONDS:\n",
    "                print(f\"\\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\")\n",
    "                print(f\"!!! RUNTIME LIMIT REACHED ({elapsed_seconds:.0f}s / {MAX_RUNTIME_SECONDS}s) !!!\")\n",
    "                print(f\"!!! Stopping training loop before starting Epoch {epoch}.   !!!\")\n",
    "                print(f\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\\n\")\n",
    "                time_limit_reached = True\n",
    "                break # Exit the training loop\n",
    "            else:\n",
    "                print(f\"Runtime Check: {elapsed_seconds/3600:.2f} hours elapsed (Limit: {MAX_RUNTIME_SECONDS/3600:.2f} hours)\")\n",
    "            # <<< --- END RUNTIME CHECK --- >>>\n",
    "            # Set dynamic dropout (uses regularization_factor)\n",
    "            if hasattr(model_ref, 'set_epoch'): model_ref.set_epoch(epoch)\n",
    "\n",
    "            # --- Progressive Layer Unfreezing (Use FIXED schedule points) ---\n",
    "            optimizer, optimizer_changed = progressive_layer_unfreezing(\n",
    "                model, optimizer, epoch, initial_freeze_block,\n",
    "                unfreeze_start_epoch=unfreeze_start_epoch,\n",
    "                full_unfreeze_epoch=full_unfreeze_epoch,\n",
    "                total_epochs=n_epochs, base_lr=base_lr,\n",
    "                cnn_backbone_name=cnn_backbone_name,\n",
    "                lr_adaptation_factor=lr_adaptation_factor,\n",
    "                llrd_decay_rate=0.90,\n",
    "                regularization_factor=regularization_factor                \n",
    "                )\n",
    "\n",
    "# --- >>> REVISED Scheduler Stepping Logic <<< ---\n",
    "\n",
    "            # Phase 1: Initial Freeze (Epochs 1 to freeze_duration)\n",
    "            if epoch <= freeze_duration:\n",
    "                print(\"Scheduler Phase: Initial Freeze (No Step)\")\n",
    "                # Optimizer LR is low (initial_lr), no scheduler step needed\n",
    "\n",
    "            # Phase 2: Initial Warmup (Epochs freeze_duration + 1 to freeze_duration + warmup_duration)\n",
    "            elif epoch == freeze_duration + 1: # First epoch of initial warmup\n",
    "                 print(f\"Scheduler Phase: Starting Initial Warmup (Epochs {epoch} to {freeze_duration + warmup_duration})\")\n",
    "                 # Initialize the first main_scheduler (WarmupV2 -> Cosine)\n",
    "                 sched_cosine_init = CosineAnnealingLR(optimizer, T_max=max(1, cosine_duration), eta_min=base_lr * 0.001)\n",
    "                 sched_warmup_init = GradualWarmupSchedulerV2(optimizer, multiplier=warmup_multiplier, total_epoch=max(1, warmup_duration), after_scheduler=sched_cosine_init)\n",
    "                 main_scheduler = sched_warmup_init\n",
    "                 main_scheduler.step() # Step for the current epoch (epoch 1 of warmup)\n",
    "            elif epoch <= freeze_duration + warmup_duration:\n",
    "                 if main_scheduler: main_scheduler.step() # Continue stepping initial warmup/cosine\n",
    "                 else: print(\"Error: Initial scheduler missing during warmup phase!\")\n",
    "\n",
    "            # Phase 3: Post-Warmup / Post-Unfreeze Reset\n",
    "            else: # epoch > freeze_duration + warmup_duration\n",
    "                if optimizer_changed: # This happens *exactly* at full_unfreeze_epoch\n",
    "                     print(\"Optimizer Changed! Resetting FULL scheduler sequence.\")\n",
    "                     remaining_epochs_total = n_epochs - epoch + 1\n",
    "                     # Define a *new, shorter* warmup + cosine for the remaining epochs\n",
    "                     # Example: 5 epochs warmup, rest cosine. Adjust as needed.\n",
    "                     new_warmup_epochs = min(5, max(1, remaining_epochs_total // 4))\n",
    "                     new_cosine_epochs = remaining_epochs_total - new_warmup_epochs\n",
    "                     print(f\"  New schedule phase: Warmup={new_warmup_epochs}, Cosine={new_cosine_epochs}\")\n",
    "\n",
    "                     if new_warmup_epochs + new_cosine_epochs != remaining_epochs_total:\n",
    "                          print(\"  Warning: New schedule epoch calculation mismatch.\")\n",
    "                          new_cosine_epochs = max(0, remaining_epochs_total - new_warmup_epochs) # Ensure non-negative\n",
    "\n",
    "                     # Create NEW schedulers based on the *new* optimizer state\n",
    "                     # Use the LRs set by progressive_layer_unfreezing\n",
    "                     sched_cosine_reset = CosineAnnealingLR(optimizer, T_max=max(1, new_cosine_epochs), eta_min=base_lr * 0.0001) # Lower final LR maybe?\n",
    "                     sched_warmup_reset = GradualWarmupSchedulerV2(optimizer, multiplier=warmup_multiplier, total_epoch=max(1, new_warmup_epochs), after_scheduler=sched_cosine_reset)\n",
    "                     main_scheduler = sched_warmup_reset # OVERWRITE main_scheduler\n",
    "\n",
    "                     # Reset Plateau scheduler with the new optimizer\n",
    "                     sched_plateau = ReduceLROnPlateau(optimizer, mode='max', factor=0.5, patience=5, verbose=True, min_lr=1e-7); sched_plateau._reset()\n",
    "                     print(\"  Plateau scheduler reset.\")\n",
    "\n",
    "                     main_scheduler.step() # Step the *new* scheduler for the current epoch\n",
    "\n",
    "                elif main_scheduler: # Optimizer didn't change (already past full_unfreeze_epoch)\n",
    "                     print(\"Scheduler Phase: Stepping Existing Post-Warmup Scheduler\")\n",
    "                     main_scheduler.step() # Step the active scheduler (could be warmup_reset or cosine_reset)\n",
    "                else:\n",
    "                     # This case should ideally not be reached if logic is correct\n",
    "                     print(\"Error: Main scheduler missing in post-warmup/post-reset phase!\")\n",
    "                     # Fallback: Create a simple cosine scheduler for remaining epochs\n",
    "                     remaining_at_fallback = n_epochs - epoch + 1\n",
    "                     main_scheduler = CosineAnnealingLR(optimizer, T_max=max(1, remaining_at_fallback), eta_min=base_lr * 0.001)\n",
    "                     main_scheduler.step()\n",
    "\n",
    "                # --- >>> END REVISED Scheduler Stepping Logic <<< ---\n",
    "            # Log LR\n",
    "            current_lr = optimizer.param_groups[0]['lr']\n",
    "            print(f\"Current LR: {current_lr:.2e}\")\n",
    "            if wandb and wandb.run: wandb.log({\"learning_rate\": current_lr}, step=epoch)\n",
    "\n",
    "            # --- Train ---\n",
    "            if len(train_loader) > 0:\n",
    "                train_loss = train_epoch(\n",
    "                    model, train_loader, optimizer, wandb, epoch, scaler=scaler,\n",
    "                    accum_steps=accum_steps, criterion_multi=criterion_multi,\n",
    "                    mel_idx=mel_idx, lambda_binary=lambda_binary, device=device\n",
    "                )\n",
    "                if train_loss is not None: train_losses.append(train_loss)\n",
    "            else:\n",
    "                print(\"Skipping train epoch: train_loader is empty.\")\n",
    "                train_loss = None # Signify no training loss\n",
    "\n",
    "            # --- Validate ---\n",
    "            if len(valid_loader) > 0:\n",
    "                val_results = val_epoch(\n",
    "                    model, valid_loader, wandb, epoch, n_test=1, # n_test=1 assumes no TTA\n",
    "                    criterion_multi=criterion_multi, mel_idx=mel_idx,\n",
    "                    lambda_binary=lambda_binary, device=device, use_amp=use_amp\n",
    "                )\n",
    "                # Unpack all 15 results\n",
    "                (val_loss, bin_auc, mc_auc, PROBS, TARGETS, bin_acc, bin_prec,\n",
    "                 bin_rec, bin_f1, bin_spec, mc_acc, mc_f1, mc_cm, bin_cm, temp, roc) = val_results\n",
    "                val_losses.append(val_loss)\n",
    "\n",
    "                # --- Early Stopping & Best Model Check ---\n",
    "                # Normalize loss for ES (higher score is better)\n",
    "                normalized_val_loss = max(0, 1.0 - min(val_loss / 5.0, 1.0)) # Adjust divisor if loss range differs\n",
    "                metrics_for_es = {\n",
    "                    'binary_auc': bin_auc if not np.isnan(bin_auc) else 0.0,\n",
    "                    'val_loss': normalized_val_loss,\n",
    "                    'binary_recall': bin_rec if not np.isnan(bin_rec) else 0.0,\n",
    "                    'multiclass_auc': mc_auc if not np.isnan(mc_auc) else 0.0,\n",
    "                }\n",
    "                early_stopping(metrics_for_es, model, epoch) # Check ES\n",
    "\n",
    "                composite_score = sum(\n",
    "                    early_stopping.score_weights.get(m, 0) * metrics_for_es.get(m, 0)\n",
    "                    for m in early_stopping.score_weights\n",
    "                )\n",
    "\n",
    "                # Log comprehensive validation metrics\n",
    "                if wandb and wandb.run:\n",
    "                    wandb.log({\n",
    "                        \"composite_score\": composite_score, \"val_loss_raw\": val_loss,\n",
    "                        **metrics_for_es, # Include metrics used for ES score\n",
    "                        'binary_f1': bin_f1, 'binary_acc': bin_acc, 'binary_precision': bin_prec,\n",
    "                        'binary_specificity': bin_spec, 'multiclass_acc': mc_acc, 'multiclass_f1': mc_f1,\n",
    "                        'temperature': temp\n",
    "                    }, step=epoch)\n",
    "\n",
    "                # Save best model state if score improved\n",
    "                if composite_score > best_score:\n",
    "                    best_score = composite_score\n",
    "                    best_model_state = model_ref.state_dict() # Get state from base model\n",
    "                    best_epoch_num = epoch\n",
    "                    best_metrics = { # Store detailed metrics for the best epoch\n",
    "                        'epoch': epoch, 'composite_score': composite_score, 'val_loss_raw': val_loss,\n",
    "                        'binary_auc': bin_auc, 'multiclass_auc': mc_auc, 'binary_recall': bin_rec,\n",
    "                        'binary_f1': bin_f1, 'binary_acc': bin_acc, 'binary_precision': bin_prec,\n",
    "                        'binary_specificity': bin_spec, 'multiclass_acc': mc_acc, 'multiclass_f1': mc_f1,\n",
    "                        'temperature': temp, 'binary_cm': bin_cm, 'multiclass_cm': mc_cm\n",
    "                    }\n",
    "                    best_PROBS = PROBS\n",
    "                    best_TARGETS = TARGETS\n",
    "                    print(f\"*** New Best Score: {best_score:.6f} at Epoch {epoch} ***\")\n",
    "                    # Save temporary best model (overwritten each time)\n",
    "                    torch.save({'epoch': best_epoch_num, 'model_state_dict': best_model_state},\n",
    "                               early_stopping.checkpoint_path) # Use ES path\n",
    "\n",
    "                # --- Plateau Scheduler Step ---\n",
    "                # Step based on composite score during cosine phase\n",
    "                if epoch > freeze_duration + warmup_duration:\n",
    "                    if hasattr(sched_plateau, 'optimizer') and sched_plateau.optimizer is optimizer:\n",
    "                        sched_plateau.step(composite_score)\n",
    "                    elif optimizer_changed:\n",
    "                        pass # Optimizer was reset, plateau scheduler already updated\n",
    "                    else: # Fallback if optimizer reference somehow differs\n",
    "                        print(\"Warn: Recreating Plateau scheduler due to optimizer mismatch.\")\n",
    "                        sched_plateau=ReduceLROnPlateau(optimizer,mode='max',factor=0.5,patience=5,verbose=True,min_lr=1e-7)\n",
    "                        sched_plateau._reset()\n",
    "                        sched_plateau.step(composite_score)\n",
    "\n",
    "            else: # No validation data\n",
    "                print(\"Skipping validation epoch: valid_loader is empty.\")\n",
    "                # Cannot check early stopping or update best model\n",
    "\n",
    "            # --- Check Early Stopping Trigger ---\n",
    "            if early_stopping.early_stop:\n",
    "                print(f\"EARLY STOPPING triggered after epoch {epoch}.\")\n",
    "                break\n",
    "\n",
    "            print(f\"Epoch {epoch} completed in {time.time() - epoch_start_time:.2f}s.\")\n",
    "            torch.cuda.empty_cache() # Clear cache at end of epoch\n",
    "        # --- End MAIN TRAINING LOOP ---\n",
    "\n",
    "    except KeyboardInterrupt:\n",
    "        print(\"\\nTraining interrupted by user.\")\n",
    "    except Exception as e:\n",
    "        print(f\"\\nAn error occurred during training loop: {e}\")\n",
    "        logging.error(traceback.format_exc()) # Log detailed error\n",
    "    finally:\n",
    "        # --- Final Operations ---\n",
    "        total_time = time.time() - total_start_time\n",
    "        loop_stop_reason = \"Runtime Limit\" if time_limit_reached else (\"Early Stopping\" if early_stopping.early_stop else \"Completed Epochs\")\n",
    "        print(f\"\\n===== Training Finished / Stopped (Epoch {last_epoch_completed}/{n_epochs}, Reason: {loop_stop_reason}) =====\") # <--- Modified print\n",
    "        print(f\"Total time: {total_time:.2f}s\")\n",
    "\n",
    "        # Reload best model state if early stopping happened and we have a best epoch recorded\n",
    "        if early_stopping.early_stop and best_epoch_num > 0:\n",
    "            best_model_path_es = early_stopping.checkpoint_path\n",
    "            if os.path.exists(best_model_path_es):\n",
    "                print(f\"Reloading best model state from Early Stopping checkpoint (Epoch {best_epoch_num})...\")\n",
    "                try:\n",
    "                    checkpoint = torch.load(best_model_path_es)\n",
    "                    # Load into the base model structure first\n",
    "                    temp_model = model_ref.__class__( # Re-instantiate base model\n",
    "                         backbone_name=cnn_backbone_name, # Or use appropriate args for hybrid\n",
    "                         # Add other necessary args based on model type...\n",
    "                         transformer_backbone_name=transformer_backbone_name if model_type=='hybrid_swin' else None,\n",
    "                         out_dim=out_dim, n_meta_features=n_meta_features, image_size=image_size,\n",
    "                         pretrained=False # Don't need pretrained weights here\n",
    "                    )\n",
    "                    temp_model.load_state_dict(checkpoint['model_state_dict'])\n",
    "                    best_model_state = temp_model.state_dict() # Get the clean state_dict\n",
    "                    print(\" Successfully reloaded best model state.\")\n",
    "                except Exception as load_err:\n",
    "                    print(f\" Warning: Failed to reload best model state from {best_model_path_es}. Error: {load_err}\")\n",
    "                    # Keep the state from before loop end if loading fails\n",
    "            else:\n",
    "                print(f\"Warning: Early stopping triggered, but checkpoint file not found at {best_model_path_es}.\")\n",
    "\n",
    "\n",
    "        # Prepare final metrics dictionary\n",
    "        final_log_metrics = {}\n",
    "        if best_metrics:\n",
    "            print(f\"Using metrics from Best Epoch: {best_epoch_num}\")\n",
    "            final_log_metrics = best_metrics.copy() # Use copy\n",
    "        elif last_epoch_completed > 0 and 'val_results' in locals():\n",
    "            print(f\"WARNING: No best metrics saved. Using metrics from last completed validation epoch ({last_epoch_completed}).\")\n",
    "             # Reconstruct from last val_results if needed (simplified example)\n",
    "            final_log_metrics = {'epoch': last_epoch_completed,\n",
    "                                'val_loss_raw': val_loss, 'binary_auc': bin_auc, 'multiclass_auc': mc_auc}\n",
    "            if best_model_state is None and 'model' in locals(): # Use last model state if no best saved\n",
    "                 best_model_state = model_ref.state_dict()\n",
    "            best_epoch_num = last_epoch_completed # Mark as last epoch if using last metrics\n",
    "        else:\n",
    "            print(\"WARNING: No validation results available to log final metrics.\")\n",
    "\n",
    "        # Add training summary stats\n",
    "        final_log_metrics['total_training_time_sec'] = round(total_time, 2)\n",
    "        final_log_metrics['last_epoch_completed'] = last_epoch_completed\n",
    "        final_log_metrics['best_epoch_logged'] = best_epoch_num # Epoch whose metrics are being logged\n",
    "\n",
    "        # Log final summary to WandB\n",
    "        if wandb and wandb.run:\n",
    "             summary = {f\"final_{k}\": v for k, v in final_log_metrics.items() if isinstance(v, (int, float, bool, str))}\n",
    "             print(\"\\nFinal Summary Metrics:\")\n",
    "             for k, v in sorted(summary.items()): print(f\"  - {k}: {v}\")\n",
    "             try: wandb.summary.update(summary)\n",
    "             except Exception as wb_err: print(f\"Warning: Failed to update WandB summary: {wb_err}\")\n",
    "\n",
    "        # --- Save Final Artifacts ---\n",
    "        if best_model_state is not None and best_epoch_num > 0:\n",
    "            # Use the explicitly saved ES checkpoint path as the final path now\n",
    "            final_model_path = early_stopping.checkpoint_path\n",
    "            # Re-save with additional info if needed, or just use the ES checkpoint\n",
    "            print(f\"\\nFinal Best Model saved at: {final_model_path}\")\n",
    "            # Optionally save metrics dict separately or add to checkpoint\n",
    "            # torch.save({ ... 'final_metrics': final_log_metrics ... }, final_model_path) # Example if re-saving\n",
    "\n",
    "            # Log Model Artifact to WandB\n",
    "            if wandb and wandb.run:\n",
    "                model_artifact_name = f\"model-{wandb.run.id}-final\"\n",
    "                description=f\"Final model ({kernel_type}, Best E{best_epoch_num})\"\n",
    "                try:\n",
    "                    model_artifact = wandb.Artifact(model_artifact_name, type=\"model\",\n",
    "                                                    description=description, metadata=summary)\n",
    "                    if os.path.exists(final_model_path):\n",
    "                         model_artifact.add_file(final_model_path)\n",
    "                         wandb.log_artifact(model_artifact, aliases=[\"best\", f\"E{best_epoch_num}\"])\n",
    "                         print(\"Logged FINAL model artifact to WandB.\")\n",
    "                    else: print(f\"Warning: Final model file {final_model_path} not found for artifact logging.\")\n",
    "                except Exception as art_err: print(f\"Warning: Failed logging model artifact: {art_err}\")\n",
    "\n",
    "            # and if wandb run is active\n",
    "            if best_PROBS is not None and best_TARGETS is not None and \\\n",
    "               wandb is not None and wandb.run is not None:\n",
    "                preds_artifact_name = f\"preds-{wandb.run.id}-final\"\n",
    "                preds_desc = f\"Val preds/tgts (Best E{best_epoch_num})\"\n",
    "                probs_fn = f\"best_probs_E{best_epoch_num}_{wandb.run.id}.npy\"\n",
    "                tgts_fn = f\"best_tgts_E{best_epoch_num}_{wandb.run.id}.npy\"\n",
    "                valid_ids_fn = f\"best_valid_ids_E{best_epoch_num}_{wandb.run.id}.csv\"\n",
    "\n",
    "                try:\n",
    "                    probs_np = np.array(best_PROBS)\n",
    "                    tgts_np = np.array(best_TARGETS)\n",
    "                    if 'df_valid_set' in locals() and df_valid_set is not None and not df_valid_set.empty:\n",
    "                         valid_ids_df = df_valid_set[['image_name']].copy() \n",
    "                         valid_ids_df.to_csv(valid_ids_fn, index=False)\n",
    "                         print(f\" Saved validation IDs ({len(valid_ids_df)}) to {valid_ids_fn}\")\n",
    "                    else:\n",
    "                         print(\"Warning: Could not save validation IDs (df_valid_set unavailable or empty).\")\n",
    "                         valid_ids_fn = None \n",
    "\n",
    "                    np.save(probs_fn, probs_np); np.save(tgts_fn, tgts_np)\n",
    "                    print(f\" Saved best predictions ({probs_np.shape}) to {probs_fn}\")\n",
    "                    print(f\" Saved best targets ({tgts_np.shape}) to {tgts_fn}\")\n",
    "\n",
    "                    pred_artifact = wandb.Artifact(preds_artifact_name, type=\"val_predictions\", description=preds_desc)\n",
    "                    pred_artifact.add_file(probs_fn); pred_artifact.add_file(tgts_fn)\n",
    "\n",
    "                    if valid_ids_fn and os.path.exists(valid_ids_fn):\n",
    "                         pred_artifact.add_file(valid_ids_fn)\n",
    "                    wandb.log_artifact(pred_artifact, aliases=[\"best_preds\", f\"E{best_epoch_num}\"])\n",
    "                    print(\"Logged final predictions artifact (including validation IDs).\")\n",
    "\n",
    "                    # Clean up local files after logging\n",
    "                    try:\n",
    "                        os.remove(probs_fn); os.remove(tgts_fn)\n",
    "                        if valid_ids_fn and os.path.exists(valid_ids_fn): os.remove(valid_ids_fn)\n",
    "                    except OSError as e: print(f\" Warning: Failed to remove temporary prediction files: {e}\")\n",
    "\n",
    "                except Exception as e: print(f\"Error saving/logging prediction artifacts: {e}\")\n",
    "        else:\n",
    "            print(\"\\nNo best model state recorded or best epoch is 0, skipping final artifact saving.\")\n",
    "\n",
    "        # Log Final CM Tables from best_metrics if available\n",
    "        if best_metrics and wandb and wandb.run:\n",
    "            bin_cm=best_metrics.get('bin_cm',[]); multi_cm=best_metrics.get('mc_cm',[])\n",
    "            cls_nms=[k for k,v in sorted(globals().get('diagnosis2idx',{}).items(),key=lambda i:i[1])] or [str(i) for i in range(globals().get('out_dim',0))]\n",
    "            try:\n",
    "                 if bin_cm: wandb.log({f\"binary_cm_table_P\": wandb.Table(columns=['Pred Non-Mel','Pred Mel'],data=bin_cm)}, step=n_epochs)\n",
    "                 if multi_cm and len(multi_cm)==len(cls_nms): wandb.log({f\"multiclass_cm_table_P\": wandb.Table(columns=[f\"Pred {n}\" for n in cls_nms],data=multi_cm)}, step=n_epochs)\n",
    "            except Exception as e: print(f\"Warn: Failed log final CMs: {e}\")\n",
    "\n",
    "    # --- Function Return ---\n",
    "    print(\"--- Exiting Adaptive Training Run ---\")\n",
    "    # Return single factors AND the wandb_run object\n",
    "    return (model, best_model_state, final_log_metrics, train_losses, val_losses,\n",
    "            best_PROBS, best_TARGETS, df_valid_set, diagnosis2idx, best_epoch_num,\n",
    "            kernel_type, early_stopping, model_type, cnn_backbone_name, n_meta_features,\n",
    "            image_size, out_dim,\n",
    "            lr_adaptation_factor, regularization_factor,\n",
    "            wandb_run # <<< ADD wandb_run HERE\n",
    "           ) # 20 values returned now"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c619b923",
   "metadata": {
    "papermill": {
     "duration": 0.078608,
     "end_time": "2025-06-18T04:30:48.836559",
     "exception": false,
     "start_time": "2025-06-18T04:30:48.757951",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Main execution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "4840540a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-18T04:30:49.000594Z",
     "iopub.status.busy": "2025-06-18T04:30:49.000171Z",
     "iopub.status.idle": "2025-06-18T16:23:39.140416Z",
     "shell.execute_reply": "2025-06-18T16:23:39.139383Z"
    },
    "papermill": {
     "duration": 42770.21781,
     "end_time": "2025-06-18T16:23:39.141859",
     "exception": false,
     "start_time": "2025-06-18T04:30:48.924049",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Starting run: swin_only / efficientnet_v2_m\n",
      "--- Starting Plausible Training Run ---\n",
      "Model Type: swin_only, CNN: efficientnet_v2_m, TF: swin_base_patch4_window12_384.ms_in22k_ft_in1k\n",
      "Using Meta: True, Using External: True\n",
      "\n",
      "--- 1. Configuring Run Parameters ---\n",
      "Device: cuda:0\n",
      "GPUs available: 2\n",
      "Configuring BASE scaling factors based on CNN size ONLY for: type='swin_only', cnn='efficientnet_v2_m' (m), meta=True, external=True\n",
      "  NOTE: Multipliers for meta, external, hybrid are DISABLED for purity.\n",
      "  Base factors based on CNN size 'm': LR Factor=1.00, Reg Factor=1.00\n",
      "  ==> Final Factors (Based ONLY on CNN Size): LR Adapt Factor=1.0, Reg Factor=1.0\n",
      "Batch Config (m): BS=18, Accum=4 (Eff=72)\n",
      "Using Training Schedule: Freeze=6, Warmup=9, Cosine=15 (Total=30)\n",
      "Unfreezing Schedule Points (Dynamic): Start E7, Full E11\n",
      "Target Image Size: 384, Data Dir Size: 384\n",
      "Competition Data: ../input/jpeg-melanoma-384x384\n",
      "External Data: ../input/jpeg-isic2019-384x384\n",
      "Generated kernel_type: effnet_v2_m_384_ext_meta\n",
      "\n",
      "--- WandB Initialization ---\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.19.1\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in \u001b[35m\u001b[1m/kaggle/working/wandb/run-20250618_043049-k68oa6dc\u001b[0m\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: Run \u001b[1m`wandb offline`\u001b[0m to turn off syncing.\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33meffnet_v2_m_384_ext_meta_250618_1130\u001b[0m\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: ⭐️ View project at \u001b[34m\u001b[4mhttps://wandb.ai/arveda-ava86-universitas-gadjah-mada-library/SKRIPSI%20GACOR\u001b[0m\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: 🚀 View run at \u001b[34m\u001b[4mhttps://wandb.ai/arveda-ava86-universitas-gadjah-mada-library/SKRIPSI%20GACOR/runs/k68oa6dc\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WandB run initialized: effnet_v2_m_384_ext_meta_250618_1130 (ID: k68oa6dc)\n",
      "\n",
      "--- 2. Data Sampling & Splitting ---\n",
      "DEBUG CHECK: Type of split_random_state before sampling: <class 'int'>, Value: 42\n",
      "\n",
      "--- PRODUCTION MODE: Using full df_train (57964 instances) ---\n",
      "\n",
      "Splitting data (shape: (57964, 25)) with val ratio 0.2...\n",
      " Stratified split successful.\n",
      " Final Train set shape: (46371, 25), Final Validation set shape: (11593, 25)\n",
      " Final Train set target distribution:\n",
      "target\n",
      "0    0.014966\n",
      "1    0.057277\n",
      "2    0.048953\n",
      "3    0.004119\n",
      "4    0.010826\n",
      "5    0.004356\n",
      "6    0.087814\n",
      "7    0.311078\n",
      "8    0.460611\n",
      "Name: proportion, dtype: float64\n",
      " Final Valid set target distribution:\n",
      "target\n",
      "0    0.014923\n",
      "1    0.057276\n",
      "2    0.048909\n",
      "3    0.004140\n",
      "4    0.010869\n",
      "5    0.004399\n",
      "6    0.087812\n",
      "7    0.311050\n",
      "8    0.460623\n",
      "Name: proportion, dtype: float64\n",
      "\n",
      "Setting Augmentations & Creating DataLoaders...\n",
      "WeightedRandomSampler Enabled (Classes: 9, Samples Drawn: 46371)\n",
      "Loaders Ready:\n",
      "  Train Loader: Created (2576 batches)\n",
      "  Valid Loader: Created (323 batches)\n",
      "\n",
      "--- 3. Creating Model ---\n",
      ">>> Running in Swin Transformer ONLY mode <<<\n",
      "Instantiating Model (CNN: None, Transformer: swin_base_patch4_window12_384.ms_in22k_ft_in1k)...\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "bf062678187946f993ce63b541b96abb",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "model.safetensors:   0%|          | 0.00/365M [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " Loaded Transformer: swin_base_patch4_window12_384.ms_in22k_ft_in1k. Pretrained=True\n",
      " Swin features: 1024. Classifier removed.\n",
      "Initialized MetadataProcessor (MLP): Input=14 -> Hidden=256 -> Output=128\n",
      "  - Meta Pathway Enabled (14 -> 128)\n",
      "Using 2 GPUs. Wrapping model with DataParallel.\n",
      "Model Instantiated (HybridSwinModel). Parallel: True\n",
      "Applying initial freeze up to CNN block 2...\n",
      "Warning (partial_freeze_enet): CNN backbone not found. Skipping freeze.\n",
      "Initially Trainable: 87,447,681\n",
      "Model check: Has meta? No, n_meta=14\n",
      "\n",
      "--- 4. Loss, Optimizer, Scheduler ---\n",
      "Defining initial optimizer groups...\n",
      " Iterating through model parameters for initial optimizer...\n",
      "  Added initial optimizer group for 'Trainable Backbone Parts' (335 params, 86,916,088 elements) LR=1.0e-05, WD=0.01\n",
      "  Added initial optimizer group for 'Head Parts' (6 params, 531,593 elements) LR=5.0e-05, WD=0.05\n",
      "Initial optimizer created with 2 groups.\n",
      "Total parameters in initial optimizer: 87,447,681\n",
      "Schedulers initialized.\n",
      "Early stopping active after epoch 6, checkpoint: effnet_v2_m_384_ext_meta_best.pth\n",
      "WandB watching model.\n",
      "\n",
      "--- 6. Starting Training Loop (Target: 30 Epochs) ---\n",
      "\n",
      "===== Epoch 1/30 =====\n",
      "Runtime Check: 0.05 hours elapsed (Limit: 11.42 hours)\n",
      "Scheduler Phase: Initial Freeze (No Step)\n",
      "Current LR: 1.00e-05\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                        \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1 - Training Time: 1457.42s, Avg Loss: 1.33159, Acc: 32.57%, Resources: {'gpu_memory_allocated': 1060.40283203125, 'gpu_max_memory': 6711.76953125}\n",
      "Using temperature: 1.0000 for validation epoch 1\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1 Valid Aggregated: PROBS=(11593, 9), TARGETS=(11593,)\n",
      " Best F1 Threshold (PR): 0.1296, F1=0.4291\n",
      "Epoch 1 - Val Loss: 3.98215, Bin AUC: 0.7699, F1(T=0.13): 0.4248, MC AUC: 0.8354, MC Acc: 45.96%, MC F1: 0.1277, Val Time: 135.27s\n",
      "Epoch 1: Warm-up period, skipping ES.\n",
      "*** New Best Score: 0.655890 at Epoch 1 ***\n",
      "Epoch 1 completed in 1594.78s.\n",
      "\n",
      "===== Epoch 2/30 =====\n",
      "Runtime Check: 0.50 hours elapsed (Limit: 11.42 hours)\n",
      "Scheduler Phase: Initial Freeze (No Step)\n",
      "Current LR: 1.00e-05\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                        \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 2 - Training Time: 1459.06s, Avg Loss: 0.92151, Acc: 42.08%, Resources: {'gpu_memory_allocated': 1068.52783203125, 'gpu_max_memory': 6720.8525390625}\n",
      "Using temperature: 1.0000 for validation epoch 2\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 2 Valid Aggregated: PROBS=(11593, 9), TARGETS=(11593,)\n",
      " Best F1 Threshold (PR): 0.2445, F1=0.4732\n",
      "Epoch 2 - Val Loss: 3.81479, Bin AUC: 0.8201, F1(T=0.24): 0.4686, MC AUC: 0.8764, MC Acc: 55.62%, MC F1: 0.2250, Val Time: 132.60s\n",
      "Epoch 2: Warm-up period, skipping ES.\n",
      "*** New Best Score: 0.692510 at Epoch 2 ***\n",
      "Epoch 2 completed in 1593.75s.\n",
      "\n",
      "===== Epoch 3/30 =====\n",
      "Runtime Check: 0.94 hours elapsed (Limit: 11.42 hours)\n",
      "Scheduler Phase: Initial Freeze (No Step)\n",
      "Current LR: 1.00e-05\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                        \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 3 - Training Time: 1461.27s, Avg Loss: 0.83162, Acc: 47.35%, Resources: {'gpu_memory_allocated': 1068.52783203125, 'gpu_max_memory': 6720.8525390625}\n",
      "Using temperature: 1.0000 for validation epoch 3\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 3 Valid Aggregated: PROBS=(11593, 9), TARGETS=(11593,)\n",
      " Best F1 Threshold (PR): 0.2803, F1=0.5262\n",
      "Epoch 3 - Val Loss: 3.62130, Bin AUC: 0.8732, F1(T=0.28): 0.5231, MC AUC: 0.9025, MC Acc: 62.98%, MC F1: 0.3087, Val Time: 132.55s\n",
      "Epoch 3: Warm-up period, skipping ES.\n",
      "*** New Best Score: 0.742691 at Epoch 3 ***\n",
      "Epoch 3 completed in 1595.90s.\n",
      "\n",
      "===== Epoch 4/30 =====\n",
      "Runtime Check: 1.38 hours elapsed (Limit: 11.42 hours)\n",
      "Scheduler Phase: Initial Freeze (No Step)\n",
      "Current LR: 1.00e-05\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                        \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 4 - Training Time: 1457.70s, Avg Loss: 0.76048, Acc: 52.02%, Resources: {'gpu_memory_allocated': 1068.52783203125, 'gpu_max_memory': 6720.8525390625}\n",
      "Using temperature: 1.0000 for validation epoch 4\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 4 Valid Aggregated: PROBS=(11593, 9), TARGETS=(11593,)\n",
      " Best F1 Threshold (PR): 0.3353, F1=0.5376\n",
      "Epoch 4 - Val Loss: 3.57849, Bin AUC: 0.8688, F1(T=0.34): 0.5328, MC AUC: 0.9146, MC Acc: 66.28%, MC F1: 0.3600, Val Time: 134.05s\n",
      "Epoch 4: Warm-up period, skipping ES.\n",
      "Epoch 4 completed in 1592.92s.\n",
      "\n",
      "===== Epoch 5/30 =====\n",
      "Runtime Check: 1.83 hours elapsed (Limit: 11.42 hours)\n",
      "Scheduler Phase: Initial Freeze (No Step)\n",
      "Current LR: 1.00e-05\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                        \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 5 - Training Time: 1458.03s, Avg Loss: 0.72196, Acc: 54.58%, Resources: {'gpu_memory_allocated': 1068.52783203125, 'gpu_max_memory': 6720.8525390625}\n",
      "Using temperature: 1.0000 for validation epoch 5\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 5 Valid Aggregated: PROBS=(11593, 9), TARGETS=(11593,)\n",
      " Best F1 Threshold (PR): 0.2547, F1=0.5548\n",
      "Epoch 5 - Val Loss: 3.49035, Bin AUC: 0.8862, F1(T=0.25): 0.5496, MC AUC: 0.9204, MC Acc: 67.68%, MC F1: 0.3565, Val Time: 132.55s\n",
      "Epoch 5: Warm-up period, skipping ES.\n",
      "*** New Best Score: 0.763440 at Epoch 5 ***\n",
      "Epoch 5 completed in 1592.57s.\n",
      "\n",
      "===== Epoch 6/30 =====\n",
      "Runtime Check: 2.27 hours elapsed (Limit: 11.42 hours)\n",
      "Scheduler Phase: Initial Freeze (No Step)\n",
      "Current LR: 1.00e-05\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                        \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 6 - Training Time: 1459.67s, Avg Loss: 0.69672, Acc: 56.96%, Resources: {'gpu_memory_allocated': 1068.52783203125, 'gpu_max_memory': 6720.8525390625}\n",
      "Calibrating: Iterating through validation loader...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Running LBFGS optimizer for temperature...\n",
      "Optimal temperature found: 1.0000\n",
      "Using temperature: 1.0000 for validation epoch 6\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 6 Valid Aggregated: PROBS=(11593, 9), TARGETS=(11593,)\n",
      " Best F1 Threshold (PR): 0.2955, F1=0.5847\n",
      "Epoch 6 - Val Loss: 3.45137, Bin AUC: 0.9039, F1(T=0.30): 0.5807, MC AUC: 0.9287, MC Acc: 72.12%, MC F1: 0.4094, Val Time: 413.71s\n",
      "Epoch 6: Warm-up period, skipping ES.\n",
      "*** New Best Score: 0.782415 at Epoch 6 ***\n",
      "Epoch 6 completed in 1875.36s.\n",
      "\n",
      "===== Epoch 7/30 =====\n",
      "Runtime Check: 2.79 hours elapsed (Limit: 11.42 hours)\n",
      "Scheduler Phase: Starting Initial Warmup (Epochs 7 to 15)\n",
      "Current LR: 2.00e-05\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                        \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 7 - Training Time: 1457.96s, Avg Loss: 0.67898, Acc: 59.05%, Resources: {'gpu_memory_allocated': 1068.52783203125, 'gpu_max_memory': 6720.8525390625}\n",
      "Using temperature: 1.0000 for validation epoch 7\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 7 Valid Aggregated: PROBS=(11593, 9), TARGETS=(11593,)\n",
      " Best F1 Threshold (PR): 0.3841, F1=0.5851\n",
      "Epoch 7 - Val Loss: 3.38977, Bin AUC: 0.9017, F1(T=0.38): 0.5823, MC AUC: 0.9371, MC Acc: 73.34%, MC F1: 0.4146, Val Time: 133.79s\n",
      "Initial best score: 0.717648 @ E7, model saved to effnet_v2_m_384_ext_meta_best.pth\n",
      "Epoch 7 completed in 1593.77s.\n",
      "\n",
      "===== Epoch 8/30 =====\n",
      "Runtime Check: 3.23 hours elapsed (Limit: 11.42 hours)\n",
      "Current LR: 3.00e-05\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                        \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 8 - Training Time: 1457.97s, Avg Loss: 0.66338, Acc: 61.09%, Resources: {'gpu_memory_allocated': 1068.52783203125, 'gpu_max_memory': 6720.8525390625}\n",
      "Using temperature: 1.0000 for validation epoch 8\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 8 Valid Aggregated: PROBS=(11593, 9), TARGETS=(11593,)\n",
      " Best F1 Threshold (PR): 0.4203, F1=0.5903\n",
      "Epoch 8 - Val Loss: 3.41433, Bin AUC: 0.9145, F1(T=0.42): 0.5876, MC AUC: 0.9357, MC Acc: 71.44%, MC F1: 0.4255, Val Time: 133.37s\n",
      "New best score: 0.727983 @ E8, model saved to effnet_v2_m_384_ext_meta_best.pth\n",
      "*** New Best Score: 0.791410 at Epoch 8 ***\n",
      "Epoch 8 completed in 1594.03s.\n",
      "\n",
      "===== Epoch 9/30 =====\n",
      "Runtime Check: 3.67 hours elapsed (Limit: 11.42 hours)\n",
      "Current LR: 4.00e-05\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                        \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 9 - Training Time: 1457.26s, Avg Loss: 0.65704, Acc: 62.56%, Resources: {'gpu_memory_allocated': 1068.52783203125, 'gpu_max_memory': 6720.8525390625}\n",
      "Using temperature: 1.0000 for validation epoch 9\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 9 Valid Aggregated: PROBS=(11593, 9), TARGETS=(11593,)\n",
      " Best F1 Threshold (PR): 0.4618, F1=0.5695\n",
      "Epoch 9 - Val Loss: 3.36028, Bin AUC: 0.8877, F1(T=0.46): 0.5616, MC AUC: 0.9471, MC Acc: 76.06%, MC F1: 0.4643, Val Time: 132.23s\n",
      "No improvement. Counter: 1/20\n",
      "Epoch 9 completed in 1590.69s.\n",
      "\n",
      "===== Epoch 10/30 =====\n",
      "Runtime Check: 4.12 hours elapsed (Limit: 11.42 hours)\n",
      "Current LR: 5.00e-05\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                         \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 10 - Training Time: 1457.07s, Avg Loss: 0.62994, Acc: 63.90%, Resources: {'gpu_memory_allocated': 1068.52783203125, 'gpu_max_memory': 6720.8525390625}\n",
      "Using temperature: 1.0000 for validation epoch 10\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                 \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 10 Valid Aggregated: PROBS=(11593, 9), TARGETS=(11593,)\n",
      " Best F1 Threshold (PR): 0.5228, F1=0.6375\n",
      "Epoch 10 - Val Loss: 3.26681, Bin AUC: 0.9246, F1(T=0.52): 0.6190, MC AUC: 0.9506, MC Acc: 76.92%, MC F1: 0.4791, Val Time: 132.62s\n",
      "New best score: 0.731710 @ E10, model saved to effnet_v2_m_384_ext_meta_best.pth\n",
      "*** New Best Score: 0.801037 at Epoch 10 ***\n",
      "Epoch 10 completed in 1592.39s.\n",
      "\n",
      "===== Epoch 11/30 =====\n",
      "Runtime Check: 4.56 hours elapsed (Limit: 11.42 hours)\n",
      "===== Epoch 11: Full Model Unlock & Optimizer Reconfiguration (LLRD Rate: 0.9) =====\n",
      " No parameters needed unlocking.\n",
      "  Applying Base LR: 1.0e-03, LR Adaptation Factor: 1.0000\n",
      "  Regularization Factor applied to Weight Decay:\n",
      "   - CNN WD:       0.010 -> 0.0100\n",
      "   - Transformer WD: 0.020 -> 0.0200\n",
      "   - Head/Meta WD:   0.050 -> 0.0500\n",
      "  Target Max Learning Rates:\n",
      "   - CNN Backbone (Max): 3.000e-04\n",
      "   - Transformer Backbone: 5.000e-04\n",
      "   - Fusion Layer:       1.000e-03\n",
      "   - Classifier Head(s): 1.000e-03\n",
      "    Group 'Transformer': 327 params, LR=5.00e-04, WD=0.02\n",
      "    Group 'Fusion': 4 params, LR=1.00e-03, WD=0.05\n",
      "    Group 'Classifier': 2 params, LR=1.00e-03, WD=0.05\n",
      "  Warn: Adding 8 remaining trainable parameters to a default group.\n",
      "    Group 'Remaining': 8 params, LR=1.00e-03, WD=0.05\n",
      "  Optimizer reconfiguring with 4 parameter groups.\n",
      "===== Optimizer Reconfigured Successfully =====\n",
      "Current LR: 5.00e-04\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                         \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 11 - Training Time: 1453.60s, Avg Loss: 1.17603, Acc: 35.55%, Resources: {'gpu_memory_allocated': 1735.72119140625, 'gpu_max_memory': 7388.0458984375}\n",
      "Calibrating: Iterating through validation loader...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Running LBFGS optimizer for temperature...\n",
      "Optimal temperature found: 1.2650\n",
      "Using temperature: 1.2650 for validation epoch 11\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                 \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 11 Valid Aggregated: PROBS=(11593, 9), TARGETS=(11593,)\n",
      " Best F1 Threshold (PR): 0.1487, F1=0.4486\n",
      "Epoch 11 - Val Loss: 3.87378, Bin AUC: 0.8261, F1(T=0.15): 0.4371, MC AUC: 0.8819, MC Acc: 42.88%, MC F1: 0.1662, Val Time: 412.70s\n",
      "No improvement. Counter: 1/20\n",
      "Epoch 11 completed in 1867.52s.\n",
      "\n",
      "===== Epoch 12/30 =====\n",
      "Runtime Check: 5.08 hours elapsed (Limit: 11.42 hours)\n",
      "Current LR: 5.00e-04\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                         \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 12 - Training Time: 1453.25s, Avg Loss: 0.99067, Acc: 40.95%, Resources: {'gpu_memory_allocated': 1735.72119140625, 'gpu_max_memory': 7388.0458984375}\n",
      "Using temperature: 1.0000 for validation epoch 12\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                 \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 12 Valid Aggregated: PROBS=(11593, 9), TARGETS=(11593,)\n",
      " Best F1 Threshold (PR): 0.3364, F1=0.4489\n",
      "Epoch 12 - Val Loss: 3.90643, Bin AUC: 0.8126, F1(T=0.34): 0.4410, MC AUC: 0.8839, MC Acc: 53.44%, MC F1: 0.2708, Val Time: 132.73s\n",
      "No improvement. Counter: 2/20\n",
      "Epoch 12 completed in 1587.33s.\n",
      "\n",
      "===== Epoch 13/30 =====\n",
      "Runtime Check: 5.52 hours elapsed (Limit: 11.42 hours)\n",
      "Current LR: 5.00e-04\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                         \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 13 - Training Time: 1456.94s, Avg Loss: 0.91591, Acc: 44.56%, Resources: {'gpu_memory_allocated': 1735.72119140625, 'gpu_max_memory': 7388.0458984375}\n",
      "Using temperature: 1.0000 for validation epoch 13\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                 \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 13 Valid Aggregated: PROBS=(11593, 9), TARGETS=(11593,)\n",
      " Best F1 Threshold (PR): 0.2954, F1=0.4056\n",
      "Epoch 13 - Val Loss: 3.82145, Bin AUC: 0.7693, F1(T=0.30): 0.3876, MC AUC: 0.8929, MC Acc: 47.30%, MC F1: 0.1957, Val Time: 132.65s\n",
      "No improvement. Counter: 3/20\n",
      "Epoch 13 completed in 1590.77s.\n",
      "\n",
      "===== Epoch 14/30 =====\n",
      "Runtime Check: 5.96 hours elapsed (Limit: 11.42 hours)\n",
      "Current LR: 5.00e-04\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                         \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 14 - Training Time: 1453.82s, Avg Loss: 0.90581, Acc: 45.05%, Resources: {'gpu_memory_allocated': 1735.72119140625, 'gpu_max_memory': 7388.0458984375}\n",
      "Using temperature: 1.0000 for validation epoch 14\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                 \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 14 Valid Aggregated: PROBS=(11593, 9), TARGETS=(11593,)\n",
      " Best F1 Threshold (PR): 0.3150, F1=0.4638\n",
      "Epoch 14 - Val Loss: 3.69159, Bin AUC: 0.8488, F1(T=0.31): 0.4614, MC AUC: 0.9067, MC Acc: 50.33%, MC F1: 0.1884, Val Time: 133.15s\n",
      "No improvement. Counter: 4/20\n",
      "Epoch 14 completed in 1588.15s.\n",
      "\n",
      "===== Epoch 15/30 =====\n",
      "Runtime Check: 6.40 hours elapsed (Limit: 11.42 hours)\n",
      "Current LR: 5.00e-04\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                         \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 15 - Training Time: 1452.66s, Avg Loss: 0.86291, Acc: 47.84%, Resources: {'gpu_memory_allocated': 1735.72119140625, 'gpu_max_memory': 7388.0458984375}\n",
      "Using temperature: 1.0000 for validation epoch 15\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                 \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 15 Valid Aggregated: PROBS=(11593, 9), TARGETS=(11593,)\n",
      " Best F1 Threshold (PR): 0.1353, F1=0.4469\n",
      "Epoch 15 - Val Loss: 3.83260, Bin AUC: 0.8070, F1(T=0.14): 0.4403, MC AUC: 0.8707, MC Acc: 48.99%, MC F1: 0.2221, Val Time: 132.27s\n",
      "No improvement. Counter: 5/20\n",
      "Epoch 15 completed in 1586.12s.\n",
      "\n",
      "===== Epoch 16/30 =====\n",
      "Runtime Check: 6.84 hours elapsed (Limit: 11.42 hours)\n",
      "Scheduler Phase: Stepping Existing Post-Warmup Scheduler\n",
      "Current LR: 5.00e-04\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                         \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 16 - Training Time: 1451.43s, Avg Loss: 0.83120, Acc: 49.14%, Resources: {'gpu_memory_allocated': 1735.72119140625, 'gpu_max_memory': 7388.0458984375}\n",
      "Calibrating: Iterating through validation loader...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Running LBFGS optimizer for temperature...\n",
      "Optimal temperature found: 1.1271\n",
      "Using temperature: 1.1271 for validation epoch 16\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                 \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 16 Valid Aggregated: PROBS=(11593, 9), TARGETS=(11593,)\n",
      " Best F1 Threshold (PR): 0.3324, F1=0.4480\n",
      "Epoch 16 - Val Loss: 3.71708, Bin AUC: 0.7822, F1(T=0.33): 0.4380, MC AUC: 0.9032, MC Acc: 59.65%, MC F1: 0.2924, Val Time: 412.05s\n",
      "No improvement. Counter: 6/20\n",
      "Warn: Recreating Plateau scheduler due to optimizer mismatch.\n",
      "Epoch 16 completed in 1864.69s.\n",
      "\n",
      "===== Epoch 17/30 =====\n",
      "Runtime Check: 7.36 hours elapsed (Limit: 11.42 hours)\n",
      "Scheduler Phase: Stepping Existing Post-Warmup Scheduler\n",
      "Current LR: 5.00e-04\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                         \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 17 - Training Time: 1453.81s, Avg Loss: 0.80760, Acc: 50.51%, Resources: {'gpu_memory_allocated': 1735.72119140625, 'gpu_max_memory': 7388.0458984375}\n",
      "Using temperature: 1.0000 for validation epoch 17\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 17 Valid Aggregated: PROBS=(11593, 9), TARGETS=(11593,)\n",
      " Best F1 Threshold (PR): 0.2479, F1=0.4707\n",
      "Epoch 17 - Val Loss: 3.54161, Bin AUC: 0.8582, F1(T=0.25): 0.4568, MC AUC: 0.9107, MC Acc: 54.09%, MC F1: 0.2631, Val Time: 133.64s\n",
      "No improvement. Counter: 7/20\n",
      "Epoch 17 completed in 1588.74s.\n",
      "\n",
      "===== Epoch 18/30 =====\n",
      "Runtime Check: 7.80 hours elapsed (Limit: 11.42 hours)\n",
      "Scheduler Phase: Stepping Existing Post-Warmup Scheduler\n",
      "Current LR: 5.00e-04\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                         \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 18 - Training Time: 1447.25s, Avg Loss: 0.77421, Acc: 51.87%, Resources: {'gpu_memory_allocated': 1735.72119140625, 'gpu_max_memory': 7388.0458984375}\n",
      "Using temperature: 1.0000 for validation epoch 18\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                 \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 18 Valid Aggregated: PROBS=(11593, 9), TARGETS=(11593,)\n",
      " Best F1 Threshold (PR): 0.2456, F1=0.4736\n",
      "Epoch 18 - Val Loss: 3.48270, Bin AUC: 0.8643, F1(T=0.25): 0.4708, MC AUC: 0.9208, MC Acc: 57.99%, MC F1: 0.2949, Val Time: 132.39s\n",
      "No improvement. Counter: 8/20\n",
      "Epoch 18 completed in 1580.86s.\n",
      "\n",
      "===== Epoch 19/30 =====\n",
      "Runtime Check: 8.24 hours elapsed (Limit: 11.42 hours)\n",
      "Scheduler Phase: Stepping Existing Post-Warmup Scheduler\n",
      "Current LR: 5.00e-04\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                         \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 19 - Training Time: 1455.65s, Avg Loss: 0.77824, Acc: 53.14%, Resources: {'gpu_memory_allocated': 1735.72119140625, 'gpu_max_memory': 7388.0458984375}\n",
      "Using temperature: 1.0000 for validation epoch 19\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                 \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 19 Valid Aggregated: PROBS=(11593, 9), TARGETS=(11593,)\n",
      " Best F1 Threshold (PR): 0.3565, F1=0.4517\n",
      "Epoch 19 - Val Loss: 3.48017, Bin AUC: 0.8502, F1(T=0.36): 0.4414, MC AUC: 0.9287, MC Acc: 58.70%, MC F1: 0.2933, Val Time: 132.56s\n",
      "No improvement. Counter: 9/20\n",
      "Epoch 19 completed in 1589.47s.\n",
      "\n",
      "===== Epoch 20/30 =====\n",
      "Runtime Check: 8.68 hours elapsed (Limit: 11.42 hours)\n",
      "Scheduler Phase: Stepping Existing Post-Warmup Scheduler\n",
      "Current LR: 5.00e-04\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                         \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 20 - Training Time: 1453.03s, Avg Loss: 0.75239, Acc: 53.46%, Resources: {'gpu_memory_allocated': 1735.72119140625, 'gpu_max_memory': 7388.0458984375}\n",
      "Using temperature: 1.0000 for validation epoch 20\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                 \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 20 Valid Aggregated: PROBS=(11593, 9), TARGETS=(11593,)\n",
      " Best F1 Threshold (PR): 0.2110, F1=0.5459\n",
      "Epoch 20 - Val Loss: 3.46984, Bin AUC: 0.8594, F1(T=0.21): 0.5379, MC AUC: 0.9262, MC Acc: 58.66%, MC F1: 0.2872, Val Time: 132.60s\n",
      "No improvement. Counter: 10/20\n",
      "Epoch 20 completed in 1586.89s.\n",
      "\n",
      "===== Epoch 21/30 =====\n",
      "Runtime Check: 9.12 hours elapsed (Limit: 11.42 hours)\n",
      "Scheduler Phase: Stepping Existing Post-Warmup Scheduler\n",
      "Current LR: 5.00e-04\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                         \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 21 - Training Time: 1454.22s, Avg Loss: 0.74104, Acc: 54.54%, Resources: {'gpu_memory_allocated': 1735.72119140625, 'gpu_max_memory': 7388.0458984375}\n",
      "Calibrating: Iterating through validation loader...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Running LBFGS optimizer for temperature...\n",
      "Optimal temperature found: 1.1718\n",
      "Using temperature: 1.1718 for validation epoch 21\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                 \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 21 Valid Aggregated: PROBS=(11593, 9), TARGETS=(11593,)\n",
      " Best F1 Threshold (PR): 0.2780, F1=0.5007\n",
      "Epoch 21 - Val Loss: 3.60227, Bin AUC: 0.8614, F1(T=0.28): 0.4899, MC AUC: 0.9111, MC Acc: 57.55%, MC F1: 0.2755, Val Time: 413.30s\n",
      "No improvement. Counter: 11/20\n",
      "Epoch 21 completed in 1868.68s.\n",
      "\n",
      "===== Epoch 22/30 =====\n",
      "Runtime Check: 9.64 hours elapsed (Limit: 11.42 hours)\n",
      "Scheduler Phase: Stepping Existing Post-Warmup Scheduler\n",
      "Current LR: 5.00e-04\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                         \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 22 - Training Time: 1457.89s, Avg Loss: 0.71720, Acc: 55.93%, Resources: {'gpu_memory_allocated': 1735.72119140625, 'gpu_max_memory': 7388.0458984375}\n",
      "Using temperature: 1.0000 for validation epoch 22\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                 \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 22 Valid Aggregated: PROBS=(11593, 9), TARGETS=(11593,)\n",
      " Best F1 Threshold (PR): 0.3407, F1=0.5544\n",
      "Epoch 22 - Val Loss: 3.43040, Bin AUC: 0.8940, F1(T=0.34): 0.5462, MC AUC: 0.9316, MC Acc: 66.42%, MC F1: 0.3407, Val Time: 133.41s\n",
      "No improvement. Counter: 12/20\n",
      "Epoch 22 completed in 1592.49s.\n",
      "\n",
      "===== Epoch 23/30 =====\n",
      "Runtime Check: 10.09 hours elapsed (Limit: 11.42 hours)\n",
      "Scheduler Phase: Stepping Existing Post-Warmup Scheduler\n",
      "Current LR: 5.00e-04\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                         \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 23 - Training Time: 1460.06s, Avg Loss: 0.70654, Acc: 56.65%, Resources: {'gpu_memory_allocated': 1735.72119140625, 'gpu_max_memory': 7388.0458984375}\n",
      "Using temperature: 1.0000 for validation epoch 23\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                 \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 23 Valid Aggregated: PROBS=(11593, 9), TARGETS=(11593,)\n",
      " Best F1 Threshold (PR): 0.2646, F1=0.5107\n",
      "Epoch 23 - Val Loss: 3.41620, Bin AUC: 0.8776, F1(T=0.26): 0.5020, MC AUC: 0.9281, MC Acc: 63.70%, MC F1: 0.3563, Val Time: 133.01s\n",
      "No improvement. Counter: 13/20\n",
      "Epoch 23 completed in 1594.32s.\n",
      "\n",
      "===== Epoch 24/30 =====\n",
      "Runtime Check: 10.53 hours elapsed (Limit: 11.42 hours)\n",
      "Scheduler Phase: Stepping Existing Post-Warmup Scheduler\n",
      "Current LR: 5.00e-04\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                         \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 24 - Training Time: 1457.34s, Avg Loss: 0.68395, Acc: 57.82%, Resources: {'gpu_memory_allocated': 1735.72119140625, 'gpu_max_memory': 7388.0458984375}\n",
      "Using temperature: 1.0000 for validation epoch 24\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                 \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 24 Valid Aggregated: PROBS=(11593, 9), TARGETS=(11593,)\n",
      " Best F1 Threshold (PR): 0.4167, F1=0.4995\n",
      "Epoch 24 - Val Loss: 3.54479, Bin AUC: 0.8488, F1(T=0.42): 0.4776, MC AUC: 0.9203, MC Acc: 58.43%, MC F1: 0.2351, Val Time: 133.97s\n",
      "No improvement. Counter: 14/20\n",
      "Epoch 24 completed in 1592.55s.\n",
      "\n",
      "===== Epoch 25/30 =====\n",
      "Runtime Check: 10.97 hours elapsed (Limit: 11.42 hours)\n",
      "Scheduler Phase: Stepping Existing Post-Warmup Scheduler\n",
      "Current LR: 5.00e-04\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                         \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 25 - Training Time: 1456.99s, Avg Loss: 0.69250, Acc: 57.74%, Resources: {'gpu_memory_allocated': 1735.72119140625, 'gpu_max_memory': 7388.0458984375}\n",
      "Using temperature: 1.0000 for validation epoch 25\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                 \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 25 Valid Aggregated: PROBS=(11593, 9), TARGETS=(11593,)\n",
      " Best F1 Threshold (PR): 0.2908, F1=0.5464\n",
      "Epoch 25 - Val Loss: 3.35548, Bin AUC: 0.8843, F1(T=0.29): 0.5342, MC AUC: 0.9264, MC Acc: 61.52%, MC F1: 0.2999, Val Time: 132.73s\n",
      "No improvement. Counter: 15/20\n",
      "Epoch 25 completed in 1590.97s.\n",
      "\n",
      "===== Epoch 26/30 =====\n",
      "Runtime Check: 11.41 hours elapsed (Limit: 11.42 hours)\n",
      "Scheduler Phase: Stepping Existing Post-Warmup Scheduler\n",
      "Current LR: 5.00e-04\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                         \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 26 - Training Time: 1454.78s, Avg Loss: 0.68403, Acc: 58.98%, Resources: {'gpu_memory_allocated': 1735.72119140625, 'gpu_max_memory': 7388.0458984375}\n",
      "Calibrating: Iterating through validation loader...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Running LBFGS optimizer for temperature...\n",
      "Optimal temperature found: 1.1183\n",
      "Using temperature: 1.1183 for validation epoch 26\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                 \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 26 Valid Aggregated: PROBS=(11593, 9), TARGETS=(11593,)\n",
      " Best F1 Threshold (PR): 0.2711, F1=0.4769\n",
      "Epoch 26 - Val Loss: 3.36436, Bin AUC: 0.8533, F1(T=0.27): 0.4717, MC AUC: 0.9311, MC Acc: 61.89%, MC F1: 0.3005, Val Time: 412.47s\n",
      "No improvement. Counter: 16/20\n",
      "Epoch 26 completed in 1868.48s.\n",
      "\n",
      "===== Epoch 27/30 =====\n",
      "\n",
      "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n",
      "!!! RUNTIME LIMIT REACHED (42955s / 41100s) !!!\n",
      "!!! Stopping training loop before starting Epoch 27.   !!!\n",
      "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n",
      "\n",
      "\n",
      "===== Training Finished / Stopped (Epoch 27/30, Reason: Runtime Limit) =====\n",
      "Total time: 42763.93s\n",
      "Using metrics from Best Epoch: 10\n",
      "\n",
      "Final Summary Metrics:\n",
      "  - final_best_epoch_logged: 10\n",
      "  - final_binary_acc: 93.84111101526783\n",
      "  - final_binary_auc: 0.9246078133583069\n",
      "  - final_binary_f1: 0.6189967982924227\n",
      "  - final_binary_precision: 0.677570093457944\n",
      "  - final_binary_recall: 0.5697445972495089\n",
      "  - final_binary_specificity: 0.9739007092198582\n",
      "  - final_composite_score: 0.8010374136068074\n",
      "  - final_epoch: 10\n",
      "  - final_last_epoch_completed: 27\n",
      "  - final_multiclass_acc: 76.92422866821289\n",
      "  - final_multiclass_auc: 0.9506034851074219\n",
      "  - final_multiclass_f1: 0.479097843170166\n",
      "  - final_temperature: 1.0\n",
      "  - final_total_training_time_sec: 42763.93\n",
      "  - final_val_loss_raw: 3.2668054771866224\n",
      "\n",
      "Final Best Model saved at: effnet_v2_m_384_ext_meta_best.pth\n",
      "Logged FINAL model artifact to WandB.\n",
      " Saved validation IDs (11593) to best_valid_ids_E10_k68oa6dc.csv\n",
      " Saved best predictions ((11593, 9)) to best_probs_E10_k68oa6dc.npy\n",
      " Saved best targets ((11593,)) to best_tgts_E10_k68oa6dc.npy\n",
      "Logged final predictions artifact (including validation IDs).\n",
      "--- Exiting Adaptive Training Run ---\n",
      "\n",
      "Total Run Time (Training): 42770.12s\n",
      "\n",
      "Final Run Metrics Summary (from run_single_model):\n",
      "  - best_epoch_logged: 10\n",
      "  - binary_acc: 93.84111101526783\n",
      "  - binary_auc: 0.9246078133583069\n",
      "  - binary_f1: 0.6189967982924227\n",
      "  - binary_precision: 0.677570093457944\n",
      "  - binary_recall: 0.5697445972495089\n",
      "  - binary_specificity: 0.9739007092198582\n",
      "  - composite_score: 0.8010374136068074\n",
      "  - epoch: 10\n",
      "  - last_epoch_completed: 27\n",
      "  - multiclass_acc: 76.92422866821289\n",
      "  - multiclass_auc: 0.9506034851074219\n",
      "  - multiclass_f1: 0.479097843170166\n",
      "  - temperature: 1.0\n",
      "  - total_training_time_sec: 42763.93\n",
      "  - val_loss_raw: 3.2668054771866224\n",
      "\n",
      "Prerequisites for Grad-CAM seem available.\n"
     ]
    }
   ],
   "source": [
    "import time\n",
    "if __name__ == \"__main__\":\n",
    "\n",
    "    # Use the globally defined configuration directly\n",
    "    print(f\"Starting run: {model_type} / {cnn_backbone_name}\" + (f\" / {transformer_backbone_name}\" if model_type == 'hybrid_swin' else \"\"))\n",
    "    start_time = time.time()\n",
    "\n",
    "    # --- Call the modified function using GLOBAL variables ---\n",
    "    (model, best_model_state, final_metrics, train_losses, val_losses,\n",
    "     best_PROBS, best_TARGETS,\n",
    "     df_valid_set, diagnosis2idx,\n",
    "     best_epoch_num, kernel_type_ret, early_stopping,\n",
    "     model_type_ret, cnn_backbone_ret, n_meta_features_ret,\n",
    "     image_size_ret, out_dim_ret,\n",
    "     lr_adaptation_factor_ret, regularization_factor_ret,\n",
    "     wandb_run_ret\n",
    "    ) = run_single_model(\n",
    "        model_type=model_type, # Use global\n",
    "        cnn_backbone_name=cnn_backbone_name, # Use global\n",
    "        # --- CORRECTED LINE ---\n",
    "        transformer_backbone_name=transformer_backbone_name if model_type in ['hybrid_swin', 'swin_only'] else None,\n",
    "        # --- END CORRECTION ---\n",
    "        use_meta_flag=use_meta, # Use global\n",
    "        use_external_flag=use_external, # Use global\n",
    "        target_total_epochs=target_total_epochs # Use global\n",
    "        # DEBUG flag is used internally by run_single_model based on global value\n",
    "    )\n",
    "    # --- END Function Call ---\n",
    "\n",
    "    total_time = time.time() - start_time\n",
    "    print(f\"\\nTotal Run Time (Training): {total_time:.2f}s\")\n",
    "    print(\"\\nFinal Run Metrics Summary (from run_single_model):\")\n",
    "    if final_metrics:\n",
    "        # Print scalar metrics nicely\n",
    "        scalar_metrics = {k: v for k, v in final_metrics.items() if isinstance(v, (int, float, bool, str))}\n",
    "        for k, v in sorted(scalar_metrics.items()):\n",
    "            print(f\"  - {k}: {v}\")\n",
    "    else:\n",
    "        print(\"  No final metrics available.\")\n",
    "\n",
    "# Grad-CAM prerequisites check\n",
    "    if 'df_valid_set' in locals() and 'best_model_state' in locals():\n",
    "        print(\"\\nPrerequisites for Grad-CAM seem available.\")\n",
    "    else:\n",
    "        print(\"\\nWarning: Prerequisites for Grad-CAM might be missing.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b44ecd12",
   "metadata": {
    "papermill": {
     "duration": 7.63172,
     "end_time": "2025-06-18T16:23:55.176112",
     "exception": false,
     "start_time": "2025-06-18T16:23:47.544392",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Model Calibration Visualization (Reliability Diagram)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "66b9d64e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-18T16:24:10.716387Z",
     "iopub.status.busy": "2025-06-18T16:24:10.716029Z",
     "iopub.status.idle": "2025-06-18T16:24:11.205226Z",
     "shell.execute_reply": "2025-06-18T16:24:11.204444Z"
    },
    "papermill": {
     "duration": 8.354744,
     "end_time": "2025-06-18T16:24:11.206389",
     "exception": false,
     "start_time": "2025-06-18T16:24:02.851645",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "===== Starting Model Calibration Visualization =====\n",
      "Prerequisites met. Generating calibration plot for Melanoma class (index 6) from Epoch 10.\n",
      "  Prepared data: y_prob_melanoma shape (11593,), y_true_binary shape (11593,)\n",
      "  Number of positive (melanoma) samples in best validation set: 1018\n",
      "  Calculated calibration curve points (True Probability, Predicted Probability):\n",
      "    0.0175, 0.0135\n",
      "    0.0964, 0.1417\n",
      "    0.1519, 0.2473\n",
      "    0.2210, 0.3496\n",
      "    0.3247, 0.4543\n",
      "    0.4213, 0.5482\n",
      "    0.5333, 0.6480\n",
      "    0.7458, 0.7557\n",
      "    0.9615, 0.8305\n",
      "  Saved calibration plot locally: v2m_384_ext_meta_calibration_plot_epoch10.png\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  Logged calibration plot to WandB.\n",
      "===== Model Calibration Visualization Finished =====\n"
     ]
    }
   ],
   "source": [
    "# This section visualizes the calibration of the best model's probabilities\n",
    "# for the primary class of interest (melanoma) using a reliability diagram.\n",
    "# It leverages the saved predictions and targets from the best validation epoch.\n",
    "# ==============================================================================\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.calibration import calibration_curve\n",
    "import numpy as np\n",
    "import wandb # Assuming wandb is potentially still active or needed for logging\n",
    "\n",
    "print(\"\\n===== Starting Model Calibration Visualization =====\")\n",
    "\n",
    "# --- 1. Prerequisite Check ---\n",
    "required_vars_for_calibration = ['best_PROBS', 'best_TARGETS', 'mel_idx', 'best_epoch_num', 'kernel_type']\n",
    "calibration_vars_ok = True\n",
    "for var_name in required_vars_for_calibration:\n",
    "    if var_name not in locals() or locals()[var_name] is None:\n",
    "        print(f\"ERROR: Calibration requires '{var_name}', which is missing or None.\")\n",
    "        calibration_vars_ok = False\n",
    "    # Specifically check if the arrays are non-empty if they exist\n",
    "    elif var_name in ['best_PROBS', 'best_TARGETS'] and len(locals()[var_name]) == 0:\n",
    "        print(f\"ERROR: Calibration requires non-empty '{var_name}'. Found empty array.\")\n",
    "        calibration_vars_ok = False\n",
    "\n",
    "if not calibration_vars_ok:\n",
    "    print(\"Skipping calibration plot generation due to missing prerequisites.\")\n",
    "else:\n",
    "    print(f\"Prerequisites met. Generating calibration plot for Melanoma class (index {mel_idx}) from Epoch {best_epoch_num}.\")\n",
    "\n",
    "    # --- 2. Prepare Data for Binary Calibration (Melanoma vs Non-Melanoma) ---\n",
    "    try:\n",
    "        # Ensure they are numpy arrays\n",
    "        if not isinstance(best_PROBS, np.ndarray): best_PROBS = np.array(best_PROBS)\n",
    "        if not isinstance(best_TARGETS, np.ndarray): best_TARGETS = np.array(best_TARGETS)\n",
    "\n",
    "        # Extract probabilities for the positive class (melanoma)\n",
    "        # Ensure mel_idx is within bounds\n",
    "        if mel_idx < 0 or mel_idx >= best_PROBS.shape[1]:\n",
    "             raise IndexError(f\"mel_idx ({mel_idx}) is out of bounds for best_PROBS shape {best_PROBS.shape}\")\n",
    "        y_prob_melanoma = best_PROBS[:, mel_idx]\n",
    "\n",
    "        # Create binary true labels (1 if melanoma, 0 otherwise)\n",
    "        y_true_binary = (best_TARGETS == mel_idx).astype(int)\n",
    "\n",
    "        # Check if there's variation in true labels (needed for calibration curve)\n",
    "        if len(np.unique(y_true_binary)) < 2:\n",
    "            print(\"WARNING: Only one class present in the best validation targets. Calibration curve may not be meaningful.\")\n",
    "            # Optionally skip plotting here if desired\n",
    "\n",
    "        print(f\"  Prepared data: y_prob_melanoma shape {y_prob_melanoma.shape}, y_true_binary shape {y_true_binary.shape}\")\n",
    "        print(f\"  Number of positive (melanoma) samples in best validation set: {np.sum(y_true_binary)}\")\n",
    "\n",
    "        # --- 3. Calculate Calibration Curve ---\n",
    "        # Use 'uniform' strategy for equally spaced bins based on probability.\n",
    "        # 'quantile' can also be used for bins with equal numbers of samples.\n",
    "        n_bins = 10 # A common choice, can be adjusted\n",
    "        prob_true, prob_pred = calibration_curve(y_true_binary, y_prob_melanoma, n_bins=n_bins, strategy='uniform')\n",
    "\n",
    "        print(f\"  Calculated calibration curve points (True Probability, Predicted Probability):\")\n",
    "        for pt, pp in zip(prob_true, prob_pred):\n",
    "            print(f\"    {pt:.4f}, {pp:.4f}\")\n",
    "\n",
    "        # --- 4. Plot Reliability Diagram ---\n",
    "        plt.figure(figsize=(8, 8))\n",
    "        plt.plot([0, 1], [0, 1], linestyle='--', color='gray', label='Perfectly Calibrated')\n",
    "        plt.plot(prob_pred, prob_true, marker='s', linestyle='-', label='Model Calibration (Melanoma Class)')\n",
    "\n",
    "        plt.xlabel(\"Mean Predicted Probability (in bin)\", fontsize=12)\n",
    "        plt.ylabel(\"Fraction of Positives (in bin)\", fontsize=12)\n",
    "        plt.title(f\"Calibration Plot (Reliability Diagram) - Epoch {best_epoch_num}\\n{kernel_type}\", fontsize=14, pad=15)\n",
    "        plt.legend(loc='lower right', fontsize=10)\n",
    "        plt.grid(True, linestyle=':', alpha=0.6)\n",
    "        plt.tight_layout()\n",
    "\n",
    "        # --- 5. Save and Log Plot ---\n",
    "        calibration_plot_filename = f\"{kernel_type}_calibration_plot_epoch{best_epoch_num}.png\"\n",
    "        plt.savefig(calibration_plot_filename, dpi=150)\n",
    "        print(f\"  Saved calibration plot locally: {calibration_plot_filename}\")\n",
    "        plt.show() # Display the plot in the notebook\n",
    "\n",
    "        # --- MODIFY THIS CHECK ---\n",
    "        if 'wandb_run_ret' in locals() and wandb_run_ret is not None:\n",
    "            try:\n",
    "                # Use the global wandb object for logging commands\n",
    "                wandb.log({\"calibration_plot_melanoma\": wandb.Image(calibration_plot_filename)}, step=best_epoch_num)\n",
    "                print(\"  Logged calibration plot to WandB.\")\n",
    "            except Exception as e:\n",
    "                print(f\"  Warning: Failed to log calibration plot to WandB: {e}\")\n",
    "        else:\n",
    "            print(\"  Skipping WandB logging for calibration plot (WandB run object not available or finished).\")\n",
    "\n",
    "    except Exception as e:\n",
    "        print(f\"\\nERROR generating calibration plot: {e}\")\n",
    "        import traceback\n",
    "        traceback.print_exc()\n",
    "\n",
    "print(\"===== Model Calibration Visualization Finished =====\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "55231f4d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-18T16:24:26.502416Z",
     "iopub.status.busy": "2025-06-18T16:24:26.502065Z",
     "iopub.status.idle": "2025-06-18T16:24:28.534821Z",
     "shell.execute_reply": "2025-06-18T16:24:28.534130Z"
    },
    "papermill": {
     "duration": 9.859192,
     "end_time": "2025-06-18T16:24:28.536121",
     "exception": false,
     "start_time": "2025-06-18T16:24:18.676929",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:                 binary_acc ▂▅▅▆▆▆▇▇▇█▁▂▄▄▂▄▅▄▄▇▅▇▆▆▆▃\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:                 binary_auc ▁▃▆▅▆▇▇█▆█▄▃▁▅▃▂▅▅▅▅▅▇▆▅▆▅\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:                  binary_f1 ▂▃▅▅▆▇▇▇▆█▂▃▁▃▃▃▃▄▃▆▄▆▄▄▅▄\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:           binary_precision ▂▄▅▆▅▆▆▆▇█▁▂▃▃▂▄▅▃▃▇▄▇▅▆▅▃\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:              binary_recall ▄▄▆▅▇█▇█▆█▅▄▁▄▄▂▃▅▃▅▄▅▄▃▆▅\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:         binary_specificity ▃▆▆▇▅▆▆▆▇█▁▂▆▅▃▆▇▄▅█▆█▇█▆▃\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:            composite_score ▁▃▅▅▆▇▇█▆█▄▃▁▄▃▂▄▅▄▅▅▆▅▄▆▅\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:              learning_rate ▁▁▁▁▁▁▁▁▁▂████████████████\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:             multiclass_acc ▂▄▅▆▆▇▇▇██▁▃▂▃▂▄▃▄▄▄▄▆▅▄▅▅\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:             multiclass_auc ▁▃▅▆▆▇▇▇██▄▄▄▅▃▅▆▆▇▇▆▇▇▆▇▇\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:              multiclass_f1 ▁▃▅▆▆▇▇▇██▂▄▂▂▃▄▄▄▄▄▄▅▆▃▄▄\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:        optimal_temperature ▁█▄▆▄\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:                temperature ▁▁▁▁▁▁▁▁▁▁█▁▁▁▁▄▁▁▁▁▆▁▁▁▁▄\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:                  train_acc ▁▃▄▅▆▆▇▇██▂▃▄▄▄▅▅▅▆▆▆▆▆▇▇▇\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:   train_epoch_time_seconds ▆▇█▆▆▇▆▆▆▆▄▄▆▄▄▃▄▁▅▄▄▆▇▆▆▅\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:       train_gpu_max_memory ▁▁▁▁▁▁▁▁▁▁████████████████\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: train_gpu_memory_allocated ▁▁▁▁▁▁▁▁▁▁████████████████\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:                 train_loss █▄▃▂▂▂▁▁▁▁▆▅▄▄▃▃▃▂▂▂▂▂▂▂▂▂\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:     val_epoch_time_seconds ▁▁▁▁▁█▁▁▁▁█▁▁▁▁█▁▁▁▁█▁▁▁▁█\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:         val_gpu_max_memory ▁▁▁▁▁▁▁▁▁▁████████████████\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:   val_gpu_memory_allocated ▁▁▁▁▁▁▁▁▁▁████████████████\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:                   val_loss ▁▃▅▅▆▆▇▇▇█▂▂▃▄▂▄▅▆▆▆▅▆▇▅▇▇\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:               val_loss_raw █▆▄▄▃▃▂▂▂▁▇▇▆▅▇▅▄▃▃▃▄▃▂▄▂▂\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:                    binary_acc 90.74441\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:                    binary_auc 0.85334\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:                     binary_f1 0.47169\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:              binary_precision 0.47285\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:                 binary_recall 0.47053\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:            binary_specificity 0.9495\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:               composite_score 0.73972\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:       final_best_epoch_logged 10\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:              final_binary_acc 93.84111\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:              final_binary_auc 0.92461\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:               final_binary_f1 0.619\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:        final_binary_precision 0.67757\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:           final_binary_recall 0.56974\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:      final_binary_specificity 0.9739\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:         final_composite_score 0.80104\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:                   final_epoch 10\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:    final_last_epoch_completed 27\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:          final_multiclass_acc 76.92423\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:          final_multiclass_auc 0.9506\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:           final_multiclass_f1 0.4791\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:             final_temperature 1\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: final_total_training_time_sec 42763.93\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:            final_val_loss_raw 3.26681\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:                 learning_rate 0.0005\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:                multiclass_acc 61.88855\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:                multiclass_auc 0.93114\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:                 multiclass_f1 0.30054\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:           optimal_temperature 1.11834\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:                   temperature 1.11834\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:                     train_acc 58.98464\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:      train_epoch_time_seconds 1454.77539\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:          train_gpu_max_memory 7388.0459\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:    train_gpu_memory_allocated 1735.72119\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:                    train_loss 0.68403\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:        val_epoch_time_seconds 412.46596\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:            val_gpu_max_memory 7388.0459\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:      val_gpu_memory_allocated 1708.45996\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:                      val_loss 0.32713\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m:                  val_loss_raw 3.36436\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: 🚀 View run \u001b[33meffnet_v2_m_384_ext_meta_250618_1130\u001b[0m at: \u001b[34m\u001b[4mhttps://wandb.ai/arveda-ava86-universitas-gadjah-mada-library/SKRIPSI%20GACOR/runs/k68oa6dc\u001b[0m\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: ⭐️ View project at: \u001b[34m\u001b[4mhttps://wandb.ai/arveda-ava86-universitas-gadjah-mada-library/SKRIPSI%20GACOR\u001b[0m\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 5 W&B file(s), 0 media file(s), 266 artifact file(s) and 131 other file(s)\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: Find logs at: \u001b[35m\u001b[1m./wandb/run-20250618_043049-k68oa6dc/logs\u001b[0m\n"
     ]
    }
   ],
   "source": [
    "wandb.finish()  # End the W&B run"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "17155c84",
   "metadata": {
    "papermill": {
     "duration": 7.673658,
     "end_time": "2025-06-18T16:24:43.628739",
     "exception": false,
     "start_time": "2025-06-18T16:24:35.955081",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Grad-Cam Run"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "801cfe1f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-18T16:24:58.778045Z",
     "iopub.status.busy": "2025-06-18T16:24:58.777741Z",
     "iopub.status.idle": "2025-06-18T16:24:58.785940Z",
     "shell.execute_reply": "2025-06-18T16:24:58.785054Z"
    },
    "papermill": {
     "duration": 7.476429,
     "end_time": "2025-06-18T16:24:58.787350",
     "exception": false,
     "start_time": "2025-06-18T16:24:51.310921",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--- Debug Check Before Grad-CAM ---\n",
      "Var 'df_valid_set': Exists | Type=<class 'pandas.core.frame.DataFrame'> | Shape=(11593, 25) | Len=11593 | Keys=N/A | Value=<Object>\n",
      "Var 'diagnosis2idx': Exists | Type=<class 'dict'> | Shape=N/A | Len=9 | Keys=['AK', 'BCC', 'BKL', 'DF', 'SCC'] | Value=<Object>\n",
      "Var 'best_model_state': Exists | Type=<class 'collections.OrderedDict'> | Shape=N/A | Len=350 | Keys=['transformer_backbone.patch_embed.proj.weight', 'transformer_backbone.patch_embed.proj.bias', 'transformer_backbone.patch_embed.norm.weight', 'transformer_backbone.patch_embed.norm.bias', 'transformer_backbone.layers.0.blocks.0.norm1.weight'] | Value=<Object>\n",
      "Var 'model_type_ret': Exists | Type=<class 'str'> | Shape=N/A | Len=9 | Keys=N/A | Value=swin_only\n",
      "Var 'cnn_backbone_ret': Exists | Type=<class 'str'> | Shape=N/A | Len=17 | Keys=N/A | Value=efficientnet_v2_m\n",
      "Var 'n_meta_features_ret': Exists | Type=<class 'int'> | Shape=N/A | Len=N/A | Keys=N/A | Value=14\n",
      "Var 'image_size_ret': Exists | Type=<class 'int'> | Shape=N/A | Len=N/A | Keys=N/A | Value=384\n",
      "Var 'out_dim_ret': Exists | Type=<class 'int'> | Shape=N/A | Len=N/A | Keys=N/A | Value=9\n",
      "Var 'mel_idx': Exists | Type=<class 'int'> | Shape=N/A | Len=N/A | Keys=N/A | Value=6\n",
      "Var 'kernel_type_ret': Exists | Type=<class 'str'> | Shape=N/A | Len=24 | Keys=N/A | Value=effnet_v2_m_384_ext_meta\n",
      "Var 'best_epoch_num': Exists | Type=<class 'int'> | Shape=N/A | Len=N/A | Keys=N/A | Value=10\n",
      "Var 'wandb_run_ret': Exists | Type=<class 'wandb.sdk.wandb_run.Run'> | Shape=N/A | Len=N/A | Keys=N/A | Value=<wandb.sdk.wandb_run.Run object at 0x7bdc8b9b8a60>\n",
      "--- End Debug Check ---\n"
     ]
    }
   ],
   "source": [
    "print(\"--- Debug Check Before Grad-CAM ---\")\n",
    "# Check variables returned by the NEW run_single_model\n",
    "required_vars_check = [\n",
    "    'df_valid_set', 'diagnosis2idx', 'best_model_state', 'model_type_ret',\n",
    "    'cnn_backbone_ret', 'n_meta_features_ret', 'image_size_ret', 'out_dim_ret',\n",
    "    'mel_idx', 'kernel_type_ret', 'best_epoch_num',\n",
    "    'wandb_run_ret' # <<< Add check for the run object\n",
    "]\n",
    "variables_exist = {}\n",
    "for var_name in required_vars_check:\n",
    "    variables_exist[var_name] = var_name in locals()\n",
    "    if variables_exist[var_name]:\n",
    "        value = locals()[var_name]\n",
    "        v_type = type(value)\n",
    "        v_shape = getattr(value, 'shape', 'N/A')\n",
    "        v_len = len(value) if hasattr(value, '__len__') else 'N/A'\n",
    "        v_keys = list(value.keys())[:5] if isinstance(value, dict) else 'N/A'\n",
    "        print(f\"Var '{var_name}': Exists | Type={v_type} | Shape={v_shape} | Len={v_len} | Keys={v_keys} | Value={value if not isinstance(value, (dict, pd.DataFrame, np.ndarray, torch.Tensor)) else '<Object>'}\")\n",
    "    else:\n",
    "        print(f\"Var '{var_name}': DOES NOT EXIST\")\n",
    "print(\"--- End Debug Check ---\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "a96faad0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-18T16:25:14.109407Z",
     "iopub.status.busy": "2025-06-18T16:25:14.109097Z",
     "iopub.status.idle": "2025-06-18T16:25:14.147502Z",
     "shell.execute_reply": "2025-06-18T16:25:14.146599Z"
    },
    "papermill": {
     "duration": 7.708421,
     "end_time": "2025-06-18T16:25:14.148827",
     "exception": false,
     "start_time": "2025-06-18T16:25:06.440406",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Reset index of df_valid_set.\n",
      "\n",
      "===== Starting Grad-CAM Visualization (True vs. Predicted Focus) =====\n",
      "\n",
      "--- Explicit Variable Check ---\n",
      "--- End Explicit Variable Check ---\n",
      "\n",
      "Core variables OK. Setting up for Grad-CAM...\n",
      " Visualizing: Type=swin_only, CNN=efficientnet_v2_m, Meta=True\n",
      "\n",
      "Instantiating model architecture...\n",
      "Error: Unknown model type 'swin_only'.\n",
      "\n",
      "Skipping CAM generation: Model instantiation failed.\n",
      "\n",
      "===== Grad-CAM Visualization Finished =====\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import cv2\n",
    "import os\n",
    "import traceback\n",
    "import wandb\n",
    "import matplotlib.pyplot as plt\n",
    "from numpy.random import default_rng # For cleaner random number generation\n",
    "\n",
    "# --- Ensure necessary imports and definitions ---\n",
    "# Assume essential libraries (torch, nn, pd, np, os, traceback, plt, wandb) are imported\n",
    "\n",
    "# Ensure helper functions are defined globally before this cell\n",
    "if 'load_and_preprocess_for_gradcam' not in globals(): raise NameError(\"load_and_preprocess_for_gradcam not defined\")\n",
    "# Ensure generate_gradcam is defined correctly (use the robust version below)\n",
    "# if 'generate_gradcam' not in globals(): raise NameError(\"generate_gradcam not defined\")\n",
    "\n",
    "# --- Reset index ---\n",
    "if 'df_valid_set' in locals() and isinstance(df_valid_set, pd.DataFrame):\n",
    "    df_valid_set = df_valid_set.reset_index(drop=True)\n",
    "    print(\"Reset index of df_valid_set.\")\n",
    "else:\n",
    "    print(\"Warning: df_valid_set not found or not a DataFrame. Index not reset.\")\n",
    "\n",
    "print(\"\\n===== Starting Grad-CAM Visualization (True vs. Predicted Focus) =====\")\n",
    "\n",
    "# --- Configuration ---\n",
    "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "num_images_to_visualize = 30\n",
    "\n",
    "# --- Prerequisite Check ---\n",
    "print(\"\\n--- Explicit Variable Check ---\")\n",
    "required_vars = [\n",
    "    'df_valid_set', 'diagnosis2idx', 'best_model_state', 'model_type_ret',\n",
    "    'cnn_backbone_ret', 'n_meta_features_ret', 'image_size_ret', 'out_dim_ret',\n",
    "    'mel_idx', 'kernel_type_ret', 'best_epoch_num', 'wandb_run_ret'\n",
    "]\n",
    "all_vars_ok = True; model_trained_successfully = True\n",
    "if 'run_transformer_backbone' in globals(): required_vars.append('run_transformer_backbone')\n",
    "for var_name in required_vars:\n",
    "    if var_name not in locals(): print(f\"ERROR: Prereq '{var_name}' NOT FOUND.\"); all_vars_ok = False\n",
    "    elif locals()[var_name] is None:\n",
    "        if var_name == 'best_model_state': print(f\"ERROR: '{var_name}' is None.\"); model_trained_successfully = False\n",
    "        elif isinstance(locals().get(var_name), pd.DataFrame) and locals().get(var_name).empty: print(f\"INFO: '{var_name}' is empty.\"); all_vars_ok = False\n",
    "        elif var_name not in ['run_transformer_backbone', 'transformer_backbone_name', 'wandb_run_ret']: print(f\"ERROR: '{var_name}' is None.\"); all_vars_ok = False\n",
    "if 'best_epoch_num' in locals() and locals()['best_epoch_num'] == 0: print(\"INFO: 'best_epoch_num' is 0.\")\n",
    "print(\"--- End Explicit Variable Check ---\")\n",
    "\n",
    "# --- Main Grad-CAM Logic ---\n",
    "if all_vars_ok and model_trained_successfully:\n",
    "    print(\"\\nCore variables OK. Setting up for Grad-CAM...\")\n",
    "    current_model_type = model_type_ret; current_cnn_backbone = cnn_backbone_ret\n",
    "    current_transformer_backbone = locals().get('run_transformer_backbone', None) if current_model_type == 'hybrid_swin' else None\n",
    "    current_n_meta = n_meta_features_ret; current_image_size = image_size_ret; current_out_dim = out_dim_ret\n",
    "    print(f\" Visualizing: Type={current_model_type}, CNN={current_cnn_backbone}, Meta={current_n_meta > 0}\")\n",
    "\n",
    "    # --- Instantiate Model ---\n",
    "    print(\"\\nInstantiating model architecture...\")\n",
    "    viz_model = None\n",
    "    try:\n",
    "        # Assume EffNetV2Model/HybridSwinModel defined in notebook scope\n",
    "        if current_model_type == 'hybrid_swin':\n",
    "            if current_transformer_backbone is None: raise ValueError(\"Transformer name missing.\")\n",
    "            viz_model = HybridSwinModel(current_cnn_backbone, current_transformer_backbone, current_out_dim, current_n_meta, False, current_image_size)\n",
    "        elif current_model_type == 'efficientnetv2':\n",
    "            # Pass regularization factor if your model __init__ still expects it, otherwise remove\n",
    "            # Assuming it was removed based on previous steps:\n",
    "            viz_model = EffNetV2Model(current_cnn_backbone, current_out_dim, current_n_meta, False)\n",
    "        else: print(f\"Error: Unknown model type '{current_model_type}'.\")\n",
    "    except Exception as e: print(f\"ERROR instantiating model: {e}\"); traceback.print_exc(); viz_model = None\n",
    "\n",
    "    # --- Load State and Proceed ---\n",
    "    if viz_model:\n",
    "        viz_model = viz_model.to(device)\n",
    "        print(\"\\nLoading best model state...\")\n",
    "        load_successful = False\n",
    "        try: # Load state dict (try strict then non-strict)\n",
    "            load_result = viz_model.load_state_dict(best_model_state, strict=True); print(\" Loaded state (strict=True).\"); load_successful = True\n",
    "        except RuntimeError as e:\n",
    "            print(f\" Warn: Strict load failed ({e}). Trying strict=False...\");\n",
    "            try: load_result = viz_model.load_state_dict(best_model_state, strict=False); print(\" Loaded state (strict=False).\"); load_successful = True; print(f\"    Missing: {len(load_result.missing_keys)}, Unexpected: {len(load_result.unexpected_keys)}\")\n",
    "            except Exception as E: print(f\" ERROR: Load state failed strict=False: {E}\")\n",
    "\n",
    "        # --- Proceed only if state loaded ---\n",
    "        if load_successful:\n",
    "            viz_model.eval()\n",
    "            print(\"\\nIdentifying target layer for Grad-CAM...\")\n",
    "            target_layer = None\n",
    "            model_ref_viz = viz_model # Already base model\n",
    "\n",
    "            # --- TRY block for target layer identification ---\n",
    "            try:\n",
    "                cnn_backbone_viz = getattr(model_ref_viz, 'cnn_backbone', None)\n",
    "                if cnn_backbone_viz and hasattr(cnn_backbone_viz, 'features') and \\\n",
    "                   isinstance(cnn_backbone_viz.features, nn.Sequential):\n",
    "\n",
    "                    # --- Strategy 1: Try the standard last conv layer ---\n",
    "                    if len(cnn_backbone_viz.features) > 0:\n",
    "                        last_feature_module = cnn_backbone_viz.features[-1]\n",
    "                        print(f\"  Checking last feature module (features[-1]): {type(last_feature_module)}\")\n",
    "                        if isinstance(last_feature_module, Conv2dNormActivation):\n",
    "                            if len(last_feature_module) > 0 and isinstance(last_feature_module[0], nn.Conv2d):\n",
    "                                target_layer = last_feature_module[0]\n",
    "                                print(f\"  Attempt 1: Using target features[-1][0]\")\n",
    "                        elif isinstance(last_feature_module, nn.Conv2d):\n",
    "                             target_layer = last_feature_module\n",
    "                             print(f\"  Attempt 1: Using target features[-1] (Conv2d)\")\n",
    "\n",
    "                    # --- Strategy 2: Fallback to the layer BEFORE the last ConvNormAct ---\n",
    "                    if target_layer is None and len(cnn_backbone_viz.features) > 1:\n",
    "                        second_last_module = cnn_backbone_viz.features[-2]\n",
    "                        print(f\"  Attempt 2: Falling back to features[-2]: {type(second_last_module)}\")\n",
    "                        if isinstance(second_last_module, nn.Sequential):\n",
    "                            target_layer = second_last_module\n",
    "                            print(f\"  SUCCESS (Fallback): Identified target as features[-2] (Sequential Stage Block)\")\n",
    "                        else:\n",
    "                            print(\"  Fallback failed: features[-2] is not nn.Sequential.\")\n",
    "\n",
    "                # --- Fallback for Swin ---\n",
    "                if target_layer is None and current_model_type == 'hybrid_swin':\n",
    "                     xfmr_backbone_viz = getattr(model_ref_viz, 'transformer_backbone', None)\n",
    "                     if xfmr_backbone_viz and hasattr(xfmr_backbone_viz, 'layers') and len(xfmr_backbone_viz.layers) > 0:\n",
    "                         try: target_layer = xfmr_backbone_viz.layers[-1].blocks[-1].norm2; print(f\"  SUCCESS: Identified Swin target\")\n",
    "                         except AttributeError: print(\"  Warning: Could not access Swin layers[-1].blocks[-1].norm2\")\n",
    "\n",
    "                # --- Final Check ---\n",
    "                if target_layer is None:\n",
    "                     # --- >>> CORRECTED INDENTATION <<< ---\n",
    "                     print(\"  -------------------------------------------------------------\")\n",
    "                     print(\"  ERROR: Could not automatically determine target layer.\")\n",
    "                     print(\"  -------------------------------------------------------------\")\n",
    "\n",
    "            # --- >>> CORRECTED INDENTATION <<< ---\n",
    "            except AttributeError as ae: print(f\"  Error accessing model layers: {ae}\")\n",
    "            except Exception as e: print(f\"  Unexpected error finding target layer: {e}\")\n",
    "\n",
    "\n",
    "            # --- Proceed with CAM generation ---\n",
    "            # --- >>> CORRECTED INDENTATION <<< ---\n",
    "            if target_layer:\n",
    "                SEED_FOR_VIS = 42; rng = default_rng(seed=SEED_FOR_VIS); print(f\"\\nUsing seed {SEED_FOR_VIS}\")\n",
    "                num_avail = len(df_valid_set); num_samp = min(num_images_to_visualize, num_avail)\n",
    "                if num_samp > 0: random_indices = sorted(rng.choice(num_avail, num_samp, replace=False).tolist()); print(f\"Selected indices: {random_indices}\")\n",
    "                else: random_indices = []; print(\"Warning: No validation images.\")\n",
    "\n",
    "                if random_indices:\n",
    "                    print(\"\\nGenerating Grad-CAMs...\")\n",
    "                    wandb_cam_figs = []   # <<< Initialize the list for figures\n",
    "                    wandb_cam_images = []\n",
    "\n",
    "                    for img_index in random_indices:\n",
    "                        print(f\"\\n--- Processing Image Index: {img_index} ---\")\n",
    "                        try:\n",
    "                            image_info = df_valid_set.loc[img_index]; image_path = image_info['filepath']\n",
    "                            true_label_idx = int(image_info['target']); idx2diagnosis = {v: k for k, v in diagnosis2idx.items()}\n",
    "                            true_label_name = idx2diagnosis.get(true_label_idx, f\"Unk{true_label_idx}\")\n",
    "                            print(f\" File: {os.path.basename(image_path)}, True: {true_label_name}[{true_label_idx}]\")\n",
    "\n",
    "                            input_tensor, img_for_display = load_and_preprocess_for_gradcam(image_path, current_image_size)\n",
    "                            input_tensor = input_tensor.to(device)\n",
    "\n",
    "                            # Prepare metadata tensor if needed\n",
    "                            meta_tensor_for_image = None\n",
    "                            if current_n_meta > 0:\n",
    "                                if 'meta_features' in globals() and meta_features:\n",
    "                                     try:\n",
    "                                         if all(col in image_info.index for col in meta_features): meta_vals = image_info[meta_features].values.astype(np.float32); meta_tensor_for_image = torch.tensor(meta_vals).unsqueeze(0).to(device); print(f\"  Meta tensor prepared.\")\n",
    "                                         else: print(f\"  Warn: Missing meta columns in row {img_index}.\")\n",
    "                                     except Exception as me: print(f\"  Error preparing meta tensor: {me}\"); traceback.print_exc()\n",
    "                                else: print(\"  Warn: Meta enabled but 'meta_features' list missing.\")\n",
    "\n",
    "                            # Get Model Prediction\n",
    "                            pred_label_name=\"N/A\"; pred_label_idx=-1; pred_prob_pred=0.0\n",
    "                            logits = None\n",
    "                            try:\n",
    "                                with torch.no_grad():\n",
    "                                    if current_n_meta > 0 and meta_tensor_for_image is not None: logits = viz_model(input_tensor, x_meta=meta_tensor_for_image)\n",
    "                                    elif current_n_meta == 0: logits = viz_model(input_tensor)\n",
    "                                    elif current_n_meta > 0: print(\"  ERROR: Meta required but tensor is None.\")\n",
    "                            except Exception as pred_e: print(f\"  ERROR during prediction call: {pred_e}\"); traceback.print_exc()\n",
    "                            if logits is not None:\n",
    "                                try: pred_prob = torch.softmax(logits, dim=1); pred_label_idx = torch.argmax(pred_prob, dim=1).item(); pred_prob_pred = pred_prob[0, pred_label_idx].item(); pred_label_name = idx2diagnosis.get(pred_label_idx, f\"Unk{pred_label_idx}\")\n",
    "                                except Exception as softmax_e: print(f\"  ERROR processing logits: {softmax_e}\"); pred_label_name=\"LogitErr\"; pred_label_idx=-1; pred_prob_pred=0.0;\n",
    "                            else: print(\"  Prediction skipped or failed.\")\n",
    "                            print(f\"  Prediction: {pred_label_name} [{pred_label_idx}] (Prob: {pred_prob_pred:.3f})\")\n",
    "                            # --- >>> ADD THIS: Extract probability for the TRUE class <<< ---\n",
    "                            if 0 <= true_label_idx < pred_prob.shape[1]:\n",
    "                                pred_prob_true = pred_prob[0, true_label_idx].item()\n",
    "                            else:\n",
    "                                print(f\"  Warning: true_label_idx ({true_label_idx}) out of bounds for pred_prob shape {pred_prob.shape}. Setting pred_prob_true to 0.\")\n",
    "                            # --- >>> END ADDITION <<< ---\n",
    "                            # Generate CAMs\n",
    "                            vis_true, vis_pred = None, None\n",
    "                            gray_cam_true, gray_cam_pred = None, None # Store grayscale cams too\n",
    "\n",
    "                            print(f\"  Generating CAM for TRUE Class ({true_label_name})...\")\n",
    "                            try:\n",
    "                                # Get both visualization AND the grayscale mask\n",
    "                                vis_true, gray_cam_true = generate_gradcam(viz_model, target_layer, input_tensor, img_for_display, true_label_idx, device, meta_tensor_for_image)\n",
    "                            except Exception as cam_e: print(f\"   ERROR CAM TRUE: {cam_e}\"); traceback.print_exc()\n",
    "\n",
    "                            if pred_label_idx != -1 and pred_label_idx != true_label_idx:\n",
    "                                print(f\"  Generating CAM for PRED Class ({pred_label_name})...\")\n",
    "                                try:\n",
    "                                    vis_pred, gray_cam_pred = generate_gradcam(viz_model, target_layer, input_tensor, img_for_display, pred_label_idx, device, meta_tensor_for_image)\n",
    "                                except Exception as cam_e: print(f\"   ERROR CAM PRED: {cam_e}\"); traceback.print_exc()\n",
    "                            elif pred_label_idx != -1:\n",
    "                                vis_pred = vis_true\n",
    "                                gray_cam_pred = gray_cam_true # Reuse grayscale too\n",
    "                                print(\"  Pred == True, reusing CAM.\")\n",
    "\n",
    "                            # --- >>> REVISED VISUALIZATION CODE <<< ---\n",
    "                            # --- Plotting: Replicate Example Style ---\n",
    "                            interpolation_method = 'bilinear'\n",
    "                            alpha_blend_value = 0.5\n",
    "                            if gray_cam_true is not None: # Only plot if CAM for True label succeeded\n",
    "                                try:\n",
    "                                    fig, axes = plt.subplots(1, 3, figsize=(18, 6))\n",
    "                                    img_name = os.path.basename(image_path).split('.')[0] # Get image name early\n",
    "\n",
    "                                    # --- Plot 1: Original Image ---\n",
    "                                    orig_disp = (img_for_display * 255).astype(np.uint8)\n",
    "                                    axes[0].imshow(orig_disp)\n",
    "                                    axes[0].set_title(f\"Original\\nTrue: {true_label_name} [{true_label_idx}]\")\n",
    "                                    axes[0].axis('off')\n",
    "\n",
    "                                    # --- Plot 2: CAM Overlay for True Label ---\n",
    "                                    axes[1].imshow(orig_disp) # Background\n",
    "                                    axes[1].imshow(gray_cam_true, cmap='jet', alpha=alpha_blend_value, interpolation=interpolation_method)\n",
    "                                    axes[1].set_title(f\"CAM for True ({true_label_name})\\nModel's Prob: {pred_prob_true:.3f}\")\n",
    "                                    axes[1].axis('off')\n",
    "\n",
    "                                    # --- Plot 3: CAM Overlay for Predicted Label ---\n",
    "                                    if gray_cam_pred is not None:\n",
    "                                        axes[2].imshow(orig_disp) # Background\n",
    "                                        axes[2].imshow(gray_cam_pred, cmap='jet', alpha=alpha_blend_value, interpolation=interpolation_method)\n",
    "                                        axes[2].set_title(f\"CAM for Pred ({pred_label_name})\\nModel's Prob: {pred_prob_pred:.3f}\")\n",
    "                                    else:\n",
    "                                        # Handle cases where pred CAM wasn't generated or reused incorrectly\n",
    "                                        axes[2].imshow(orig_disp) # Show original image as fallback\n",
    "                                        info_text = 'Pred CAM Error'\n",
    "                                        if pred_label_idx == -1: info_text = 'Prediction Error\\nNo CAM Generated'\n",
    "                                        elif pred_label_idx == true_label_idx: info_text = 'Pred==True\\n(See True CAM)' # Should not happen if logic above is correct\n",
    "                                        axes[2].text(0.5, 0.5, info_text, ha='center', va='center', fontsize=10, color='white', backgroundcolor='black')\n",
    "                                        axes[2].set_title(f\"CAM for Pred ({pred_label_name})\")\n",
    "                                    axes[2].axis('off')\n",
    "\n",
    "                                    # --- Overall Title ---\n",
    "                                    plt.suptitle(f\"Image: {img_name} (Idx: {img_index}) | Model: {current_model_type}/{current_cnn_backbone}\", fontsize=14)\n",
    "                                    plt.tight_layout(rect=[0, 0.03, 1, 0.92]) # Adjust layout for suptitle\n",
    "                                    plt.show()\n",
    "\n",
    "                                    # --- Save figure for WandB ---\n",
    "                                    try:\n",
    "                                        fig_filename = f\"temp_cam_{img_name}.png\"\n",
    "                                        fig.savefig(fig_filename, bbox_inches='tight')\n",
    "                                        # <<< Ensure this appends to wandb_cam_figs >>>\n",
    "                                        if 'wandb_run_ret' in locals() and wandb_run_ret is not None and wandb.run and wandb.run.id == wandb_run_ret.id:\n",
    "                                             wandb_cam_figs.append(wandb.Image(fig_filename, caption=f\"{img_name}|T:{true_label_name}|P:{pred_label_name}\"))\n",
    "                                        plt.close(fig) # Close the figure after saving\n",
    "                                        # import os; os.remove(fig_filename) # Optional cleanup\n",
    "                                    except Exception as fig_err:\n",
    "                                         print(f\"  Error saving/logging figure: {fig_err}\")\n",
    "                                         plt.close(fig)\n",
    "\n",
    "                               \n",
    "\n",
    "                                    # --- Combine for WandB ---\n",
    "                                    # Create the combined vis for WandB logging (original + 2 overlays)\n",
    "                                    if vis_true is not None and vis_pred is not None:\n",
    "                                        # Recreate display versions with text if needed\n",
    "                                        orig_disp_wb = (img_for_display * 255).astype(np.uint8)\n",
    "                                        cam_true_disp_wb = (vis_true * 255).astype(np.uint8)\n",
    "                                        cam_pred_disp_wb = (vis_pred * 255).astype(np.uint8)\n",
    "                                        cv2.putText(orig_disp_wb, f\"T:{true_label_name}\",(5,15), cv2.FONT_HERSHEY_SIMPLEX, 0.4,(255,255,255),1)\n",
    "                                        cv2.putText(cam_true_disp_wb, f\"CAM-T:{true_label_name}\",(5,15), cv2.FONT_HERSHEY_SIMPLEX, 0.4,(0,0,0),1)\n",
    "                                        cv2.putText(cam_pred_disp_wb, f\"CAM-P:{pred_label_name}\",(5,15), cv2.FONT_HERSHEY_SIMPLEX, 0.4,(0,0,0),1)\n",
    "\n",
    "                                        combined_vis = np.concatenate((orig_disp_wb, cam_true_disp_wb, cam_pred_disp_wb), axis=1)\n",
    "                                        if 'wandb_run_ret' in locals() and wandb_run_ret is not None:\n",
    "                                             try: wandb_cam_images.append(wandb.Image(combined_vis, caption=f\"{img_name}|T:{true_label_name}|P:{pred_label_name}\"))\n",
    "                                             except Exception as wandb_img_e: print(f\"  Error creating wandb.Image: {wandb_img_e}\")\n",
    "                                    # --- End Combine for WandB ---\n",
    "\n",
    "                                except Exception as vis_e: print(f\"  Error creating/displaying viz: {vis_e}\")\n",
    "                            else:\n",
    "                                print(\"  Skipping visualization and logging for this image as True Grayscale CAM failed.\")\n",
    "                            # --- >>> END REVISED VISUALIZATION CODE <<< ---\n",
    "\n",
    "                        except Exception as loop_e: print(f\"  ERROR processing image {img_index}: {loop_e}\"); traceback.print_exc()\n",
    "                    # --- End For Loop ---\n",
    "\n",
    "                    # --- Final WandB Logging ---\n",
    "                    # <<< MODIFY THIS BLOCK >>>\n",
    "                    if wandb_cam_figs: # <<< CHECK THE CORRECT LIST\n",
    "                         if 'wandb_run_ret' in locals() and wandb_run_ret is not None:\n",
    "                             is_active = wandb.run is not None and wandb.run.id == wandb_run_ret.id\n",
    "                             print(f\"\\nLogging Check: {len(wandb_cam_figs)} figure images ready. Run active? {is_active}\") # Updated print\n",
    "                             if is_active:\n",
    "                                 try:\n",
    "                                      log_step = best_epoch_num if best_epoch_num > 0 else locals().get('last_epoch_completed', 0)\n",
    "                                      # <<< LOG THE CORRECT LIST with a better key name >>>\n",
    "                                      wandb.log({\"Grad_CAM_Figures\": wandb_cam_figs}, step=log_step)\n",
    "                                      print(\"Logged Grad-CAM figures to WandB.\")\n",
    "                                 except Exception as log_e: print(f\"Warning: Failed logging Grad-CAM figures: {log_e}\")\n",
    "                             else: print(\"Skipping WandB log: Run finished or mismatched.\")\n",
    "                         else: print(\"Skipping WandB log: wandb_run_ret object missing.\")\n",
    "                    elif target_layer: print(\"\\nNo Grad-CAM figures were successfully generated/collected for logging.\") # Updated print\n",
    "                    # --- End Final Logging ---\n",
    "\n",
    "                else: print(\"Warning: No random indices selected for CAM.\")\n",
    "            else: print(\"\\nSkipping CAM generation loop: Target layer not identified.\")\n",
    "        else: print(\"\\nSkipping CAM generation: Model state loading failed.\")\n",
    "    else: print(\"\\nSkipping CAM generation: Model instantiation failed.\")\n",
    "else: print(\"\\nSkipping Grad-CAM generation: Prerequisites not met.\")\n",
    "\n",
    "print(\"\\n===== Grad-CAM Visualization Finished =====\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "3041956d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-18T16:25:29.227659Z",
     "iopub.status.busy": "2025-06-18T16:25:29.227297Z",
     "iopub.status.idle": "2025-06-18T16:25:29.233116Z",
     "shell.execute_reply": "2025-06-18T16:25:29.232295Z"
    },
    "papermill": {
     "duration": 7.719803,
     "end_time": "2025-06-18T16:25:29.234242",
     "exception": false,
     "start_time": "2025-06-18T16:25:21.514439",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Attempting to finish WandB run...\n",
      "WandB run (k68oa6dc) already finished or object is detached.\n"
     ]
    }
   ],
   "source": [
    "# --- NEW CELL AT THE VERY END ---\n",
    "print(\"\\nAttempting to finish WandB run...\")\n",
    "if 'wandb_run_ret' in locals() and wandb_run_ret is not None:\n",
    "    try:\n",
    "        # Check if the run associated with the object is still active before finishing\n",
    "        # Note: Accessing wandb.run might be None even if wandb_run_ret exists if finish was called elsewhere\n",
    "        if wandb.run and wandb.run.id == wandb_run_ret.id:\n",
    "             print(f\"Finishing active WandB run: {wandb_run_ret.id}\")\n",
    "             wandb.finish()\n",
    "             print(\"WandB run finished.\")\n",
    "        elif wandb.run:\n",
    "             print(f\"Warning: Another WandB run seems active ({wandb.run.id}). Not finishing the target run ({wandb_run_ret.id}).\")\n",
    "        else:\n",
    "             print(f\"WandB run ({wandb_run_ret.id}) already finished or object is detached.\")\n",
    "    except Exception as e:\n",
    "        print(f\"Error finishing WandB run: {e}\")\n",
    "elif 'wandb' in locals() and wandb.run is not None:\n",
    "    # Fallback if wandb_run_ret wasn't captured but a run is somehow still active\n",
    "    print(f\"Finishing potentially active global WandB run: {wandb.run.id}\")\n",
    "    wandb.finish()\n",
    "    print(\"WandB run finished.\")\n",
    "else:\n",
    "    print(\"No active WandB run object found to finish.\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "databundleVersionId": 1222630,
     "sourceId": 20270,
     "sourceType": "competition"
    },
    {
     "datasetId": 756214,
     "sourceId": 1339680,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 756247,
     "sourceId": 1339691,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 756315,
     "sourceId": 1339694,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 762181,
     "sourceId": 1353805,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 762191,
     "sourceId": 1353810,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 762203,
     "sourceId": 1353811,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 846815,
     "sourceId": 1444814,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30919,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 43081.465642,
   "end_time": "2025-06-18T16:25:40.820366",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-06-18T04:27:39.354724",
   "version": "2.6.0"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "7d40054e3809455ba4bbe8ce1293e7b3": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "8063caa9d67b46f0a85f7619a70efabf": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_7d40054e3809455ba4bbe8ce1293e7b3",
       "max": 365255040.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_af92fce85b924c2bb11029a279ea27b0",
       "tabbable": null,
       "tooltip": null,
       "value": 365255040.0
      }
     },
     "92611a4f1a66438ab9b4cab65135693a": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "92f1d1ce7b814b7cbf79770adc08eb52": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "af92fce85b924c2bb11029a279ea27b0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "bf062678187946f993ce63b541b96abb": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_e54bc62253824c7484cac617748cc46e",
        "IPY_MODEL_8063caa9d67b46f0a85f7619a70efabf",
        "IPY_MODEL_c16a8dc0bdb74975b5040f5e3f75aac8"
       ],
       "layout": "IPY_MODEL_92611a4f1a66438ab9b4cab65135693a",
       "tabbable": null,
       "tooltip": null
      }
     },
     "c16a8dc0bdb74975b5040f5e3f75aac8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_f0a0fd9edfb04931a2cac387a3de3411",
       "placeholder": "​",
       "style": "IPY_MODEL_edb6b1e220364462be12b73ea66c729a",
       "tabbable": null,
       "tooltip": null,
       "value": " 365M/365M [00:01&lt;00:00, 285MB/s]"
      }
     },
     "e54bc62253824c7484cac617748cc46e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_eef06d5abae64bc3b390052ff7d08141",
       "placeholder": "​",
       "style": "IPY_MODEL_92f1d1ce7b814b7cbf79770adc08eb52",
       "tabbable": null,
       "tooltip": null,
       "value": "model.safetensors: 100%"
      }
     },
     "edb6b1e220364462be12b73ea66c729a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "eef06d5abae64bc3b390052ff7d08141": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f0a0fd9edfb04931a2cac387a3de3411": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
